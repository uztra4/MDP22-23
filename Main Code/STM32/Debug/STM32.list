
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010290  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001134  08010420  08010420  00020420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011554  08011554  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011554  08011554  00021554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801155c  0801155c  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801155c  0801155c  0002155c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011560  08011560  00021560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011564  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301e4  2**0
                  CONTENTS
 10 .bss          00006194  200001e4  200001e4  000301e4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20006378  20006378  000301e4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5d5  00000000  00000000  00030214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003be2  00000000  00000000  0004d7e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  000513d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001810  00000000  00000000  00052d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024813  00000000  00000000  00054550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cdd1  00000000  00000000  00078d63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db145  00000000  00000000  00095b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00170c79  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008198  00000000  00000000  00170ccc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e4 	.word	0x200001e4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010408 	.word	0x08010408

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e8 	.word	0x200001e8
 80001cc:	08010408 	.word	0x08010408

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <IMU_Initialise>:

/*
 * INITIALISATION
 */
uint8_t* IMU_Initialise(ICM20948 *dev, I2C_HandleTypeDef *i2cHandle, UART_HandleTypeDef *uart)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08c      	sub	sp, #48	; 0x30
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]

	 char hex[2];
	 uint8_t uartbuf[20]="  IMU ID =      "; // buffer for data
 8001004:	4bad      	ldr	r3, [pc, #692]	; (80012bc <IMU_Initialise+0x2c4>)
 8001006:	f107 0418 	add.w	r4, r7, #24
 800100a:	461d      	mov	r5, r3
 800100c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800100e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	7023      	strb	r3, [r4, #0]
 8001014:	f107 0329 	add.w	r3, r7, #41	; 0x29
 8001018:	2200      	movs	r2, #0
 800101a:	801a      	strh	r2, [r3, #0]
 800101c:	709a      	strb	r2, [r3, #2]
     uint8_t regData;

	 dev->i2cHandle = i2cHandle;
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	68ba      	ldr	r2, [r7, #8]
 8001022:	601a      	str	r2, [r3, #0]
	 dev->uart = uart;
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	605a      	str	r2, [r3, #4]
	  buf[0] = REG_ADD_REG_BANK_SEL;  // bank select register
	  buf[1] = REG_VAL_REG_BANK_0;           // bank 0
	  ret = HAL_I2C_Master_Transmit(i2cHandle, IMU_ADDR, buf, I2C_MEMADD_SIZE_16BIT, HAL_MAX_DELAY);

*/
	  ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800102a:	2200      	movs	r2, #0
 800102c:	217f      	movs	r1, #127	; 0x7f
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 f9a6 	bl	8001380 <IMU_WriteOneByte>
 8001034:	4603      	mov	r3, r0
 8001036:	461a      	mov	r2, r3
 8001038:	4ba1      	ldr	r3, [pc, #644]	; (80012c0 <IMU_Initialise+0x2c8>)
 800103a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK ){
 800103c:	4ba0      	ldr	r3, [pc, #640]	; (80012c0 <IMU_Initialise+0x2c8>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d007      	beq.n	8001054 <IMU_Initialise+0x5c>
	       strcpy((char*)uartbuf, "Error 1\r\n");
 8001044:	f107 0318 	add.w	r3, r7, #24
 8001048:	4a9e      	ldr	r2, [pc, #632]	; (80012c4 <IMU_Initialise+0x2cc>)
 800104a:	ca07      	ldmia	r2, {r0, r1, r2}
 800104c:	c303      	stmia	r3!, {r0, r1}
 800104e:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001050:	2300      	movs	r3, #0
 8001052:	e18b      	b.n	800136c <IMU_Initialise+0x374>
	  	   }

	  //check ID
/*	  buf[0] = REG_WHO_AM_I;  //(Should return ID =  0xEA)
	  ret = HAL_I2C_Mem_Read(i2cHandle, IMU_ADDR, REG_WHO_AM_I, I2C_MEMADD_SIZE_8BIT, buf, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);  */
	  ret = IMU_ReadOneByte(dev, REG_WHO_AM_I, &regData);
 8001054:	2100      	movs	r1, #0
 8001056:	f107 0317 	add.w	r3, r7, #23
 800105a:	461a      	mov	r2, r3
 800105c:	68f8      	ldr	r0, [r7, #12]
 800105e:	f000 f9af 	bl	80013c0 <IMU_ReadOneByte>
 8001062:	4603      	mov	r3, r0
 8001064:	461a      	mov	r2, r3
 8001066:	4b96      	ldr	r3, [pc, #600]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001068:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800106a:	4b95      	ldr	r3, [pc, #596]	; (80012c0 <IMU_Initialise+0x2c8>)
 800106c:	781b      	ldrb	r3, [r3, #0]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d007      	beq.n	8001082 <IMU_Initialise+0x8a>
	       strcpy((char*)uartbuf, "Error 2\r\n");
 8001072:	f107 0318 	add.w	r3, r7, #24
 8001076:	4a94      	ldr	r2, [pc, #592]	; (80012c8 <IMU_Initialise+0x2d0>)
 8001078:	ca07      	ldmia	r2, {r0, r1, r2}
 800107a:	c303      	stmia	r3!, {r0, r1}
 800107c:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 800107e:	2300      	movs	r3, #0
 8001080:	e174      	b.n	800136c <IMU_Initialise+0x374>
	       }
	  else{
		  //sprintf(hex, "%x", buf[0]); // change to hexidecimal
		  sprintf(hex, "%x", regData); // change to hexidecimal
 8001082:	7dfb      	ldrb	r3, [r7, #23]
 8001084:	461a      	mov	r2, r3
 8001086:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800108a:	4990      	ldr	r1, [pc, #576]	; (80012cc <IMU_Initialise+0x2d4>)
 800108c:	4618      	mov	r0, r3
 800108e:	f00b fbd1 	bl	800c834 <siprintf>
	      strcpy(uartbuf, hex); // copy back to buf
 8001092:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8001096:	f107 0318 	add.w	r3, r7, #24
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f00b fbe9 	bl	800c874 <strcpy>
	      uartbuf[12] = uartbuf[0]-32; // change to upper case
 80010a2:	7e3b      	ldrb	r3, [r7, #24]
 80010a4:	3b20      	subs	r3, #32
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	      uartbuf[13] = uartbuf[1]-32;
 80010ac:	7e7b      	ldrb	r3, [r7, #25]
 80010ae:	3b20      	subs	r3, #32
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	      uartbuf[14] = '\r';
 80010b6:	230d      	movs	r3, #13
 80010b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	      uartbuf[15] = '\n';
 80010bc:	230a      	movs	r3, #10
 80010be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	      uartbuf[16] = '\0';
 80010c2:	2300      	movs	r3, #0
 80010c4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	      uartbuf[0]  = '\r';
 80010c8:	230d      	movs	r3, #13
 80010ca:	763b      	strb	r3, [r7, #24]
	      uartbuf[1]  = '\n';
 80010cc:	230a      	movs	r3, #10
 80010ce:	767b      	strb	r3, [r7, #25]
	      uartbuf[2]  = 'I';
 80010d0:	2349      	movs	r3, #73	; 0x49
 80010d2:	76bb      	strb	r3, [r7, #26]
	      }


      // for debuggiing - send to uart and return to main to display on OLED and UART
	  HAL_UART_Transmit(dev->uart, uartbuf, strlen((char*)uartbuf), HAL_MAX_DELAY);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	685c      	ldr	r4, [r3, #4]
 80010d8:	f107 0318 	add.w	r3, r7, #24
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff f877 	bl	80001d0 <strlen>
 80010e2:	4603      	mov	r3, r0
 80010e4:	b29a      	uxth	r2, r3
 80010e6:	f107 0118 	add.w	r1, r7, #24
 80010ea:	f04f 33ff 	mov.w	r3, #4294967295
 80010ee:	4620      	mov	r0, r4
 80010f0:	f006 fc0b 	bl	800790a <HAL_UART_Transmit>
	  //return &buf[0];

	  // Initialize
	  // Bank 0 - Reset the device and then auto selects the best available clock source
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	217f      	movs	r1, #127	; 0x7f
 80010f8:	68f8      	ldr	r0, [r7, #12]
 80010fa:	f000 f941 	bl	8001380 <IMU_WriteOneByte>
 80010fe:	4603      	mov	r3, r0
 8001100:	461a      	mov	r2, r3
 8001102:	4b6f      	ldr	r3, [pc, #444]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001104:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001106:	4b6e      	ldr	r3, [pc, #440]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d007      	beq.n	800111e <IMU_Initialise+0x126>
	       strcpy((char*)uartbuf, "Error 3\r\n");
 800110e:	f107 0318 	add.w	r3, r7, #24
 8001112:	4a6f      	ldr	r2, [pc, #444]	; (80012d0 <IMU_Initialise+0x2d8>)
 8001114:	ca07      	ldmia	r2, {r0, r1, r2}
 8001116:	c303      	stmia	r3!, {r0, r1}
 8001118:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 800111a:	2300      	movs	r3, #0
 800111c:	e126      	b.n	800136c <IMU_Initialise+0x374>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_ALL_RGE_RESET); // reset device - check hearder file value should be 0xF1
 800111e:	22f1      	movs	r2, #241	; 0xf1
 8001120:	2106      	movs	r1, #6
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	f000 f92c 	bl	8001380 <IMU_WriteOneByte>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	4b64      	ldr	r3, [pc, #400]	; (80012c0 <IMU_Initialise+0x2c8>)
 800112e:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001130:	4b63      	ldr	r3, [pc, #396]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d00a      	beq.n	800114e <IMU_Initialise+0x156>
	       strcpy((char*)uartbuf, "Error 4a\r\n");
 8001138:	f107 0318 	add.w	r3, r7, #24
 800113c:	4a65      	ldr	r2, [pc, #404]	; (80012d4 <IMU_Initialise+0x2dc>)
 800113e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001140:	c303      	stmia	r3!, {r0, r1}
 8001142:	801a      	strh	r2, [r3, #0]
 8001144:	3302      	adds	r3, #2
 8001146:	0c12      	lsrs	r2, r2, #16
 8001148:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 800114a:	2300      	movs	r3, #0
 800114c:	e10e      	b.n	800136c <IMU_Initialise+0x374>
	       }
      HAL_Delay(10);
 800114e:	200a      	movs	r0, #10
 8001150:	f001 ffd8 	bl	8003104 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_1,  REG_VAL_RUN_MODE); // auto selects the best available clock source for device
 8001154:	2201      	movs	r2, #1
 8001156:	2106      	movs	r1, #6
 8001158:	68f8      	ldr	r0, [r7, #12]
 800115a:	f000 f911 	bl	8001380 <IMU_WriteOneByte>
 800115e:	4603      	mov	r3, r0
 8001160:	461a      	mov	r2, r3
 8001162:	4b57      	ldr	r3, [pc, #348]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001164:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001166:	4b56      	ldr	r3, [pc, #344]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00a      	beq.n	8001184 <IMU_Initialise+0x18c>
	       strcpy((char*)uartbuf, "Error 4b\r\n");
 800116e:	f107 0318 	add.w	r3, r7, #24
 8001172:	4a59      	ldr	r2, [pc, #356]	; (80012d8 <IMU_Initialise+0x2e0>)
 8001174:	ca07      	ldmia	r2, {r0, r1, r2}
 8001176:	c303      	stmia	r3!, {r0, r1}
 8001178:	801a      	strh	r2, [r3, #0]
 800117a:	3302      	adds	r3, #2
 800117c:	0c12      	lsrs	r2, r2, #16
 800117e:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001180:	2300      	movs	r3, #0
 8001182:	e0f3      	b.n	800136c <IMU_Initialise+0x374>
	       }


	  // Turn off and on Accelator and Gyro - page 28
      HAL_Delay(10);
 8001184:	200a      	movs	r0, #10
 8001186:	f001 ffbd 	bl	8003104 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_OFF); // OFF
 800118a:	223f      	movs	r2, #63	; 0x3f
 800118c:	2107      	movs	r1, #7
 800118e:	68f8      	ldr	r0, [r7, #12]
 8001190:	f000 f8f6 	bl	8001380 <IMU_WriteOneByte>
 8001194:	4603      	mov	r3, r0
 8001196:	461a      	mov	r2, r3
 8001198:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <IMU_Initialise+0x2c8>)
 800119a:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <IMU_Initialise+0x2c8>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d00a      	beq.n	80011ba <IMU_Initialise+0x1c2>
	       strcpy((char*)uartbuf, "Error 5a\r\n");
 80011a4:	f107 0318 	add.w	r3, r7, #24
 80011a8:	4a4c      	ldr	r2, [pc, #304]	; (80012dc <IMU_Initialise+0x2e4>)
 80011aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ac:	c303      	stmia	r3!, {r0, r1}
 80011ae:	801a      	strh	r2, [r3, #0]
 80011b0:	3302      	adds	r3, #2
 80011b2:	0c12      	lsrs	r2, r2, #16
 80011b4:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80011b6:	2300      	movs	r3, #0
 80011b8:	e0d8      	b.n	800136c <IMU_Initialise+0x374>
	       }

      HAL_Delay(10);
 80011ba:	200a      	movs	r0, #10
 80011bc:	f001 ffa2 	bl	8003104 <HAL_Delay>
      ret = IMU_WriteOneByte(dev, REG_ADD_PWR_MGMT_2,  REG_VAL_ACCEL_GYROLL_ON); // ON
 80011c0:	2200      	movs	r2, #0
 80011c2:	2107      	movs	r1, #7
 80011c4:	68f8      	ldr	r0, [r7, #12]
 80011c6:	f000 f8db 	bl	8001380 <IMU_WriteOneByte>
 80011ca:	4603      	mov	r3, r0
 80011cc:	461a      	mov	r2, r3
 80011ce:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <IMU_Initialise+0x2c8>)
 80011d0:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80011d2:	4b3b      	ldr	r3, [pc, #236]	; (80012c0 <IMU_Initialise+0x2c8>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d00a      	beq.n	80011f0 <IMU_Initialise+0x1f8>
	       strcpy((char*)uartbuf, "Error 5b\r\n");
 80011da:	f107 0318 	add.w	r3, r7, #24
 80011de:	4a40      	ldr	r2, [pc, #256]	; (80012e0 <IMU_Initialise+0x2e8>)
 80011e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80011e2:	c303      	stmia	r3!, {r0, r1}
 80011e4:	801a      	strh	r2, [r3, #0]
 80011e6:	3302      	adds	r3, #2
 80011e8:	0c12      	lsrs	r2, r2, #16
 80011ea:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 80011ec:	2300      	movs	r3, #0
 80011ee:	e0bd      	b.n	800136c <IMU_Initialise+0x374>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_INT_ENABLE_1,  REG_VAL_INT_ENABLED); // Turn on inteerup on pin INT1
 80011f0:	2201      	movs	r2, #1
 80011f2:	2110      	movs	r1, #16
 80011f4:	68f8      	ldr	r0, [r7, #12]
 80011f6:	f000 f8c3 	bl	8001380 <IMU_WriteOneByte>
 80011fa:	4603      	mov	r3, r0
 80011fc:	461a      	mov	r2, r3
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001200:	701a      	strb	r2, [r3, #0]


      // Bank 2 - Gyro and Acce and start running
      /* user bank 2 register */
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001202:	2220      	movs	r2, #32
 8001204:	217f      	movs	r1, #127	; 0x7f
 8001206:	68f8      	ldr	r0, [r7, #12]
 8001208:	f000 f8ba 	bl	8001380 <IMU_WriteOneByte>
 800120c:	4603      	mov	r3, r0
 800120e:	461a      	mov	r2, r3
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001212:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d007      	beq.n	800122c <IMU_Initialise+0x234>
	       strcpy((char*)uartbuf, "Error 6\r\n");
 800121c:	f107 0318 	add.w	r3, r7, #24
 8001220:	4a30      	ldr	r2, [pc, #192]	; (80012e4 <IMU_Initialise+0x2ec>)
 8001222:	ca07      	ldmia	r2, {r0, r1, r2}
 8001224:	c303      	stmia	r3!, {r0, r1}
 8001226:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001228:	2300      	movs	r3, #0
 800122a:	e09f      	b.n	800136c <IMU_Initialise+0x374>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_SMPLRT_DIV, 0x07);  // pg 59  Gyro sample rate divider Output data rate = 1.11K/7 = 157 Hz
 800122c:	2207      	movs	r2, #7
 800122e:	2100      	movs	r1, #0
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f8a5 	bl	8001380 <IMU_WriteOneByte>
 8001236:	4603      	mov	r3, r0
 8001238:	461a      	mov	r2, r3
 800123a:	4b21      	ldr	r3, [pc, #132]	; (80012c0 <IMU_Initialise+0x2c8>)
 800123c:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 800123e:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d007      	beq.n	8001256 <IMU_Initialise+0x25e>
	       strcpy((char*)uartbuf, "Error 7\r\n");
 8001246:	f107 0318 	add.w	r3, r7, #24
 800124a:	4a27      	ldr	r2, [pc, #156]	; (80012e8 <IMU_Initialise+0x2f0>)
 800124c:	ca07      	ldmia	r2, {r0, r1, r2}
 800124e:	c303      	stmia	r3!, {r0, r1}
 8001250:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 8001252:	2300      	movs	r3, #0
 8001254:	e08a      	b.n	800136c <IMU_Initialise+0x374>
	       }
      ret = IMU_WriteOneByte(dev, REG_ADD_GYRO_CONFIG_1, REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF); // enable low pass filter and set Gyro FS
 8001256:	2233      	movs	r2, #51	; 0x33
 8001258:	2101      	movs	r1, #1
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f000 f890 	bl	8001380 <IMU_WriteOneByte>
 8001260:	4603      	mov	r3, r0
 8001262:	461a      	mov	r2, r3
 8001264:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001266:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001268:	4b15      	ldr	r3, [pc, #84]	; (80012c0 <IMU_Initialise+0x2c8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <IMU_Initialise+0x288>
	       strcpy((char*)uartbuf, "Error 8\r\n");
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	4a1d      	ldr	r2, [pc, #116]	; (80012ec <IMU_Initialise+0x2f4>)
 8001276:	ca07      	ldmia	r2, {r0, r1, r2}
 8001278:	c303      	stmia	r3!, {r0, r1}
 800127a:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 800127c:	2300      	movs	r3, #0
 800127e:	e075      	b.n	800136c <IMU_Initialise+0x374>
	       }

      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07); //  pg 63 Acce sample rate divider: ODR = 1.125KHz/7 = 161
 8001280:	2207      	movs	r2, #7
 8001282:	2111      	movs	r1, #17
 8001284:	68f8      	ldr	r0, [r7, #12]
 8001286:	f000 f87b 	bl	8001380 <IMU_WriteOneByte>
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	4b0c      	ldr	r3, [pc, #48]	; (80012c0 <IMU_Initialise+0x2c8>)
 8001290:	701a      	strb	r2, [r3, #0]
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_SMPLRT_DIV_1,  0x00); // upper 3 bit of sample rate = 0
 8001292:	2200      	movs	r2, #0
 8001294:	2110      	movs	r1, #16
 8001296:	68f8      	ldr	r0, [r7, #12]
 8001298:	f000 f872 	bl	8001380 <IMU_WriteOneByte>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	4b07      	ldr	r3, [pc, #28]	; (80012c0 <IMU_Initialise+0x2c8>)
 80012a2:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 80012a4:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <IMU_Initialise+0x2c8>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d023      	beq.n	80012f4 <IMU_Initialise+0x2fc>
	       strcpy((char*)uartbuf, "Error 9\r\n");
 80012ac:	f107 0318 	add.w	r3, r7, #24
 80012b0:	4a0f      	ldr	r2, [pc, #60]	; (80012f0 <IMU_Initialise+0x2f8>)
 80012b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80012b4:	c303      	stmia	r3!, {r0, r1}
 80012b6:	801a      	strh	r2, [r3, #0]
	       return &uartbuf[0];
 80012b8:	2300      	movs	r3, #0
 80012ba:	e057      	b.n	800136c <IMU_Initialise+0x374>
 80012bc:	080104c0 	.word	0x080104c0
 80012c0:	20000200 	.word	0x20000200
 80012c4:	08010420 	.word	0x08010420
 80012c8:	0801042c 	.word	0x0801042c
 80012cc:	08010438 	.word	0x08010438
 80012d0:	0801043c 	.word	0x0801043c
 80012d4:	08010448 	.word	0x08010448
 80012d8:	08010454 	.word	0x08010454
 80012dc:	08010460 	.word	0x08010460
 80012e0:	0801046c 	.word	0x0801046c
 80012e4:	08010478 	.word	0x08010478
 80012e8:	08010484 	.word	0x08010484
 80012ec:	08010490 	.word	0x08010490
 80012f0:	0801049c 	.word	0x0801049c
	       }

	  // enable LPF and set accel full scale to +/-2G, sensitivity scale factor = 16384 LSB/g
      ret = IMU_WriteOneByte(dev, REG_ADD_ACCEL_CONFIG, REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);
 80012f4:	2231      	movs	r2, #49	; 0x31
 80012f6:	2114      	movs	r1, #20
 80012f8:	68f8      	ldr	r0, [r7, #12]
 80012fa:	f000 f841 	bl	8001380 <IMU_WriteOneByte>
 80012fe:	4603      	mov	r3, r0
 8001300:	461a      	mov	r2, r3
 8001302:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <IMU_Initialise+0x37c>)
 8001304:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001306:	4b1b      	ldr	r3, [pc, #108]	; (8001374 <IMU_Initialise+0x37c>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d00a      	beq.n	8001324 <IMU_Initialise+0x32c>
	       strcpy((char*)uartbuf, "Error 10\r\n");
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	4a19      	ldr	r2, [pc, #100]	; (8001378 <IMU_Initialise+0x380>)
 8001314:	ca07      	ldmia	r2, {r0, r1, r2}
 8001316:	c303      	stmia	r3!, {r0, r1}
 8001318:	801a      	strh	r2, [r3, #0]
 800131a:	3302      	adds	r3, #2
 800131c:	0c12      	lsrs	r2, r2, #16
 800131e:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 8001320:	2300      	movs	r3, #0
 8001322:	e023      	b.n	800136c <IMU_Initialise+0x374>
	       }

	  IMU_WriteOneByte(dev, REG_ADD_TEMP_CONFIG, REG_VAL_TEMP_CONFIG); // Temp configuration pg 67
 8001324:	2200      	movs	r2, #0
 8001326:	2153      	movs	r1, #83	; 0x53
 8001328:	68f8      	ldr	r0, [r7, #12]
 800132a:	f000 f829 	bl	8001380 <IMU_WriteOneByte>



      // back to bank 0
      ret = IMU_WriteOneByte(dev, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 800132e:	2200      	movs	r2, #0
 8001330:	217f      	movs	r1, #127	; 0x7f
 8001332:	68f8      	ldr	r0, [r7, #12]
 8001334:	f000 f824 	bl	8001380 <IMU_WriteOneByte>
 8001338:	4603      	mov	r3, r0
 800133a:	461a      	mov	r2, r3
 800133c:	4b0d      	ldr	r3, [pc, #52]	; (8001374 <IMU_Initialise+0x37c>)
 800133e:	701a      	strb	r2, [r3, #0]
	  if ( ret != HAL_OK )	  {
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <IMU_Initialise+0x37c>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d00a      	beq.n	800135e <IMU_Initialise+0x366>
	       strcpy((char*)uartbuf, "Error 11\r\n");
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4a0b      	ldr	r2, [pc, #44]	; (800137c <IMU_Initialise+0x384>)
 800134e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001350:	c303      	stmia	r3!, {r0, r1}
 8001352:	801a      	strh	r2, [r3, #0]
 8001354:	3302      	adds	r3, #2
 8001356:	0c12      	lsrs	r2, r2, #16
 8001358:	701a      	strb	r2, [r3, #0]
	       return &uartbuf[0];
 800135a:	2300      	movs	r3, #0
 800135c:	e006      	b.n	800136c <IMU_Initialise+0x374>
	       }
      HAL_Delay(100);
 800135e:	2064      	movs	r0, #100	; 0x64
 8001360:	f001 fed0 	bl	8003104 <HAL_Delay>

      /* offset */
      Gyro_calibrate(dev);  // calibrate the offset of the gyroscope
 8001364:	68f8      	ldr	r0, [r7, #12]
 8001366:	f000 f84f 	bl	8001408 <Gyro_calibrate>

      // everthing OK
      //strcpy((char*)buf, "Initialize OK\r\n");
      //return &buf;
      return 0; // 0 means 0 error
 800136a:	2300      	movs	r3, #0

}
 800136c:	4618      	mov	r0, r3
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bdb0      	pop	{r4, r5, r7, pc}
 8001374:	20000200 	.word	0x20000200
 8001378:	080104a8 	.word	0x080104a8
 800137c:	080104b4 	.word	0x080104b4

08001380 <IMU_WriteOneByte>:


HAL_StatusTypeDef IMU_WriteOneByte(ICM20948 *dev, uint8_t reg, uint8_t data)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b088      	sub	sp, #32
 8001384:	af04      	add	r7, sp, #16
 8001386:	6078      	str	r0, [r7, #4]
 8001388:	460b      	mov	r3, r1
 800138a:	70fb      	strb	r3, [r7, #3]
 800138c:	4613      	mov	r3, r2
 800138e:	70bb      	strb	r3, [r7, #2]
	 uint8_t regData = data;
 8001390:	78bb      	ldrb	r3, [r7, #2]
 8001392:	73fb      	strb	r3, [r7, #15]
	 return HAL_I2C_Mem_Write(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &regData, 1, HAL_MAX_DELAY);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6818      	ldr	r0, [r3, #0]
 8001398:	23d0      	movs	r3, #208	; 0xd0
 800139a:	b299      	uxth	r1, r3
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	f04f 33ff 	mov.w	r3, #4294967295
 80013a4:	9302      	str	r3, [sp, #8]
 80013a6:	2301      	movs	r3, #1
 80013a8:	9301      	str	r3, [sp, #4]
 80013aa:	f107 030f 	add.w	r3, r7, #15
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	2301      	movs	r3, #1
 80013b2:	f002 fb91 	bl	8003ad8 <HAL_I2C_Mem_Write>
 80013b6:	4603      	mov	r3, r0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <IMU_ReadOneByte>:

HAL_StatusTypeDef IMU_ReadOneByte(ICM20948 *dev, uint8_t reg, uint8_t *data)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af04      	add	r7, sp, #16
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	460b      	mov	r3, r1
 80013ca:	607a      	str	r2, [r7, #4]
 80013cc:	72fb      	strb	r3, [r7, #11]
	ret=HAL_I2C_Mem_Read(dev->i2cHandle, IMU_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, I2C_MEMADD_SIZE_8BIT, HAL_MAX_DELAY);
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	6818      	ldr	r0, [r3, #0]
 80013d2:	23d0      	movs	r3, #208	; 0xd0
 80013d4:	b299      	uxth	r1, r3
 80013d6:	7afb      	ldrb	r3, [r7, #11]
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f04f 33ff 	mov.w	r3, #4294967295
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	2301      	movs	r3, #1
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	2301      	movs	r3, #1
 80013ea:	f002 fc6f 	bl	8003ccc <HAL_I2C_Mem_Read>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	4b04      	ldr	r3, [pc, #16]	; (8001404 <IMU_ReadOneByte+0x44>)
 80013f4:	701a      	strb	r2, [r3, #0]
	return ret;
 80013f6:	4b03      	ldr	r3, [pc, #12]	; (8001404 <IMU_ReadOneByte+0x44>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	20000200 	.word	0x20000200

08001408 <Gyro_calibrate>:

}

HAL_StatusTypeDef Gyro_calibrate(ICM20948 *dev)  // calibrate the offset of the gyro
// store the offset in int16_t gyro_offset[3]
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b088      	sub	sp, #32
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
    uint8_t u8Buf[2] = {0}; // reset to zero upon entry
 8001410:	2300      	movs	r3, #0
 8001412:	833b      	strh	r3, [r7, #24]
    int32_t gyroRaw[3] = {0}; // reset to zero upon entry
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
    int8_t i;
    int16_t temp;

    for (i=0; i< 32; i++){
 8001420:	2300      	movs	r3, #0
 8001422:	77fb      	strb	r3, [r7, #31]
 8001424:	e055      	b.n	80014d2 <Gyro_calibrate+0xca>
    	IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 8001426:	f107 0318 	add.w	r3, r7, #24
 800142a:	461a      	mov	r2, r3
 800142c:	2134      	movs	r1, #52	; 0x34
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff ffc6 	bl	80013c0 <IMU_ReadOneByte>
    	IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 8001434:	f107 0318 	add.w	r3, r7, #24
 8001438:	3301      	adds	r3, #1
 800143a:	461a      	mov	r2, r3
 800143c:	2133      	movs	r1, #51	; 0x33
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff ffbe 	bl	80013c0 <IMU_ReadOneByte>
    	temp = (u8Buf[1]<<8)|u8Buf[0]; // for debugging
 8001444:	7e7b      	ldrb	r3, [r7, #25]
 8001446:	021b      	lsls	r3, r3, #8
 8001448:	b21a      	sxth	r2, r3
 800144a:	7e3b      	ldrb	r3, [r7, #24]
 800144c:	b21b      	sxth	r3, r3
 800144e:	4313      	orrs	r3, r2
 8001450:	83bb      	strh	r3, [r7, #28]
    	gyroRaw[0] = temp + gyroRaw[0];
 8001452:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	4413      	add	r3, r2
 800145a:	60fb      	str	r3, [r7, #12]
    	//gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[0];

    	IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 800145c:	f107 0318 	add.w	r3, r7, #24
 8001460:	461a      	mov	r2, r3
 8001462:	2136      	movs	r1, #54	; 0x36
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f7ff ffab 	bl	80013c0 <IMU_ReadOneByte>
    	IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 800146a:	f107 0318 	add.w	r3, r7, #24
 800146e:	3301      	adds	r3, #1
 8001470:	461a      	mov	r2, r3
 8001472:	2135      	movs	r1, #53	; 0x35
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ffa3 	bl	80013c0 <IMU_ReadOneByte>
    	gyroRaw[1] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[1];
 800147a:	7e7b      	ldrb	r3, [r7, #25]
 800147c:	021a      	lsls	r2, r3, #8
 800147e:	7e3b      	ldrb	r3, [r7, #24]
 8001480:	4619      	mov	r1, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	440b      	add	r3, r1
 8001486:	4313      	orrs	r3, r2
 8001488:	613b      	str	r3, [r7, #16]

    	IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 800148a:	f107 0318 	add.w	r3, r7, #24
 800148e:	461a      	mov	r2, r3
 8001490:	2138      	movs	r1, #56	; 0x38
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ff94 	bl	80013c0 <IMU_ReadOneByte>
    	ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 8001498:	f107 0318 	add.w	r3, r7, #24
 800149c:	3301      	adds	r3, #1
 800149e:	461a      	mov	r2, r3
 80014a0:	2137      	movs	r1, #55	; 0x37
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff8c 	bl	80013c0 <IMU_ReadOneByte>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b15      	ldr	r3, [pc, #84]	; (8001504 <Gyro_calibrate+0xfc>)
 80014ae:	701a      	strb	r2, [r3, #0]
    	gyroRaw[2] = (u8Buf[1]<<8)|u8Buf[0] + gyroRaw[2];
 80014b0:	7e7b      	ldrb	r3, [r7, #25]
 80014b2:	021a      	lsls	r2, r3, #8
 80014b4:	7e3b      	ldrb	r3, [r7, #24]
 80014b6:	4619      	mov	r1, r3
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	440b      	add	r3, r1
 80014bc:	4313      	orrs	r3, r2
 80014be:	617b      	str	r3, [r7, #20]

    	HAL_Delay(100); // wait for 100msec
 80014c0:	2064      	movs	r0, #100	; 0x64
 80014c2:	f001 fe1f 	bl	8003104 <HAL_Delay>
    for (i=0; i< 32; i++){
 80014c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014ca:	b2db      	uxtb	r3, r3
 80014cc:	3301      	adds	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	77fb      	strb	r3, [r7, #31]
 80014d2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80014d6:	2b1f      	cmp	r3, #31
 80014d8:	dda5      	ble.n	8001426 <Gyro_calibrate+0x1e>
    }

    gyro_offset[0] = gyroRaw[0]>>5;  // average of 32 reads
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	115b      	asrs	r3, r3, #5
 80014de:	b21a      	sxth	r2, r3
 80014e0:	4b09      	ldr	r3, [pc, #36]	; (8001508 <Gyro_calibrate+0x100>)
 80014e2:	801a      	strh	r2, [r3, #0]
    gyro_offset[1] = gyroRaw[1]>>5;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	115b      	asrs	r3, r3, #5
 80014e8:	b21a      	sxth	r2, r3
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <Gyro_calibrate+0x100>)
 80014ec:	805a      	strh	r2, [r3, #2]
    gyro_offset[2] = gyroRaw[2]>>5;
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	115b      	asrs	r3, r3, #5
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <Gyro_calibrate+0x100>)
 80014f6:	809a      	strh	r2, [r3, #4]

	return ret;
 80014f8:	4b02      	ldr	r3, [pc, #8]	; (8001504 <Gyro_calibrate+0xfc>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3720      	adds	r7, #32
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	20000200 	.word	0x20000200
 8001508:	20000204 	.word	0x20000204

0800150c <IMU_GyroRead>:


HAL_StatusTypeDef IMU_GyroRead(ICM20948 *dev)
{   // return the change in value instead of current value
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
    uint8_t u8Buf[2] = {0}; // reset to zero
 8001514:	2300      	movs	r3, #0
 8001516:	84bb      	strh	r3, [r7, #36]	; 0x24
    int16_t gyroRaw[3] = {0};  // reset to zero
 8001518:	f107 031c 	add.w	r3, r7, #28
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	809a      	strh	r2, [r3, #4]
    int16_t gyroDiff[3];
    int16_t temp;
    static int16_t gyroOld[3]= {0, 0, 0};  // previous value

    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_L, &u8Buf[0]);
 8001522:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001526:	461a      	mov	r2, r3
 8001528:	2136      	movs	r1, #54	; 0x36
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f7ff ff48 	bl	80013c0 <IMU_ReadOneByte>
 8001530:	4603      	mov	r3, r0
 8001532:	461a      	mov	r2, r3
 8001534:	4b6b      	ldr	r3, [pc, #428]	; (80016e4 <IMU_GyroRead+0x1d8>)
 8001536:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_YOUT_H, &u8Buf[1]);
 8001538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153c:	3301      	adds	r3, #1
 800153e:	461a      	mov	r2, r3
 8001540:	2135      	movs	r1, #53	; 0x35
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ff3c 	bl	80013c0 <IMU_ReadOneByte>
 8001548:	4603      	mov	r3, r0
 800154a:	461a      	mov	r2, r3
 800154c:	4b65      	ldr	r3, [pc, #404]	; (80016e4 <IMU_GyroRead+0x1d8>)
 800154e:	701a      	strb	r2, [r3, #0]
    gyroRaw[1] = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[1];
 8001550:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001554:	021b      	lsls	r3, r3, #8
 8001556:	b21a      	sxth	r2, r3
 8001558:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800155c:	b299      	uxth	r1, r3
 800155e:	4b62      	ldr	r3, [pc, #392]	; (80016e8 <IMU_GyroRead+0x1dc>)
 8001560:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001564:	b29b      	uxth	r3, r3
 8001566:	1acb      	subs	r3, r1, r3
 8001568:	b29b      	uxth	r3, r3
 800156a:	b21b      	sxth	r3, r3
 800156c:	4313      	orrs	r3, r2
 800156e:	b21b      	sxth	r3, r3
 8001570:	83fb      	strh	r3, [r7, #30]
    gyroDiff[1] = gyroRaw[1] - gyroOld[1];  // change in value
 8001572:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001576:	b29a      	uxth	r2, r3
 8001578:	4b5c      	ldr	r3, [pc, #368]	; (80016ec <IMU_GyroRead+0x1e0>)
 800157a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800157e:	b29b      	uxth	r3, r3
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	b29b      	uxth	r3, r3
 8001584:	b21b      	sxth	r3, r3
 8001586:	82fb      	strh	r3, [r7, #22]
    gyroOld[1] = gyroRaw[1];
 8001588:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 800158c:	4b57      	ldr	r3, [pc, #348]	; (80016ec <IMU_GyroRead+0x1e0>)
 800158e:	805a      	strh	r2, [r3, #2]

    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_L, &u8Buf[0]);
 8001590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001594:	461a      	mov	r2, r3
 8001596:	2138      	movs	r1, #56	; 0x38
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f7ff ff11 	bl	80013c0 <IMU_ReadOneByte>
 800159e:	4603      	mov	r3, r0
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b50      	ldr	r3, [pc, #320]	; (80016e4 <IMU_GyroRead+0x1d8>)
 80015a4:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_ZOUT_H, &u8Buf[1]);
 80015a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015aa:	3301      	adds	r3, #1
 80015ac:	461a      	mov	r2, r3
 80015ae:	2137      	movs	r1, #55	; 0x37
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff05 	bl	80013c0 <IMU_ReadOneByte>
 80015b6:	4603      	mov	r3, r0
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <IMU_GyroRead+0x1d8>)
 80015bc:	701a      	strb	r2, [r3, #0]
    gyroRaw[2] = (u8Buf[1]<<8)|u8Buf[0] -  gyro_offset[2];
 80015be:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80015c2:	021b      	lsls	r3, r3, #8
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80015ca:	b299      	uxth	r1, r3
 80015cc:	4b46      	ldr	r3, [pc, #280]	; (80016e8 <IMU_GyroRead+0x1dc>)
 80015ce:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	1acb      	subs	r3, r1, r3
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	b21b      	sxth	r3, r3
 80015da:	4313      	orrs	r3, r2
 80015dc:	b21b      	sxth	r3, r3
 80015de:	843b      	strh	r3, [r7, #32]
    gyroDiff[2] = gyroRaw[2] - gyroOld[2];  // change in value
 80015e0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015e4:	b29a      	uxth	r2, r3
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <IMU_GyroRead+0x1e0>)
 80015e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	b21b      	sxth	r3, r3
 80015f4:	833b      	strh	r3, [r7, #24]
    gyroOld[2] = gyroRaw[2];
 80015f6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80015fa:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <IMU_GyroRead+0x1e0>)
 80015fc:	809a      	strh	r2, [r3, #4]

    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_L, &u8Buf[0]);
 80015fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001602:	461a      	mov	r2, r3
 8001604:	2134      	movs	r1, #52	; 0x34
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff feda 	bl	80013c0 <IMU_ReadOneByte>
 800160c:	4603      	mov	r3, r0
 800160e:	461a      	mov	r2, r3
 8001610:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <IMU_GyroRead+0x1d8>)
 8001612:	701a      	strb	r2, [r3, #0]
    ret=IMU_ReadOneByte(dev, REG_ADD_GYRO_XOUT_H, &u8Buf[1]);
 8001614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	461a      	mov	r2, r3
 800161c:	2133      	movs	r1, #51	; 0x33
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fece 	bl	80013c0 <IMU_ReadOneByte>
 8001624:	4603      	mov	r3, r0
 8001626:	461a      	mov	r2, r3
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <IMU_GyroRead+0x1d8>)
 800162a:	701a      	strb	r2, [r3, #0]
    temp = (u8Buf[1]<<8)|u8Buf[0]; // for debugging
 800162c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001630:	021b      	lsls	r3, r3, #8
 8001632:	b21a      	sxth	r2, r3
 8001634:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	84fb      	strh	r3, [r7, #38]	; 0x26
    gyroRaw[0] = (u8Buf[1]<<8)|u8Buf[0] - gyro_offset[0];
 800163e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001642:	021b      	lsls	r3, r3, #8
 8001644:	b21a      	sxth	r2, r3
 8001646:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800164a:	b299      	uxth	r1, r3
 800164c:	4b26      	ldr	r3, [pc, #152]	; (80016e8 <IMU_GyroRead+0x1dc>)
 800164e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001652:	b29b      	uxth	r3, r3
 8001654:	1acb      	subs	r3, r1, r3
 8001656:	b29b      	uxth	r3, r3
 8001658:	b21b      	sxth	r3, r3
 800165a:	4313      	orrs	r3, r2
 800165c:	b21b      	sxth	r3, r3
 800165e:	83bb      	strh	r3, [r7, #28]
    gyroDiff[0] = gyroRaw[0] - gyroOld[0];  // change in value
 8001660:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b21      	ldr	r3, [pc, #132]	; (80016ec <IMU_GyroRead+0x1e0>)
 8001668:	f9b3 3000 	ldrsh.w	r3, [r3]
 800166c:	b29b      	uxth	r3, r3
 800166e:	1ad3      	subs	r3, r2, r3
 8001670:	b29b      	uxth	r3, r3
 8001672:	b21b      	sxth	r3, r3
 8001674:	82bb      	strh	r3, [r7, #20]
    gyroOld[0] = gyroRaw[0];
 8001676:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800167a:	4b1c      	ldr	r3, [pc, #112]	; (80016ec <IMU_GyroRead+0x1e0>)
 800167c:	801a      	strh	r2, [r3, #0]


	//if ( (gyroDiff[0] & 0x00008000) == 0x00008000 )  //32 bit - no need to check
	//	gyroRawSigned[0] = gyroRaw[0] | 0xFFFF0000;
	//else
		gyroRawSigned[0] = gyroRaw[0];
 800167e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001682:	60bb      	str	r3, [r7, #8]

	//if ( (gyroDiff[1] & 0x00008000) == 0x00008000 )
	//	gyroRawSigned[1] = gyroRaw[1] | 0xFFFF0000;
	//else
		gyroRawSigned[1] = gyroRaw[1];
 8001684:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001688:	60fb      	str	r3, [r7, #12]

	//if ( (gyroDiff[2] & 0x00008000) == 0x800008000 )
	//	gyroRawSigned[2] = gyroRaw[2] | 0xFFFF0000;
	//else
		gyroRawSigned[2] = gyroRaw[2];
 800168a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800168e:	613b      	str	r3, [r7, #16]


	// gyro full scale set to +/-500 dps, sensitivity scale factor = 65.5 LSB/dps
	// degree per second = value/65.5
	dev->gyro[0] = 0.0152671755725191f * gyroRawSigned[0];
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169a:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80016f0 <IMU_GyroRead+0x1e4>
 800169e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	edc3 7a05 	vstr	s15, [r3, #20]
	dev->gyro[1] = 0.0152671755725191f * gyroRawSigned[1];
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	ee07 3a90 	vmov	s15, r3
 80016ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80016f0 <IMU_GyroRead+0x1e4>
 80016b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	edc3 7a06 	vstr	s15, [r3, #24]
	dev->gyro[2] = 0.0152671755725191f * gyroRawSigned[2];
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ca:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016f0 <IMU_GyroRead+0x1e4>
 80016ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	edc3 7a07 	vstr	s15, [r3, #28]
//	dev->gyro[0] = gyroDiff[0]/65.5;
//	dev->gyro[1] = gyroDiff[1]/65.5;
//	dev->gyro[2] = gyroDiff[2]/65.5;

	return ret;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <IMU_GyroRead+0x1d8>)
 80016da:	781b      	ldrb	r3, [r3, #0]

}
 80016dc:	4618      	mov	r0, r3
 80016de:	3728      	adds	r7, #40	; 0x28
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	20000200 	.word	0x20000200
 80016e8:	20000204 	.word	0x20000204
 80016ec:	2000020c 	.word	0x2000020c
 80016f0:	3c7a232d 	.word	0x3c7a232d

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016f8:	f001 fc92 	bl	8003020 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fc:	f000 f840 	bl	8001780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001700:	f000 fae4 	bl	8001ccc <MX_GPIO_Init>
  MX_TIM8_Init();
 8001704:	f000 fa0e 	bl	8001b24 <MX_TIM8_Init>
  MX_TIM3_Init();
 8001708:	f000 f9b8 	bl	8001a7c <MX_TIM3_Init>
  MX_TIM1_Init();
 800170c:	f000 f8c4 	bl	8001898 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 8001710:	f000 fab2 	bl	8001c78 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001714:	f000 f892 	bl	800183c <MX_I2C1_Init>
  MX_TIM2_Init();
 8001718:	f000 f95c 	bl	80019d4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  OLED_Init();
 800171c:	f00a f93e 	bl	800b99c <OLED_Init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001720:	f007 f952 	bl	80089c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001724:	4a0d      	ldr	r2, [pc, #52]	; (800175c <main+0x68>)
 8001726:	2100      	movs	r1, #0
 8001728:	480d      	ldr	r0, [pc, #52]	; (8001760 <main+0x6c>)
 800172a:	f007 f997 	bl	8008a5c <osThreadNew>
 800172e:	4603      	mov	r3, r0
 8001730:	4a0c      	ldr	r2, [pc, #48]	; (8001764 <main+0x70>)
 8001732:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
//  OLEDTaskHandle = osThreadNew(oled_show, NULL, &OLEDTask_attributes);

  /* creation of GyroRead */
  GyroReadHandle = osThreadNew(gyro_read, NULL, &GyroRead_attributes);
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <main+0x74>)
 8001736:	2100      	movs	r1, #0
 8001738:	480c      	ldr	r0, [pc, #48]	; (800176c <main+0x78>)
 800173a:	f007 f98f 	bl	8008a5c <osThreadNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <main+0x7c>)
 8001742:	6013      	str	r3, [r2, #0]

  /* creation of ServoMotor */
  ServoMotorHandle = osThreadNew(servoMotor, NULL, &ServoMotor_attributes);
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <main+0x80>)
 8001746:	2100      	movs	r1, #0
 8001748:	480b      	ldr	r0, [pc, #44]	; (8001778 <main+0x84>)
 800174a:	f007 f987 	bl	8008a5c <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a0a      	ldr	r2, [pc, #40]	; (800177c <main+0x88>)
 8001752:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001754:	f007 f95c 	bl	8008a10 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001758:	e7fe      	b.n	8001758 <main+0x64>
 800175a:	bf00      	nop
 800175c:	080105c8 	.word	0x080105c8
 8001760:	080025fd 	.word	0x080025fd
 8001764:	200003cc 	.word	0x200003cc
 8001768:	080105ec 	.word	0x080105ec
 800176c:	080027dd 	.word	0x080027dd
 8001770:	200003d0 	.word	0x200003d0
 8001774:	08010610 	.word	0x08010610
 8001778:	0800284d 	.word	0x0800284d
 800177c:	200003d4 	.word	0x200003d4

08001780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b094      	sub	sp, #80	; 0x50
 8001784:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	2230      	movs	r2, #48	; 0x30
 800178c:	2100      	movs	r1, #0
 800178e:	4618      	mov	r0, r3
 8001790:	f00a f9c8 	bl	800bb24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001794:	f107 030c 	add.w	r3, r7, #12
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	605a      	str	r2, [r3, #4]
 800179e:	609a      	str	r2, [r3, #8]
 80017a0:	60da      	str	r2, [r3, #12]
 80017a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017a4:	2300      	movs	r3, #0
 80017a6:	60bb      	str	r3, [r7, #8]
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <SystemClock_Config+0xb4>)
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	4a21      	ldr	r2, [pc, #132]	; (8001834 <SystemClock_Config+0xb4>)
 80017ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b2:	6413      	str	r3, [r2, #64]	; 0x40
 80017b4:	4b1f      	ldr	r3, [pc, #124]	; (8001834 <SystemClock_Config+0xb4>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c0:	2300      	movs	r3, #0
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	4b1c      	ldr	r3, [pc, #112]	; (8001838 <SystemClock_Config+0xb8>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a1b      	ldr	r2, [pc, #108]	; (8001838 <SystemClock_Config+0xb8>)
 80017ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <SystemClock_Config+0xb8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e0:	2301      	movs	r3, #1
 80017e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017e4:	2310      	movs	r3, #16
 80017e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ec:	f107 0320 	add.w	r3, r7, #32
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fbd9 	bl	8005fa8 <HAL_RCC_OscConfig>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80017fc:	f001 f8d2 	bl	80029a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001800:	230f      	movs	r3, #15
 8001802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001804:	2300      	movs	r3, #0
 8001806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800180c:	2300      	movs	r3, #0
 800180e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001814:	f107 030c 	add.w	r3, r7, #12
 8001818:	2100      	movs	r1, #0
 800181a:	4618      	mov	r0, r3
 800181c:	f004 fe3c 	bl	8006498 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001826:	f001 f8bd 	bl	80029a4 <Error_Handler>
  }
}
 800182a:	bf00      	nop
 800182c:	3750      	adds	r7, #80	; 0x50
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000

0800183c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001840:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_I2C1_Init+0x50>)
 8001842:	4a13      	ldr	r2, [pc, #76]	; (8001890 <MX_I2C1_Init+0x54>)
 8001844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <MX_I2C1_Init+0x50>)
 8001848:	4a12      	ldr	r2, [pc, #72]	; (8001894 <MX_I2C1_Init+0x58>)
 800184a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800184c:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_I2C1_Init+0x50>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001852:	4b0e      	ldr	r3, [pc, #56]	; (800188c <MX_I2C1_Init+0x50>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001858:	4b0c      	ldr	r3, [pc, #48]	; (800188c <MX_I2C1_Init+0x50>)
 800185a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800185e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001860:	4b0a      	ldr	r3, [pc, #40]	; (800188c <MX_I2C1_Init+0x50>)
 8001862:	2200      	movs	r2, #0
 8001864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <MX_I2C1_Init+0x50>)
 8001868:	2200      	movs	r2, #0
 800186a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800186c:	4b07      	ldr	r3, [pc, #28]	; (800188c <MX_I2C1_Init+0x50>)
 800186e:	2200      	movs	r2, #0
 8001870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <MX_I2C1_Init+0x50>)
 8001874:	2200      	movs	r2, #0
 8001876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001878:	4804      	ldr	r0, [pc, #16]	; (800188c <MX_I2C1_Init+0x50>)
 800187a:	f001 ffe9 	bl	8003850 <HAL_I2C_Init>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001884:	f001 f88e 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}
 800188c:	20000214 	.word	0x20000214
 8001890:	40005400 	.word	0x40005400
 8001894:	00061a80 	.word	0x00061a80

08001898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b096      	sub	sp, #88	; 0x58
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800189e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]
 80018a6:	605a      	str	r2, [r3, #4]
 80018a8:	609a      	str	r2, [r3, #8]
 80018aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018ba:	2200      	movs	r2, #0
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	605a      	str	r2, [r3, #4]
 80018c0:	609a      	str	r2, [r3, #8]
 80018c2:	60da      	str	r2, [r3, #12]
 80018c4:	611a      	str	r2, [r3, #16]
 80018c6:	615a      	str	r2, [r3, #20]
 80018c8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2220      	movs	r2, #32
 80018ce:	2100      	movs	r1, #0
 80018d0:	4618      	mov	r0, r3
 80018d2:	f00a f927 	bl	800bb24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018d6:	4b3d      	ldr	r3, [pc, #244]	; (80019cc <MX_TIM1_Init+0x134>)
 80018d8:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <MX_TIM1_Init+0x138>)
 80018da:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80018dc:	4b3b      	ldr	r3, [pc, #236]	; (80019cc <MX_TIM1_Init+0x134>)
 80018de:	22a0      	movs	r2, #160	; 0xa0
 80018e0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e2:	4b3a      	ldr	r3, [pc, #232]	; (80019cc <MX_TIM1_Init+0x134>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80018e8:	4b38      	ldr	r3, [pc, #224]	; (80019cc <MX_TIM1_Init+0x134>)
 80018ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018ee:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f0:	4b36      	ldr	r3, [pc, #216]	; (80019cc <MX_TIM1_Init+0x134>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018f6:	4b35      	ldr	r3, [pc, #212]	; (80019cc <MX_TIM1_Init+0x134>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018fc:	4b33      	ldr	r3, [pc, #204]	; (80019cc <MX_TIM1_Init+0x134>)
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001902:	4832      	ldr	r0, [pc, #200]	; (80019cc <MX_TIM1_Init+0x134>)
 8001904:	f004 ffa8 	bl	8006858 <HAL_TIM_Base_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800190e:	f001 f849 	bl	80029a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001912:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001918:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800191c:	4619      	mov	r1, r3
 800191e:	482b      	ldr	r0, [pc, #172]	; (80019cc <MX_TIM1_Init+0x134>)
 8001920:	f005 fb00 	bl	8006f24 <HAL_TIM_ConfigClockSource>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800192a:	f001 f83b 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800192e:	4827      	ldr	r0, [pc, #156]	; (80019cc <MX_TIM1_Init+0x134>)
 8001930:	f004 ffe1 	bl	80068f6 <HAL_TIM_PWM_Init>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800193a:	f001 f833 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193e:	2300      	movs	r3, #0
 8001940:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001942:	2300      	movs	r3, #0
 8001944:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001946:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800194a:	4619      	mov	r1, r3
 800194c:	481f      	ldr	r0, [pc, #124]	; (80019cc <MX_TIM1_Init+0x134>)
 800194e:	f005 fec1 	bl	80076d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001958:	f001 f824 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195c:	2360      	movs	r3, #96	; 0x60
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001964:	2300      	movs	r3, #0
 8001966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800196c:	2300      	movs	r3, #0
 800196e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001974:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001978:	220c      	movs	r2, #12
 800197a:	4619      	mov	r1, r3
 800197c:	4813      	ldr	r0, [pc, #76]	; (80019cc <MX_TIM1_Init+0x134>)
 800197e:	f005 fa0f 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001988:	f001 f80c 	bl	80029a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019aa:	1d3b      	adds	r3, r7, #4
 80019ac:	4619      	mov	r1, r3
 80019ae:	4807      	ldr	r0, [pc, #28]	; (80019cc <MX_TIM1_Init+0x134>)
 80019b0:	f005 ff0c 	bl	80077cc <HAL_TIMEx_ConfigBreakDeadTime>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80019ba:	f000 fff3 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80019be:	4803      	ldr	r0, [pc, #12]	; (80019cc <MX_TIM1_Init+0x134>)
 80019c0:	f001 f96a 	bl	8002c98 <HAL_TIM_MspPostInit>

}
 80019c4:	bf00      	nop
 80019c6:	3758      	adds	r7, #88	; 0x58
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20000268 	.word	0x20000268
 80019d0:	40010000 	.word	0x40010000

080019d4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b08c      	sub	sp, #48	; 0x30
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019da:	f107 030c 	add.w	r3, r7, #12
 80019de:	2224      	movs	r2, #36	; 0x24
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f00a f89e 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019f0:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_TIM2_Init+0xa4>)
 80019f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_TIM2_Init+0xa4>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM2_Init+0xa4>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001a04:	4b1c      	ldr	r3, [pc, #112]	; (8001a78 <MX_TIM2_Init+0xa4>)
 8001a06:	f04f 32ff 	mov.w	r2, #4294967295
 8001a0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	; (8001a78 <MX_TIM2_Init+0xa4>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a12:	4b19      	ldr	r3, [pc, #100]	; (8001a78 <MX_TIM2_Init+0xa4>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a20:	2301      	movs	r3, #1
 8001a22:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a24:	2300      	movs	r3, #0
 8001a26:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a30:	2301      	movs	r3, #1
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a34:	2300      	movs	r3, #0
 8001a36:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001a3c:	f107 030c 	add.w	r3, r7, #12
 8001a40:	4619      	mov	r1, r3
 8001a42:	480d      	ldr	r0, [pc, #52]	; (8001a78 <MX_TIM2_Init+0xa4>)
 8001a44:	f005 f878 	bl	8006b38 <HAL_TIM_Encoder_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001a4e:	f000 ffa9 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a52:	2300      	movs	r3, #0
 8001a54:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	4619      	mov	r1, r3
 8001a5e:	4806      	ldr	r0, [pc, #24]	; (8001a78 <MX_TIM2_Init+0xa4>)
 8001a60:	f005 fe38 	bl	80076d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001a6a:	f000 ff9b 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	3730      	adds	r7, #48	; 0x30
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	200002b0 	.word	0x200002b0

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08c      	sub	sp, #48	; 0x30
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001a82:	f107 030c 	add.w	r3, r7, #12
 8001a86:	2224      	movs	r2, #36	; 0x24
 8001a88:	2100      	movs	r1, #0
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f00a f84a 	bl	800bb24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	1d3b      	adds	r3, r7, #4
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
 8001a96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a98:	4b20      	ldr	r3, [pc, #128]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001a9a:	4a21      	ldr	r2, [pc, #132]	; (8001b20 <MX_TIM3_Init+0xa4>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a9e:	4b1f      	ldr	r3, [pc, #124]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b1d      	ldr	r3, [pc, #116]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001aaa:	4b1c      	ldr	r3, [pc, #112]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ab2:	4b1a      	ldr	r3, [pc, #104]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab8:	4b18      	ldr	r3, [pc, #96]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001aca:	2300      	movs	r3, #0
 8001acc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 8001ace:	230a      	movs	r3, #10
 8001ad0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001ada:	2300      	movs	r3, #0
 8001adc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 8001ade:	230a      	movs	r3, #10
 8001ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001ae2:	f107 030c 	add.w	r3, r7, #12
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001aea:	f005 f825 	bl	8006b38 <HAL_TIM_Encoder_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001af4:	f000 ff56 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b00:	1d3b      	adds	r3, r7, #4
 8001b02:	4619      	mov	r1, r3
 8001b04:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_TIM3_Init+0xa0>)
 8001b06:	f005 fde5 	bl	80076d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001b10:	f000 ff48 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001b14:	bf00      	nop
 8001b16:	3730      	adds	r7, #48	; 0x30
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	200002f8 	.word	0x200002f8
 8001b20:	40000400 	.word	0x40000400

08001b24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b096      	sub	sp, #88	; 0x58
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
 8001b32:	605a      	str	r2, [r3, #4]
 8001b34:	609a      	str	r2, [r3, #8]
 8001b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	605a      	str	r2, [r3, #4]
 8001b4c:	609a      	str	r2, [r3, #8]
 8001b4e:	60da      	str	r2, [r3, #12]
 8001b50:	611a      	str	r2, [r3, #16]
 8001b52:	615a      	str	r2, [r3, #20]
 8001b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	2220      	movs	r2, #32
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f009 ffe1 	bl	800bb24 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001b62:	4b43      	ldr	r3, [pc, #268]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b64:	4a43      	ldr	r2, [pc, #268]	; (8001c74 <MX_TIM8_Init+0x150>)
 8001b66:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001b68:	4b41      	ldr	r3, [pc, #260]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b6e:	4b40      	ldr	r3, [pc, #256]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001b74:	4b3e      	ldr	r3, [pc, #248]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b76:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b3c      	ldr	r3, [pc, #240]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001b82:	4b3b      	ldr	r3, [pc, #236]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b39      	ldr	r3, [pc, #228]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001b8e:	4838      	ldr	r0, [pc, #224]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001b90:	f004 fe62 	bl	8006858 <HAL_TIM_Base_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001b9a:	f000 ff03 	bl	80029a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ba8:	4619      	mov	r1, r3
 8001baa:	4831      	ldr	r0, [pc, #196]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001bac:	f005 f9ba 	bl	8006f24 <HAL_TIM_ConfigClockSource>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001bb6:	f000 fef5 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001bba:	482d      	ldr	r0, [pc, #180]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001bbc:	f004 fe9b 	bl	80068f6 <HAL_TIM_PWM_Init>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001bc6:	f000 feed 	bl	80029a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	4825      	ldr	r0, [pc, #148]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001bda:	f005 fd7b 	bl	80076d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001be4:	f000 fede 	bl	80029a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001be8:	2360      	movs	r3, #96	; 0x60
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001bec:	2300      	movs	r3, #0
 8001bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c08:	2200      	movs	r2, #0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4818      	ldr	r0, [pc, #96]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001c0e:	f005 f8c7 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001c18:	f000 fec4 	bl	80029a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c20:	2204      	movs	r2, #4
 8001c22:	4619      	mov	r1, r3
 8001c24:	4812      	ldr	r0, [pc, #72]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001c26:	f005 f8bb 	bl	8006da0 <HAL_TIM_PWM_ConfigChannel>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d001      	beq.n	8001c34 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001c30:	f000 feb8 	bl	80029a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c4c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM8_Init+0x14c>)
 8001c58:	f005 fdb8 	bl	80077cc <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001c62:	f000 fe9f 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3758      	adds	r7, #88	; 0x58
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000340 	.word	0x20000340
 8001c74:	40010400 	.word	0x40010400

08001c78 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	; (8001cc8 <MX_USART3_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001c84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c88:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	; (8001cc4 <MX_USART3_UART_Init+0x4c>)
 8001cb0:	f005 fdde 	bl	8007870 <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 fe73 	bl	80029a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000388 	.word	0x20000388
 8001cc8:	40004800 	.word	0x40004800

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	; 0x28
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b31      	ldr	r3, [pc, #196]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a30      	ldr	r2, [pc, #192]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001cec:	f043 0310 	orr.w	r3, r3, #16
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b2e      	ldr	r3, [pc, #184]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0310 	and.w	r3, r3, #16
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b2a      	ldr	r3, [pc, #168]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a29      	ldr	r2, [pc, #164]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0301 	and.w	r3, r3, #1
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b23      	ldr	r3, [pc, #140]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d22:	4a22      	ldr	r2, [pc, #136]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d24:	f043 0304 	orr.w	r3, r3, #4
 8001d28:	6313      	str	r3, [r2, #48]	; 0x30
 8001d2a:	4b20      	ldr	r3, [pc, #128]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2e:	f003 0304 	and.w	r3, r3, #4
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b1c      	ldr	r3, [pc, #112]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	4a1b      	ldr	r2, [pc, #108]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	; 0x30
 8001d46:	4b19      	ldr	r3, [pc, #100]	; (8001dac <MX_GPIO_Init+0xe0>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001d52:	2200      	movs	r2, #0
 8001d54:	f44f 61bc 	mov.w	r1, #1504	; 0x5e0
 8001d58:	4815      	ldr	r0, [pc, #84]	; (8001db0 <MX_GPIO_Init+0xe4>)
 8001d5a:	f001 fd45 	bl	80037e8 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	213c      	movs	r1, #60	; 0x3c
 8001d62:	4814      	ldr	r0, [pc, #80]	; (8001db4 <MX_GPIO_Init+0xe8>)
 8001d64:	f001 fd40 	bl	80037e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001d68:	f44f 63bc 	mov.w	r3, #1504	; 0x5e0
 8001d6c:	617b      	str	r3, [r7, #20]
                          |LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480b      	ldr	r0, [pc, #44]	; (8001db0 <MX_GPIO_Init+0xe4>)
 8001d82:	f001 fb95 	bl	80034b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001d86:	233c      	movs	r3, #60	; 0x3c
 8001d88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d92:	2302      	movs	r3, #2
 8001d94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <MX_GPIO_Init+0xe8>)
 8001d9e:	f001 fb87 	bl	80034b0 <HAL_GPIO_Init>

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023800 	.word	0x40023800
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40020000 	.word	0x40020000

08001db8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// For own reference, this function seems to be called after
// interrupt from the HAL_UART_Receive_IT function
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	//Prevent unused argument(s) compilation warning
	UNUSED(huart);
	static i = 0; //static means it doesn't get erase after every loop

	if (aRxBuffer[0] == 'n'){
 8001dc0:	4b1c      	ldr	r3, [pc, #112]	; (8001e34 <HAL_UART_RxCpltCallback+0x7c>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b6e      	cmp	r3, #110	; 0x6e
 8001dc6:	d106      	bne.n	8001dd6 <HAL_UART_RxCpltCallback+0x1e>
		i = 0;
 8001dc8:	4b1b      	ldr	r3, [pc, #108]	; (8001e38 <HAL_UART_RxCpltCallback+0x80>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	601a      	str	r2, [r3, #0]
		newCmdReceived = 1;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_UART_RxCpltCallback+0x84>)
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e01e      	b.n	8001e14 <HAL_UART_RxCpltCallback+0x5c>
	}
	else if (i==0)
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_UART_RxCpltCallback+0x80>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_UART_RxCpltCallback+0x3a>
	{
		cmd = aRxBuffer[0];
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <HAL_UART_RxCpltCallback+0x7c>)
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	4b17      	ldr	r3, [pc, #92]	; (8001e40 <HAL_UART_RxCpltCallback+0x88>)
 8001de4:	701a      	strb	r2, [r3, #0]
		i++;
 8001de6:	4b14      	ldr	r3, [pc, #80]	; (8001e38 <HAL_UART_RxCpltCallback+0x80>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	3301      	adds	r3, #1
 8001dec:	4a12      	ldr	r2, [pc, #72]	; (8001e38 <HAL_UART_RxCpltCallback+0x80>)
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	e010      	b.n	8001e14 <HAL_UART_RxCpltCallback+0x5c>
	}
	else if (i > 0)
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_UART_RxCpltCallback+0x80>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	dd0c      	ble.n	8001e14 <HAL_UART_RxCpltCallback+0x5c>
	{
		data = data*10 + (aRxBuffer[0] - '0');
 8001dfa:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <HAL_UART_RxCpltCallback+0x8c>)
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	461a      	mov	r2, r3
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_UART_RxCpltCallback+0x7c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	3b30      	subs	r3, #48	; 0x30
 8001e10:	4a0c      	ldr	r2, [pc, #48]	; (8001e44 <HAL_UART_RxCpltCallback+0x8c>)
 8001e12:	6013      	str	r3, [r2, #0]
	}

//	uint8_t message[20];
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 1);
 8001e14:	2201      	movs	r2, #1
 8001e16:	4907      	ldr	r1, [pc, #28]	; (8001e34 <HAL_UART_RxCpltCallback+0x7c>)
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <HAL_UART_RxCpltCallback+0x90>)
 8001e1a:	f005 fe08 	bl	8007a2e <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart3, (uint8_t *) aRxBuffer, 1, 0xFFFF);
 8001e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e22:	2201      	movs	r2, #1
 8001e24:	4903      	ldr	r1, [pc, #12]	; (8001e34 <HAL_UART_RxCpltCallback+0x7c>)
 8001e26:	4808      	ldr	r0, [pc, #32]	; (8001e48 <HAL_UART_RxCpltCallback+0x90>)
 8001e28:	f005 fd6f 	bl	800790a <HAL_UART_Transmit>
//	sprintf(message, "%c %d %c %d\0", aRxBuffer[0], newCmdReceived, cmd, data);
//	OLED_ShowString(10, 40, message);
//	OLED_Refresh_Gram(); //Refresh Ram
}
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000404 	.word	0x20000404
 8001e38:	2000040c 	.word	0x2000040c
 8001e3c:	20000405 	.word	0x20000405
 8001e40:	20000406 	.word	0x20000406
 8001e44:	20000408 	.word	0x20000408
 8001e48:	20000388 	.word	0x20000388

08001e4c <sendToRPI>:
  * @brief send msg to RPI through UART after execute command
  * @param msg[] for the message to be sent
  * @retval None
  */
void sendToRPI(char* msg)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3,(uint8_t *) msg,strlen(msg),0xFFFF);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7fe f9bb 	bl	80001d0 <strlen>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b29a      	uxth	r2, r3
 8001e5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <sendToRPI+0x28>)
 8001e66:	f005 fd50 	bl	800790a <HAL_UART_Transmit>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000388 	.word	0x20000388

08001e78 <move>:

void move(float distance, int forward)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b0b0      	sub	sp, #192	; 0xc0
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001e82:	6038      	str	r0, [r7, #0]
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001e84:	2100      	movs	r1, #0
 8001e86:	48cd      	ldr	r0, [pc, #820]	; (80021bc <move+0x344>)
 8001e88:	f004 fd8e 	bl	80069a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	48cb      	ldr	r0, [pc, #812]	; (80021bc <move+0x344>)
 8001e90:	f004 fd8a 	bl	80069a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8001e94:	210c      	movs	r1, #12
 8001e96:	48ca      	ldr	r0, [pc, #808]	; (80021c0 <move+0x348>)
 8001e98:	f004 fd86 	bl	80069a8 <HAL_TIM_PWM_Start>

	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8001e9c:	4bc8      	ldr	r3, [pc, #800]	; (80021c0 <move+0x348>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	2296      	movs	r2, #150	; 0x96
 8001ea2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(100);
 8001ea4:	2064      	movs	r0, #100	; 0x64
 8001ea6:	f006 fe6c 	bl	8008b82 <osDelay>

	// init PID controller (left)
	PIDController pidLeft = { PID_KP, PID_KI,
 8001eaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f009 fe36 	bl	800bb24 <memset>
 8001eb8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ebc:	657b      	str	r3, [r7, #84]	; 0x54
 8001ebe:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ec4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001ec8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eca:	4bbe      	ldr	r3, [pc, #760]	; (80021c4 <move+0x34c>)
 8001ecc:	667b      	str	r3, [r7, #100]	; 0x64
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };


	// init PID controller (right)
	PIDController pidRight = { PID_KP, PID_KI,
 8001ece:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ed2:	2224      	movs	r2, #36	; 0x24
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 fe24 	bl	800bb24 <memset>
 8001edc:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001ee0:	633b      	str	r3, [r7, #48]	; 0x30
 8001ee2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001ee6:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ee8:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8001eec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001eee:	4bb5      	ldr	r3, [pc, #724]	; (80021c4 <move+0x34c>)
 8001ef0:	643b      	str	r3, [r7, #64]	; 0x40
						  PID_LIM_MIN, PID_LIM_MAX,
						  SAMPLE_TIME_S };

	PIDController_Init(&pidLeft);
 8001ef2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f009 fab8 	bl	800b46c <PIDController_Init>
	PIDController_Init(&pidRight);
 8001efc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f00:	4618      	mov	r0, r3
 8001f02:	f009 fab3 	bl	800b46c <PIDController_Init>

	// wheel information
	float wheel_rotationTicksL = 1624; // for back left wheel, around 1550-1600
 8001f06:	4bb0      	ldr	r3, [pc, #704]	; (80021c8 <move+0x350>)
 8001f08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	float wheel_rotationTicksR = 1653; // for back right wheel
 8001f0c:	4baf      	ldr	r3, [pc, #700]	; (80021cc <move+0x354>)
 8001f0e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	float wheel_circumference = 23.2f; // NEED TO MEASURE AND CHANGE
 8001f12:	4baf      	ldr	r3, [pc, #700]	; (80021d0 <move+0x358>)
 8001f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	// start encoder
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8001f18:	213c      	movs	r1, #60	; 0x3c
 8001f1a:	48ae      	ldr	r0, [pc, #696]	; (80021d4 <move+0x35c>)
 8001f1c:	f004 feb2 	bl	8006c84 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //encoderB
 8001f20:	213c      	movs	r1, #60	; 0x3c
 8001f22:	48ad      	ldr	r0, [pc, #692]	; (80021d8 <move+0x360>)
 8001f24:	f004 feae 	bl	8006c84 <HAL_TIM_Encoder_Start>

	// wheel ticks
	int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8001f28:	4baa      	ldr	r3, [pc, #680]	; (80021d4 <move+0x35c>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim3);
 8001f32:	4ba9      	ldr	r3, [pc, #676]	; (80021d8 <move+0x360>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

	// cpu ticks
	uint32_t startTime = HAL_GetTick();
 8001f3c:	f001 f8d6 	bl	80030ec <HAL_GetTick>
 8001f40:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	uint32_t prevTime = startTime;
 8001f44:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	uint32_t currTime;

	// distance checkers for both wheels
	float totalDistance_left = 0;
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	float totalDistance_right = 0;
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float distRight;

	int leftTick;
	int rightTick;

	int diffLeft = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	int diffRight = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	float distanceError;

	//pwm values
	uint16_t pwmValA = 2000;
 8001f68:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f6c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	uint16_t pwmValB = 2000;
 8001f70:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001f74:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	// OLED variables for testing PID
	uint8_t messageA[20];
	uint8_t messageB[20];

	if(forward){
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d014      	beq.n	8001fa8 <move+0x130>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001f7e:	2201      	movs	r2, #1
 8001f80:	2108      	movs	r1, #8
 8001f82:	4896      	ldr	r0, [pc, #600]	; (80021dc <move+0x364>)
 8001f84:	f001 fc30 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	4893      	ldr	r0, [pc, #588]	; (80021dc <move+0x364>)
 8001f8e:	f001 fc2b 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001f92:	2201      	movs	r2, #1
 8001f94:	2110      	movs	r1, #16
 8001f96:	4891      	ldr	r0, [pc, #580]	; (80021dc <move+0x364>)
 8001f98:	f001 fc26 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	2120      	movs	r1, #32
 8001fa0:	488e      	ldr	r0, [pc, #568]	; (80021dc <move+0x364>)
 8001fa2:	f001 fc21 	bl	80037e8 <HAL_GPIO_WritePin>
 8001fa6:	e013      	b.n	8001fd0 <move+0x158>
	}else{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2108      	movs	r1, #8
 8001fac:	488b      	ldr	r0, [pc, #556]	; (80021dc <move+0x364>)
 8001fae:	f001 fc1b 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	2104      	movs	r1, #4
 8001fb6:	4889      	ldr	r0, [pc, #548]	; (80021dc <move+0x364>)
 8001fb8:	f001 fc16 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	2110      	movs	r1, #16
 8001fc0:	4886      	ldr	r0, [pc, #536]	; (80021dc <move+0x364>)
 8001fc2:	f001 fc11 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	2120      	movs	r1, #32
 8001fca:	4884      	ldr	r0, [pc, #528]	; (80021dc <move+0x364>)
 8001fcc:	f001 fc0c 	bl	80037e8 <HAL_GPIO_WritePin>

	/*Infinite loop*/
	for(;;)
	{

		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 8001fd0:	4b7a      	ldr	r3, [pc, #488]	; (80021bc <move+0x344>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8001fd8:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmValB);
 8001fda:	4b78      	ldr	r3, [pc, #480]	; (80021bc <move+0x344>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 8001fe2:	639a      	str	r2, [r3, #56]	; 0x38
		 currTime = HAL_GetTick();
 8001fe4:	f001 f882 	bl	80030ec <HAL_GetTick>
 8001fe8:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
		 moving = 1;
 8001fec:	4b7c      	ldr	r3, [pc, #496]	; (80021e0 <move+0x368>)
 8001fee:	2201      	movs	r2, #1
 8001ff0:	701a      	strb	r2, [r3, #0]

		 if (currTime-prevTime > 50L)
 8001ff2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8001ff6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	2b32      	cmp	r3, #50	; 0x32
 8001ffe:	d9e7      	bls.n	8001fd0 <move+0x158>
		 {
			 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002000:	4b74      	ldr	r3, [pc, #464]	; (80021d4 <move+0x35c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			 rightTick = __HAL_TIM_GET_COUNTER(&htim3);
 800200a:	4b73      	ldr	r3, [pc, #460]	; (80021d8 <move+0x360>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

			 diffLeft = 0;
 8002014:	2300      	movs	r3, #0
 8002016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 diffRight = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <move+0x35c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b10      	cmp	r3, #16
 800202c:	d118      	bne.n	8002060 <move+0x1e8>
			 {
				 if (leftTick < leftTick_prev)
 800202e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002032:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002036:	429a      	cmp	r2, r3
 8002038:	da07      	bge.n	800204a <move+0x1d2>
					 diffLeft = leftTick_prev - leftTick;
 800203a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800203e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002042:	1ad3      	subs	r3, r2, r3
 8002044:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002048:	e022      	b.n	8002090 <move+0x218>
				 else
					 diffLeft = (65535 - leftTick) + leftTick_prev;
 800204a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800204e:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002052:	33ff      	adds	r3, #255	; 0xff
 8002054:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002058:	4413      	add	r3, r2
 800205a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800205e:	e017      	b.n	8002090 <move+0x218>
			 }
			 else
			 {
				 if (leftTick > leftTick_prev)
 8002060:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002064:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002068:	429a      	cmp	r2, r3
 800206a:	dd07      	ble.n	800207c <move+0x204>
					 diffLeft = leftTick - leftTick_prev;
 800206c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8002070:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800207a:	e009      	b.n	8002090 <move+0x218>
				 else
					 diffLeft = 65535 - leftTick_prev + leftTick;
 800207c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002080:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002084:	33ff      	adds	r3, #255	; 0xff
 8002086:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800208a:	4413      	add	r3, r2
 800208c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
			 }

			 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8002090:	4b51      	ldr	r3, [pc, #324]	; (80021d8 <move+0x360>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0310 	and.w	r3, r3, #16
 800209a:	2b10      	cmp	r3, #16
 800209c:	d118      	bne.n	80020d0 <move+0x258>
			 {
				 if (rightTick < rightTick_prev)
 800209e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020a6:	429a      	cmp	r2, r3
 80020a8:	da07      	bge.n	80020ba <move+0x242>
					 diffRight = rightTick_prev - rightTick;
 80020aa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80020b8:	e022      	b.n	8002100 <move+0x288>
				 else
					 diffRight = (65535 - rightTick) + rightTick_prev;
 80020ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80020be:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80020c2:	33ff      	adds	r3, #255	; 0xff
 80020c4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80020c8:	4413      	add	r3, r2
 80020ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80020ce:	e017      	b.n	8002100 <move+0x288>
			 }
			 else
			 {
				 if (rightTick > rightTick_prev)
 80020d0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020d4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020d8:	429a      	cmp	r2, r3
 80020da:	dd07      	ble.n	80020ec <move+0x274>
					 diffRight = rightTick - rightTick_prev;
 80020dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020e4:	1ad3      	subs	r3, r2, r3
 80020e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80020ea:	e009      	b.n	8002100 <move+0x288>
				 else
					 diffRight = 65535 - rightTick_prev + rightTick;
 80020ec:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80020f0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80020f4:	33ff      	adds	r3, #255	; 0xff
 80020f6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80020fa:	4413      	add	r3, r2
 80020fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
			 }

			 // left measured distance
			 distLeft = ((float)diffLeft/wheel_rotationTicksL) * wheel_circumference;
 8002100:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002104:	ee07 3a90 	vmov	s15, r3
 8002108:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800210c:	ed97 7a27 	vldr	s14, [r7, #156]	; 0x9c
 8002110:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002114:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002118:	ee67 7a27 	vmul.f32	s15, s14, s15
 800211c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
			 totalDistance_left += distLeft;
 8002120:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002124:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0

			 // right measured distance
			 distRight = ((float)diffRight/wheel_rotationTicksR) * wheel_circumference;
 8002130:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800213c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002140:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002144:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214c:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
			 totalDistance_right += distRight;
 8002150:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002154:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac

			 // for straight ratio, higher means right dist decrease.
			 // 1.015 veer right, 1.005 veer left, 1.010 ABIT right, 1.008 almost perfect.


			 if (forward){
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d044      	beq.n	80021f0 <move+0x378>

				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right*STRAIGHTRATIOF, totalDistance_left, pwmValA);
 8002166:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800216a:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80021e4 <move+0x36c>
 800216e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002172:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8002176:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800217a:	4611      	mov	r1, r2
 800217c:	edd7 0a2c 	vldr	s1, [r7, #176]	; 0xb0
 8002180:	eeb0 0a67 	vmov.f32	s0, s15
 8002184:	4618      	mov	r0, r3
 8002186:	f009 f989 	bl	800b49c <PIDController_Update>
 800218a:	4603      	mov	r3, r0
 800218c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

				 pwmValB = PIDController_Update(&pidRight, totalDistance_left, totalDistance_right*STRAIGHTRATIOF, pwmValB);
 8002190:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002194:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80021e4 <move+0x36c>
 8002198:	ee67 7a87 	vmul.f32	s15, s15, s14
 800219c:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 80021a0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021a4:	4611      	mov	r1, r2
 80021a6:	eef0 0a67 	vmov.f32	s1, s15
 80021aa:	ed97 0a2c 	vldr	s0, [r7, #176]	; 0xb0
 80021ae:	4618      	mov	r0, r3
 80021b0:	f009 f974 	bl	800b49c <PIDController_Update>
 80021b4:	4603      	mov	r3, r0
 80021b6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
 80021ba:	e043      	b.n	8002244 <move+0x3cc>
 80021bc:	20000340 	.word	0x20000340
 80021c0:	20000268 	.word	0x20000268
 80021c4:	3d4ccccd 	.word	0x3d4ccccd
 80021c8:	44cb0000 	.word	0x44cb0000
 80021cc:	44cea000 	.word	0x44cea000
 80021d0:	41b9999a 	.word	0x41b9999a
 80021d4:	200002b0 	.word	0x200002b0
 80021d8:	200002f8 	.word	0x200002f8
 80021dc:	40020000 	.word	0x40020000
 80021e0:	200003fc 	.word	0x200003fc
 80021e4:	3f028f5c 	.word	0x3f028f5c
 80021e8:	40075c29 	.word	0x40075c29
 80021ec:	3c23d70a 	.word	0x3c23d70a
			 }else{
				 pwmValA = PIDController_Update(&pidLeft, totalDistance_right, totalDistance_left*STRAIGHTRATIOR, pwmValA);
 80021f0:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80021f4:	ed1f 7a04 	vldr	s14, [pc, #-16]	; 80021e8 <move+0x370>
 80021f8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021fc:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 8002200:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002204:	4611      	mov	r1, r2
 8002206:	eef0 0a67 	vmov.f32	s1, s15
 800220a:	ed97 0a2b 	vldr	s0, [r7, #172]	; 0xac
 800220e:	4618      	mov	r0, r3
 8002210:	f009 f944 	bl	800b49c <PIDController_Update>
 8002214:	4603      	mov	r3, r0
 8002216:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2

				 pwmValB = PIDController_Update(&pidRight, totalDistance_left*STRAIGHTRATIOR, totalDistance_right, pwmValB);
 800221a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800221e:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 80021e8 <move+0x370>
 8002222:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002226:	f8b7 20a0 	ldrh.w	r2, [r7, #160]	; 0xa0
 800222a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800222e:	4611      	mov	r1, r2
 8002230:	edd7 0a2b 	vldr	s1, [r7, #172]	; 0xac
 8002234:	eeb0 0a67 	vmov.f32	s0, s15
 8002238:	4618      	mov	r0, r3
 800223a:	f009 f92f 	bl	800b49c <PIDController_Update>
 800223e:	4603      	mov	r3, r0
 8002240:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
			 }

			 distanceError = DISTANCE_ERROR_OFFSET * distance;
 8002244:	edd7 7a01 	vldr	s15, [r7, #4]
 8002248:	ed1f 7a18 	vldr	s14, [pc, #-96]	; 80021ec <move+0x374>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
			 if (totalDistance_left >= (distance+distanceError) || totalDistance_right >= (distance+distanceError))
 8002254:	ed97 7a01 	vldr	s14, [r7, #4]
 8002258:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 800225c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002260:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002264:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800226c:	da0c      	bge.n	8002288 <move+0x410>
 800226e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002272:	edd7 7a1e 	vldr	s15, [r7, #120]	; 0x78
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800227e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002286:	db0b      	blt.n	80022a0 <move+0x428>
			 {
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 8002288:	4b20      	ldr	r3, [pc, #128]	; (800230c <move+0x494>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	2200      	movs	r2, #0
 800228e:	635a      	str	r2, [r3, #52]	; 0x34
				 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 8002290:	4b1e      	ldr	r3, [pc, #120]	; (800230c <move+0x494>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2200      	movs	r2, #0
 8002296:	639a      	str	r2, [r3, #56]	; 0x38
				 moving = 0;
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <move+0x498>)
 800229a:	2200      	movs	r2, #0
 800229c:	701a      	strb	r2, [r3, #0]
//
//					sprintf(messageB, "SRight: %2d\0", pwmValB);
//					OLED_ShowString(10, 40, messageB);
//					sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
//					OLED_ShowString(10, 50, messageB);
				 break;
 800229e:	e02a      	b.n	80022f6 <move+0x47e>
			 }



//			// OLED
			sprintf(messageA, "SLeft: %2d\0", diffLeft);
 80022a0:	f107 031c 	add.w	r3, r7, #28
 80022a4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80022a8:	491a      	ldr	r1, [pc, #104]	; (8002314 <move+0x49c>)
 80022aa:	4618      	mov	r0, r3
 80022ac:	f00a fac2 	bl	800c834 <siprintf>
			OLED_ShowString(10, 20, messageA);
 80022b0:	f107 031c 	add.w	r3, r7, #28
 80022b4:	461a      	mov	r2, r3
 80022b6:	2114      	movs	r1, #20
 80022b8:	200a      	movs	r0, #10
 80022ba:	f009 fb3d 	bl	800b938 <OLED_ShowString>
//			sprintf(messageA, "TLeft: %.2f\0", totalDistance_left);
//			OLED_ShowString(10, 30, messageA);

			sprintf(messageB, "SRight: %2d\0", diffRight);
 80022be:	f107 0308 	add.w	r3, r7, #8
 80022c2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80022c6:	4914      	ldr	r1, [pc, #80]	; (8002318 <move+0x4a0>)
 80022c8:	4618      	mov	r0, r3
 80022ca:	f00a fab3 	bl	800c834 <siprintf>
			OLED_ShowString(10, 40, messageB);
 80022ce:	f107 0308 	add.w	r3, r7, #8
 80022d2:	461a      	mov	r2, r3
 80022d4:	2128      	movs	r1, #40	; 0x28
 80022d6:	200a      	movs	r0, #10
 80022d8:	f009 fb2e 	bl	800b938 <OLED_ShowString>
//			sprintf(messageB, "TRight: %.2f\0", totalDistance_right);
//			OLED_ShowString(10, 50, messageB);

			prevTime = currTime;
 80022dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
			leftTick_prev = leftTick;
 80022e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
			rightTick_prev = rightTick;
 80022ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		 __HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmValA);
 80022f4:	e66c      	b.n	8001fd0 <move+0x158>
		 }
	}
	moving = 0;
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <move+0x498>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	701a      	strb	r2, [r3, #0]
	osDelay(1000);
 80022fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002300:	f006 fc3f 	bl	8008b82 <osDelay>
	return;
 8002304:	bf00      	nop
}
 8002306:	37c0      	adds	r7, #192	; 0xc0
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000340 	.word	0x20000340
 8002310:	200003fc 	.word	0x200003fc
 8002314:	08010504 	.word	0x08010504
 8002318:	08010510 	.word	0x08010510

0800231c <turn>:
//300 degrees:
//330 degrees:
//360 degrees:36500
///////////////////////////////////////////////////////////////////////////
void turn(uint8_t direction, uint8_t forward)
{
 800231c:	b5b0      	push	{r4, r5, r7, lr}
 800231e:	b088      	sub	sp, #32
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	460a      	mov	r2, r1
 8002326:	71fb      	strb	r3, [r7, #7]
 8002328:	4613      	mov	r3, r2
 800232a:	71bb      	strb	r3, [r7, #6]
	float gyro;
//	uint8_t angle;
//	angle = data*1000; //relationship of degree angle to gyro values
	uint8_t GYROSUM[20];
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800232c:	2100      	movs	r1, #0
 800232e:	48ac      	ldr	r0, [pc, #688]	; (80025e0 <turn+0x2c4>)
 8002330:	f004 fb3a 	bl	80069a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002334:	2104      	movs	r1, #4
 8002336:	48aa      	ldr	r0, [pc, #680]	; (80025e0 <turn+0x2c4>)
 8002338:	f004 fb36 	bl	80069a8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800233c:	210c      	movs	r1, #12
 800233e:	48a9      	ldr	r0, [pc, #676]	; (80025e4 <turn+0x2c8>)
 8002340:	f004 fb32 	bl	80069a8 <HAL_TIM_PWM_Start>

	//move forward
	if (forward)
 8002344:	79bb      	ldrb	r3, [r7, #6]
 8002346:	2b00      	cmp	r3, #0
 8002348:	f000 8086 	beq.w	8002458 <turn+0x13c>
	{
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	2108      	movs	r1, #8
 8002350:	48a5      	ldr	r0, [pc, #660]	; (80025e8 <turn+0x2cc>)
 8002352:	f001 fa49 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8002356:	2200      	movs	r2, #0
 8002358:	2104      	movs	r1, #4
 800235a:	48a3      	ldr	r0, [pc, #652]	; (80025e8 <turn+0x2cc>)
 800235c:	f001 fa44 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8002360:	2201      	movs	r2, #1
 8002362:	2110      	movs	r1, #16
 8002364:	48a0      	ldr	r0, [pc, #640]	; (80025e8 <turn+0x2cc>)
 8002366:	f001 fa3f 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 800236a:	2200      	movs	r2, #0
 800236c:	2120      	movs	r1, #32
 800236e:	489e      	ldr	r0, [pc, #632]	; (80025e8 <turn+0x2cc>)
 8002370:	f001 fa3a 	bl	80037e8 <HAL_GPIO_WritePin>

		if (direction)
 8002374:	79fb      	ldrb	r3, [r7, #7]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d036      	beq.n	80023e8 <turn+0xcc>
		{
			//left
			htim1.Instance -> CCR4 = LEFT;
 800237a:	4b9a      	ldr	r3, [pc, #616]	; (80025e4 <turn+0x2c8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	2264      	movs	r2, #100	; 0x64
 8002380:	641a      	str	r2, [r3, #64]	; 0x40
			osDelay(100);
 8002382:	2064      	movs	r0, #100	; 0x64
 8002384:	f006 fbfd 	bl	8008b82 <osDelay>
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 8002388:	4b95      	ldr	r3, [pc, #596]	; (80025e0 <turn+0x2c4>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002390:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 2000);
 8002392:	4b93      	ldr	r3, [pc, #588]	; (80025e0 <turn+0x2c4>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
			 moving = 1;
 800239c:	4b93      	ldr	r3, [pc, #588]	; (80025ec <turn+0x2d0>)
 800239e:	2201      	movs	r2, #1
 80023a0:	701a      	strb	r2, [r3, #0]
			 while (moving)
 80023a2:	e01c      	b.n	80023de <turn+0xc2>
			 {
				 if (fabs(gyroSum) < data)
 80023a4:	4b92      	ldr	r3, [pc, #584]	; (80025f0 <turn+0x2d4>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eef0 7ae7 	vabs.f32	s15, s15
 80023ae:	ee17 0a90 	vmov	r0, s15
 80023b2:	f7fe f8c9 	bl	8000548 <__aeabi_f2d>
 80023b6:	4604      	mov	r4, r0
 80023b8:	460d      	mov	r5, r1
 80023ba:	4b8e      	ldr	r3, [pc, #568]	; (80025f4 <turn+0x2d8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7fe f8a0 	bl	8000504 <__aeabi_ui2d>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4620      	mov	r0, r4
 80023ca:	4629      	mov	r1, r5
 80023cc:	f7fe fb86 	bl	8000adc <__aeabi_dcmplt>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d100      	bne.n	80023d8 <turn+0xbc>
					 //continue moving
					 osDelay(1);
				 }
				 else
				 {
					 break;
 80023d6:	e0be      	b.n	8002556 <turn+0x23a>
					 osDelay(1);
 80023d8:	2001      	movs	r0, #1
 80023da:	f006 fbd2 	bl	8008b82 <osDelay>
			 while (moving)
 80023de:	4b83      	ldr	r3, [pc, #524]	; (80025ec <turn+0x2d0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1de      	bne.n	80023a4 <turn+0x88>
 80023e6:	e0b6      	b.n	8002556 <turn+0x23a>
			 }
		}
		else
		{
			//right
			htim1.Instance -> CCR4 = RIGHT;
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <turn+0x2c8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80023f0:	641a      	str	r2, [r3, #64]	; 0x40
			osDelay(100);
 80023f2:	2064      	movs	r0, #100	; 0x64
 80023f4:	f006 fbc5 	bl	8008b82 <osDelay>
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 1500);
 80023f8:	4b79      	ldr	r3, [pc, #484]	; (80025e0 <turn+0x2c4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002400:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 2000);
 8002402:	4b77      	ldr	r3, [pc, #476]	; (80025e0 <turn+0x2c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800240a:	639a      	str	r2, [r3, #56]	; 0x38
			 moving = 1;
 800240c:	4b77      	ldr	r3, [pc, #476]	; (80025ec <turn+0x2d0>)
 800240e:	2201      	movs	r2, #1
 8002410:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002412:	e01c      	b.n	800244e <turn+0x132>
			 {
				 if (fabs(gyroSum) < data)
 8002414:	4b76      	ldr	r3, [pc, #472]	; (80025f0 <turn+0x2d4>)
 8002416:	edd3 7a00 	vldr	s15, [r3]
 800241a:	eef0 7ae7 	vabs.f32	s15, s15
 800241e:	ee17 0a90 	vmov	r0, s15
 8002422:	f7fe f891 	bl	8000548 <__aeabi_f2d>
 8002426:	4604      	mov	r4, r0
 8002428:	460d      	mov	r5, r1
 800242a:	4b72      	ldr	r3, [pc, #456]	; (80025f4 <turn+0x2d8>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7fe f868 	bl	8000504 <__aeabi_ui2d>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fe fb4e 	bl	8000adc <__aeabi_dcmplt>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d100      	bne.n	8002448 <turn+0x12c>
					 //continue moving
					 osDelay(1);
				 }
				 else
				 {
					 break;
 8002446:	e086      	b.n	8002556 <turn+0x23a>
					 osDelay(1);
 8002448:	2001      	movs	r0, #1
 800244a:	f006 fb9a 	bl	8008b82 <osDelay>
			 while (moving)
 800244e:	4b67      	ldr	r3, [pc, #412]	; (80025ec <turn+0x2d0>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1de      	bne.n	8002414 <turn+0xf8>
 8002456:	e07e      	b.n	8002556 <turn+0x23a>
	}
	//backwards
	else
	{
		//left
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8002458:	2200      	movs	r2, #0
 800245a:	2108      	movs	r1, #8
 800245c:	4862      	ldr	r0, [pc, #392]	; (80025e8 <turn+0x2cc>)
 800245e:	f001 f9c3 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8002462:	2201      	movs	r2, #1
 8002464:	2104      	movs	r1, #4
 8002466:	4860      	ldr	r0, [pc, #384]	; (80025e8 <turn+0x2cc>)
 8002468:	f001 f9be 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 800246c:	2200      	movs	r2, #0
 800246e:	2110      	movs	r1, #16
 8002470:	485d      	ldr	r0, [pc, #372]	; (80025e8 <turn+0x2cc>)
 8002472:	f001 f9b9 	bl	80037e8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8002476:	2201      	movs	r2, #1
 8002478:	2120      	movs	r1, #32
 800247a:	485b      	ldr	r0, [pc, #364]	; (80025e8 <turn+0x2cc>)
 800247c:	f001 f9b4 	bl	80037e8 <HAL_GPIO_WritePin>
		if (direction)
 8002480:	79fb      	ldrb	r3, [r7, #7]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d033      	beq.n	80024ee <turn+0x1d2>
		{
			htim1.Instance -> CCR4 = LEFT;
 8002486:	4b57      	ldr	r3, [pc, #348]	; (80025e4 <turn+0x2c8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2264      	movs	r2, #100	; 0x64
 800248c:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 800248e:	4b54      	ldr	r3, [pc, #336]	; (80025e0 <turn+0x2c4>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002496:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 2000);
 8002498:	4b51      	ldr	r3, [pc, #324]	; (80025e0 <turn+0x2c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
			 moving = 1;
 80024a2:	4b52      	ldr	r3, [pc, #328]	; (80025ec <turn+0x2d0>)
 80024a4:	2201      	movs	r2, #1
 80024a6:	701a      	strb	r2, [r3, #0]
			 while (moving)
 80024a8:	e01c      	b.n	80024e4 <turn+0x1c8>
			 {
				 if (fabs(gyroSum) < data)
 80024aa:	4b51      	ldr	r3, [pc, #324]	; (80025f0 <turn+0x2d4>)
 80024ac:	edd3 7a00 	vldr	s15, [r3]
 80024b0:	eef0 7ae7 	vabs.f32	s15, s15
 80024b4:	ee17 0a90 	vmov	r0, s15
 80024b8:	f7fe f846 	bl	8000548 <__aeabi_f2d>
 80024bc:	4604      	mov	r4, r0
 80024be:	460d      	mov	r5, r1
 80024c0:	4b4c      	ldr	r3, [pc, #304]	; (80025f4 <turn+0x2d8>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7fe f81d 	bl	8000504 <__aeabi_ui2d>
 80024ca:	4602      	mov	r2, r0
 80024cc:	460b      	mov	r3, r1
 80024ce:	4620      	mov	r0, r4
 80024d0:	4629      	mov	r1, r5
 80024d2:	f7fe fb03 	bl	8000adc <__aeabi_dcmplt>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d100      	bne.n	80024de <turn+0x1c2>
					 //continue moving
					 osDelay(1);
				 }
				 else
				 {
					 break;
 80024dc:	e03b      	b.n	8002556 <turn+0x23a>
					 osDelay(1);
 80024de:	2001      	movs	r0, #1
 80024e0:	f006 fb4f 	bl	8008b82 <osDelay>
			 while (moving)
 80024e4:	4b41      	ldr	r3, [pc, #260]	; (80025ec <turn+0x2d0>)
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1de      	bne.n	80024aa <turn+0x18e>
 80024ec:	e033      	b.n	8002556 <turn+0x23a>
			 }
		}
		//right
		else
		{
			htim1.Instance -> CCR4 = RIGHT; //right
 80024ee:	4b3d      	ldr	r3, [pc, #244]	; (80025e4 <turn+0x2c8>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f44f 7287 	mov.w	r2, #270	; 0x10e
 80024f6:	641a      	str	r2, [r3, #64]	; 0x40
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 2000);
 80024f8:	4b39      	ldr	r3, [pc, #228]	; (80025e0 <turn+0x2c4>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 2000);
 8002502:	4b37      	ldr	r3, [pc, #220]	; (80025e0 <turn+0x2c4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800250a:	639a      	str	r2, [r3, #56]	; 0x38
			 moving = 1;
 800250c:	4b37      	ldr	r3, [pc, #220]	; (80025ec <turn+0x2d0>)
 800250e:	2201      	movs	r2, #1
 8002510:	701a      	strb	r2, [r3, #0]
			 while (moving)
 8002512:	e01c      	b.n	800254e <turn+0x232>
			 {
				 if (fabs(gyroSum) < data)
 8002514:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <turn+0x2d4>)
 8002516:	edd3 7a00 	vldr	s15, [r3]
 800251a:	eef0 7ae7 	vabs.f32	s15, s15
 800251e:	ee17 0a90 	vmov	r0, s15
 8002522:	f7fe f811 	bl	8000548 <__aeabi_f2d>
 8002526:	4604      	mov	r4, r0
 8002528:	460d      	mov	r5, r1
 800252a:	4b32      	ldr	r3, [pc, #200]	; (80025f4 <turn+0x2d8>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4618      	mov	r0, r3
 8002530:	f7fd ffe8 	bl	8000504 <__aeabi_ui2d>
 8002534:	4602      	mov	r2, r0
 8002536:	460b      	mov	r3, r1
 8002538:	4620      	mov	r0, r4
 800253a:	4629      	mov	r1, r5
 800253c:	f7fe face 	bl	8000adc <__aeabi_dcmplt>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d100      	bne.n	8002548 <turn+0x22c>
					 //continue moving
					 osDelay(1);
				 }
				 else
				 {
					 break;
 8002546:	e006      	b.n	8002556 <turn+0x23a>
					 osDelay(1);
 8002548:	2001      	movs	r0, #1
 800254a:	f006 fb1a 	bl	8008b82 <osDelay>
			 while (moving)
 800254e:	4b27      	ldr	r3, [pc, #156]	; (80025ec <turn+0x2d0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d1de      	bne.n	8002514 <turn+0x1f8>

			 }
		}
	}
	//Print GyroSum on OLED
	sprintf(GYROSUM, "%5.2f\0", gyroSum);
 8002556:	4b26      	ldr	r3, [pc, #152]	; (80025f0 <turn+0x2d4>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fd fff4 	bl	8000548 <__aeabi_f2d>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	f107 000c 	add.w	r0, r7, #12
 8002568:	4923      	ldr	r1, [pc, #140]	; (80025f8 <turn+0x2dc>)
 800256a:	f00a f963 	bl	800c834 <siprintf>
	OLED_ShowString(10, 10, GYROSUM);
 800256e:	f107 030c 	add.w	r3, r7, #12
 8002572:	461a      	mov	r2, r3
 8002574:	210a      	movs	r1, #10
 8002576:	200a      	movs	r0, #10
 8002578:	f009 f9de 	bl	800b938 <OLED_ShowString>
	OLED_Refresh_Gram(); //Refresh Ram
 800257c:	f009 f868 	bl	800b650 <OLED_Refresh_Gram>

	//Stop wheels and let wheels be straight
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1, 0);
 8002580:	4b17      	ldr	r3, [pc, #92]	; (80025e0 <turn+0x2c4>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2200      	movs	r2, #0
 8002586:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2, 0);
 8002588:	4b15      	ldr	r3, [pc, #84]	; (80025e0 <turn+0x2c4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2200      	movs	r2, #0
 800258e:	639a      	str	r2, [r3, #56]	; 0x38
	moving = 0;
 8002590:	4b16      	ldr	r3, [pc, #88]	; (80025ec <turn+0x2d0>)
 8002592:	2200      	movs	r2, #0
 8002594:	701a      	strb	r2, [r3, #0]
	htim1.Instance -> CCR4 = STRAIGHT; //centre
 8002596:	4b13      	ldr	r3, [pc, #76]	; (80025e4 <turn+0x2c8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2296      	movs	r2, #150	; 0x96
 800259c:	641a      	str	r2, [r3, #64]	; 0x40

	HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 800259e:	2200      	movs	r2, #0
 80025a0:	2108      	movs	r1, #8
 80025a2:	4811      	ldr	r0, [pc, #68]	; (80025e8 <turn+0x2cc>)
 80025a4:	f001 f920 	bl	80037e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 80025a8:	2200      	movs	r2, #0
 80025aa:	2104      	movs	r1, #4
 80025ac:	480e      	ldr	r0, [pc, #56]	; (80025e8 <turn+0x2cc>)
 80025ae:	f001 f91b 	bl	80037e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 80025b2:	2200      	movs	r2, #0
 80025b4:	2110      	movs	r1, #16
 80025b6:	480c      	ldr	r0, [pc, #48]	; (80025e8 <turn+0x2cc>)
 80025b8:	f001 f916 	bl	80037e8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 80025bc:	2200      	movs	r2, #0
 80025be:	2120      	movs	r1, #32
 80025c0:	4809      	ldr	r0, [pc, #36]	; (80025e8 <turn+0x2cc>)
 80025c2:	f001 f911 	bl	80037e8 <HAL_GPIO_WritePin>

	move(1, 0); //to let robot stop immediately as robot moves forward due to momentum
 80025c6:	2000      	movs	r0, #0
 80025c8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80025cc:	f7ff fc54 	bl	8001e78 <move>
	osDelay(1000);
 80025d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025d4:	f006 fad5 	bl	8008b82 <osDelay>
	return;
 80025d8:	bf00      	nop
}
 80025da:	3720      	adds	r7, #32
 80025dc:	46bd      	mov	sp, r7
 80025de:	bdb0      	pop	{r4, r5, r7, pc}
 80025e0:	20000340 	.word	0x20000340
 80025e4:	20000268 	.word	0x20000268
 80025e8:	40020000 	.word	0x40020000
 80025ec:	200003fc 	.word	0x200003fc
 80025f0:	20000400 	.word	0x20000400
 80025f4:	20000408 	.word	0x20000408
 80025f8:	08010520 	.word	0x08010520

080025fc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t instrBuffer[20], angle;
	uint16_t i = 0;
 8002604:	2300      	movs	r3, #0
 8002606:	83fb      	strh	r3, [r7, #30]
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, 1);
 8002608:	2201      	movs	r2, #1
 800260a:	4966      	ldr	r1, [pc, #408]	; (80027a4 <StartDefaultTask+0x1a8>)
 800260c:	4866      	ldr	r0, [pc, #408]	; (80027a8 <StartDefaultTask+0x1ac>)
 800260e:	f005 fa0e 	bl	8007a2e <HAL_UART_Receive_IT>
	moving = 0;
 8002612:	4b66      	ldr	r3, [pc, #408]	; (80027ac <StartDefaultTask+0x1b0>)
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
	cmd = data = newCmdReceived = 0;
 8002618:	4b65      	ldr	r3, [pc, #404]	; (80027b0 <StartDefaultTask+0x1b4>)
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	4b65      	ldr	r3, [pc, #404]	; (80027b4 <StartDefaultTask+0x1b8>)
 8002620:	2200      	movs	r2, #0
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	4b63      	ldr	r3, [pc, #396]	; (80027b4 <StartDefaultTask+0x1b8>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	4b63      	ldr	r3, [pc, #396]	; (80027b8 <StartDefaultTask+0x1bc>)
 800262c:	701a      	strb	r2, [r3, #0]
  /* Infinite loop */
  for(;;)
  {

	  //Toggle LED just to see if the code is running
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800262e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002632:	4862      	ldr	r0, [pc, #392]	; (80027bc <StartDefaultTask+0x1c0>)
 8002634:	f001 f8f1 	bl	800381a <HAL_GPIO_TogglePin>
	// 1: forward
	// 2: left
	// 3: right
	// 4: reverse
	// 5: shortest path
	if (newCmdReceived == 1)
 8002638:	4b5d      	ldr	r3, [pc, #372]	; (80027b0 <StartDefaultTask+0x1b4>)
 800263a:	781b      	ldrb	r3, [r3, #0]
 800263c:	2b01      	cmp	r3, #1
 800263e:	f040 80ab 	bne.w	8002798 <StartDefaultTask+0x19c>
	{
		newCmdReceived = 0;
 8002642:	4b5b      	ldr	r3, [pc, #364]	; (80027b0 <StartDefaultTask+0x1b4>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
		switch(cmd)
 8002648:	4b5b      	ldr	r3, [pc, #364]	; (80027b8 <StartDefaultTask+0x1bc>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	3b4c      	subs	r3, #76	; 0x4c
 800264e:	2b2b      	cmp	r3, #43	; 0x2b
 8002650:	f200 809e 	bhi.w	8002790 <StartDefaultTask+0x194>
 8002654:	a201      	add	r2, pc, #4	; (adr r2, 800265c <StartDefaultTask+0x60>)
 8002656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800265a:	bf00      	nop
 800265c:	08002769 	.word	0x08002769
 8002660:	08002791 	.word	0x08002791
 8002664:	08002791 	.word	0x08002791
 8002668:	08002791 	.word	0x08002791
 800266c:	08002791 	.word	0x08002791
 8002670:	08002791 	.word	0x08002791
 8002674:	08002779 	.word	0x08002779
 8002678:	08002791 	.word	0x08002791
 800267c:	08002791 	.word	0x08002791
 8002680:	08002791 	.word	0x08002791
 8002684:	08002791 	.word	0x08002791
 8002688:	08002791 	.word	0x08002791
 800268c:	08002791 	.word	0x08002791
 8002690:	08002791 	.word	0x08002791
 8002694:	08002791 	.word	0x08002791
 8002698:	08002791 	.word	0x08002791
 800269c:	08002791 	.word	0x08002791
 80026a0:	08002791 	.word	0x08002791
 80026a4:	08002791 	.word	0x08002791
 80026a8:	08002791 	.word	0x08002791
 80026ac:	08002791 	.word	0x08002791
 80026b0:	08002791 	.word	0x08002791
 80026b4:	08002791 	.word	0x08002791
 80026b8:	08002791 	.word	0x08002791
 80026bc:	08002791 	.word	0x08002791
 80026c0:	08002791 	.word	0x08002791
 80026c4:	08002791 	.word	0x08002791
 80026c8:	08002791 	.word	0x08002791
 80026cc:	08002791 	.word	0x08002791
 80026d0:	08002791 	.word	0x08002791
 80026d4:	08002791 	.word	0x08002791
 80026d8:	08002791 	.word	0x08002791
 80026dc:	0800272b 	.word	0x0800272b
 80026e0:	08002791 	.word	0x08002791
 80026e4:	08002791 	.word	0x08002791
 80026e8:	08002791 	.word	0x08002791
 80026ec:	08002789 	.word	0x08002789
 80026f0:	08002791 	.word	0x08002791
 80026f4:	0800273b 	.word	0x0800273b
 80026f8:	0800274b 	.word	0x0800274b
 80026fc:	08002791 	.word	0x08002791
 8002700:	08002791 	.word	0x08002791
 8002704:	08002791 	.word	0x08002791
 8002708:	0800270d 	.word	0x0800270d
		{
		case 'w':
			move(data, 1);
 800270c:	4b29      	ldr	r3, [pc, #164]	; (80027b4 <StartDefaultTask+0x1b8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	ee07 3a90 	vmov	s15, r3
 8002714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002718:	2001      	movs	r0, #1
 800271a:	eeb0 0a67 	vmov.f32	s0, s15
 800271e:	f7ff fbab 	bl	8001e78 <move>
			sendToRPI("Forward done!\n\0");
 8002722:	4827      	ldr	r0, [pc, #156]	; (80027c0 <StartDefaultTask+0x1c4>)
 8002724:	f7ff fb92 	bl	8001e4c <sendToRPI>
			break;
 8002728:	e033      	b.n	8002792 <StartDefaultTask+0x196>
		case 'l':
			turn(1, 1);
 800272a:	2101      	movs	r1, #1
 800272c:	2001      	movs	r0, #1
 800272e:	f7ff fdf5 	bl	800231c <turn>
			sendToRPI("Left done!\0");
 8002732:	4824      	ldr	r0, [pc, #144]	; (80027c4 <StartDefaultTask+0x1c8>)
 8002734:	f7ff fb8a 	bl	8001e4c <sendToRPI>
			break;
 8002738:	e02b      	b.n	8002792 <StartDefaultTask+0x196>
		case 'r':
			turn(0, 1);
 800273a:	2101      	movs	r1, #1
 800273c:	2000      	movs	r0, #0
 800273e:	f7ff fded 	bl	800231c <turn>
			sendToRPI("Right done!\0");
 8002742:	4821      	ldr	r0, [pc, #132]	; (80027c8 <StartDefaultTask+0x1cc>)
 8002744:	f7ff fb82 	bl	8001e4c <sendToRPI>
			break;
 8002748:	e023      	b.n	8002792 <StartDefaultTask+0x196>
		case 's':
			move(data, 0);
 800274a:	4b1a      	ldr	r3, [pc, #104]	; (80027b4 <StartDefaultTask+0x1b8>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002756:	2000      	movs	r0, #0
 8002758:	eeb0 0a67 	vmov.f32	s0, s15
 800275c:	f7ff fb8c 	bl	8001e78 <move>
			sendToRPI("Reverse done!\0");
 8002760:	481a      	ldr	r0, [pc, #104]	; (80027cc <StartDefaultTask+0x1d0>)
 8002762:	f7ff fb73 	bl	8001e4c <sendToRPI>
			break;
 8002766:	e014      	b.n	8002792 <StartDefaultTask+0x196>
		case 'L':
			turn(1, 0);
 8002768:	2100      	movs	r1, #0
 800276a:	2001      	movs	r0, #1
 800276c:	f7ff fdd6 	bl	800231c <turn>
			sendToRPI("Reverse Left done!\0");
 8002770:	4817      	ldr	r0, [pc, #92]	; (80027d0 <StartDefaultTask+0x1d4>)
 8002772:	f7ff fb6b 	bl	8001e4c <sendToRPI>
			break;
 8002776:	e00c      	b.n	8002792 <StartDefaultTask+0x196>
		case 'R':
			turn(0, 0);
 8002778:	2100      	movs	r1, #0
 800277a:	2000      	movs	r0, #0
 800277c:	f7ff fdce 	bl	800231c <turn>
			sendToRPI("Reverse Right done!\0");
 8002780:	4814      	ldr	r0, [pc, #80]	; (80027d4 <StartDefaultTask+0x1d8>)
 8002782:	f7ff fb63 	bl	8001e4c <sendToRPI>
			break;
 8002786:	e004      	b.n	8002792 <StartDefaultTask+0x196>
		case 'p': // take photo
			sendToRPI("RPI:s"); // command for rpi to take photo
 8002788:	4813      	ldr	r0, [pc, #76]	; (80027d8 <StartDefaultTask+0x1dc>)
 800278a:	f7ff fb5f 	bl	8001e4c <sendToRPI>
			break;
 800278e:	e000      	b.n	8002792 <StartDefaultTask+0x196>
		default:
			break;
 8002790:	bf00      	nop
		}
		data = 0;
 8002792:	4b08      	ldr	r3, [pc, #32]	; (80027b4 <StartDefaultTask+0x1b8>)
 8002794:	2200      	movs	r2, #0
 8002796:	601a      	str	r2, [r3, #0]
	}
	osDelay(1000);
 8002798:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800279c:	f006 f9f1 	bl	8008b82 <osDelay>
	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80027a0:	e745      	b.n	800262e <StartDefaultTask+0x32>
 80027a2:	bf00      	nop
 80027a4:	20000404 	.word	0x20000404
 80027a8:	20000388 	.word	0x20000388
 80027ac:	200003fc 	.word	0x200003fc
 80027b0:	20000405 	.word	0x20000405
 80027b4:	20000408 	.word	0x20000408
 80027b8:	20000406 	.word	0x20000406
 80027bc:	40021000 	.word	0x40021000
 80027c0:	08010528 	.word	0x08010528
 80027c4:	08010538 	.word	0x08010538
 80027c8:	08010544 	.word	0x08010544
 80027cc:	08010554 	.word	0x08010554
 80027d0:	08010564 	.word	0x08010564
 80027d4:	08010578 	.word	0x08010578
 80027d8:	08010590 	.word	0x08010590

080027dc <gyro_read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_read */
void gyro_read(void *argument)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b092      	sub	sp, #72	; 0x48
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_read */
  /* Infinite loop */
	uint8_t status = IMU_Initialise(&imu, &hi2c1, &huart3);
 80027e4:	4a14      	ldr	r2, [pc, #80]	; (8002838 <gyro_read+0x5c>)
 80027e6:	4915      	ldr	r1, [pc, #84]	; (800283c <gyro_read+0x60>)
 80027e8:	4815      	ldr	r0, [pc, #84]	; (8002840 <gyro_read+0x64>)
 80027ea:	f7fe fc05 	bl	8000ff8 <IMU_Initialise>
 80027ee:	4603      	mov	r3, r0
 80027f0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t gbuf[50];
	float gyro;
  for(;;)
  {
	//to sum up gyro values when moving to compare during turn
	if (moving)
 80027f4:	4b13      	ldr	r3, [pc, #76]	; (8002844 <gyro_read+0x68>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d015      	beq.n	8002828 <gyro_read+0x4c>
	{
		IMU_GyroRead(&imu);
 80027fc:	4810      	ldr	r0, [pc, #64]	; (8002840 <gyro_read+0x64>)
 80027fe:	f7fe fe85 	bl	800150c <IMU_GyroRead>
		gyro = imu.gyro[2];
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <gyro_read+0x64>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	643b      	str	r3, [r7, #64]	; 0x40
		gyroSum += fabs(gyro);
 8002808:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800280c:	eeb0 7ae7 	vabs.f32	s14, s15
 8002810:	4b0d      	ldr	r3, [pc, #52]	; (8002848 <gyro_read+0x6c>)
 8002812:	edd3 7a00 	vldr	s15, [r3]
 8002816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <gyro_read+0x6c>)
 800281c:	edc3 7a00 	vstr	s15, [r3]
//		sprintf(gbuf, "[DEBUG]\n\rGYRO\n\rZ = %5.2f\n\rTotal\n\r = %5.2f\n\r", gyro, gyroSum); // Get Z value of Gyroscope
//		HAL_UART_Transmit(&huart3, gbuf, sizeof(gbuf)-1, HAL_MAX_DELAY);
		osDelay(10);
 8002820:	200a      	movs	r0, #10
 8002822:	f006 f9ae 	bl	8008b82 <osDelay>
 8002826:	e7e5      	b.n	80027f4 <gyro_read+0x18>
	}
	//set gyroSum to 0 when not moving
	else
	{
		gyroSum = 0;
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <gyro_read+0x6c>)
 800282a:	f04f 0200 	mov.w	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
//		sprintf(gbuf, "[DEBUG] Not Moving!\n\r Total\n\r = %5.2f\n\r", gyroSum); // Get Z value of Gyroscope
//		HAL_UART_Transmit(&huart3, gbuf, sizeof(gbuf)-1, HAL_MAX_DELAY);
		osDelay(10);
 8002830:	200a      	movs	r0, #10
 8002832:	f006 f9a6 	bl	8008b82 <osDelay>
	if (moving)
 8002836:	e7dd      	b.n	80027f4 <gyro_read+0x18>
 8002838:	20000388 	.word	0x20000388
 800283c:	20000214 	.word	0x20000214
 8002840:	200003d8 	.word	0x200003d8
 8002844:	200003fc 	.word	0x200003fc
 8002848:	20000400 	.word	0x20000400

0800284c <servoMotor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servoMotor */
void servoMotor(void *argument)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b096      	sub	sp, #88	; 0x58
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servoMotor */
	// start encoder
		HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL); //encoderA
 8002854:	213c      	movs	r1, #60	; 0x3c
 8002856:	484f      	ldr	r0, [pc, #316]	; (8002994 <servoMotor+0x148>)
 8002858:	f004 fa14 	bl	8006c84 <HAL_TIM_Encoder_Start>
		HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); //encoderB
 800285c:	213c      	movs	r1, #60	; 0x3c
 800285e:	484e      	ldr	r0, [pc, #312]	; (8002998 <servoMotor+0x14c>)
 8002860:	f004 fa10 	bl	8006c84 <HAL_TIM_Encoder_Start>

		// wheel ticks
		int leftTick_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8002864:	4b4b      	ldr	r3, [pc, #300]	; (8002994 <servoMotor+0x148>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286a:	657b      	str	r3, [r7, #84]	; 0x54
		int rightTick_prev = __HAL_TIM_GET_COUNTER(&htim3);
 800286c:	4b4a      	ldr	r3, [pc, #296]	; (8002998 <servoMotor+0x14c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	653b      	str	r3, [r7, #80]	; 0x50

		// cpu ticks
		uint32_t startTime = HAL_GetTick();
 8002874:	f000 fc3a 	bl	80030ec <HAL_GetTick>
 8002878:	6438      	str	r0, [r7, #64]	; 0x40
		uint32_t prevTime = startTime;
 800287a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287c:	64fb      	str	r3, [r7, #76]	; 0x4c


		int leftTick;
		int rightTick;

		int diffLeft = 0;
 800287e:	2300      	movs	r3, #0
 8002880:	64bb      	str	r3, [r7, #72]	; 0x48
		int diffRight = 0;
 8002882:	2300      	movs	r3, #0
 8002884:	647b      	str	r3, [r7, #68]	; 0x44
		uint8_t messageB[20];

		/*Infinite loop*/
		for(;;)
		{
			 currTime = HAL_GetTick();
 8002886:	f000 fc31 	bl	80030ec <HAL_GetTick>
 800288a:	63f8      	str	r0, [r7, #60]	; 0x3c

			 if (currTime-prevTime > 50L)
 800288c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800288e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b32      	cmp	r3, #50	; 0x32
 8002894:	d9f7      	bls.n	8002886 <servoMotor+0x3a>
			 {
				 leftTick = __HAL_TIM_GET_COUNTER(&htim2);
 8002896:	4b3f      	ldr	r3, [pc, #252]	; (8002994 <servoMotor+0x148>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289c:	63bb      	str	r3, [r7, #56]	; 0x38
				 rightTick = __HAL_TIM_GET_COUNTER(&htim3);
 800289e:	4b3e      	ldr	r3, [pc, #248]	; (8002998 <servoMotor+0x14c>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a4:	637b      	str	r3, [r7, #52]	; 0x34

				 diffLeft = 0;
 80028a6:	2300      	movs	r3, #0
 80028a8:	64bb      	str	r3, [r7, #72]	; 0x48
				 diffRight = 0;
 80028aa:	2300      	movs	r3, #0
 80028ac:	647b      	str	r3, [r7, #68]	; 0x44

				 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <servoMotor+0x148>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0310 	and.w	r3, r3, #16
 80028b8:	2b10      	cmp	r3, #16
 80028ba:	d110      	bne.n	80028de <servoMotor+0x92>
				 {
					 if (leftTick < leftTick_prev)
 80028bc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028c0:	429a      	cmp	r2, r3
 80028c2:	da04      	bge.n	80028ce <servoMotor+0x82>
						 diffLeft = leftTick_prev - leftTick;
 80028c4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80028cc:	e017      	b.n	80028fe <servoMotor+0xb2>
					 else
						 diffLeft = (65535 - leftTick) + leftTick_prev;
 80028ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028d0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80028d4:	33ff      	adds	r3, #255	; 0xff
 80028d6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80028d8:	4413      	add	r3, r2
 80028da:	64bb      	str	r3, [r7, #72]	; 0x48
 80028dc:	e00f      	b.n	80028fe <servoMotor+0xb2>
				 }
				 else
				 {
					 if (leftTick > leftTick_prev)
 80028de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028e2:	429a      	cmp	r2, r3
 80028e4:	dd04      	ble.n	80028f0 <servoMotor+0xa4>
						 diffLeft = leftTick - leftTick_prev;
 80028e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80028ee:	e006      	b.n	80028fe <servoMotor+0xb2>
					 else
						 diffLeft = 65535 - leftTick_prev + leftTick;
 80028f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80028f2:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80028f6:	33ff      	adds	r3, #255	; 0xff
 80028f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028fa:	4413      	add	r3, r2
 80028fc:	64bb      	str	r3, [r7, #72]	; 0x48
				 }

				 if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 80028fe:	4b26      	ldr	r3, [pc, #152]	; (8002998 <servoMotor+0x14c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b10      	cmp	r3, #16
 800290a:	d110      	bne.n	800292e <servoMotor+0xe2>
				 {
					 if (rightTick < rightTick_prev)
 800290c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800290e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002910:	429a      	cmp	r2, r3
 8002912:	da04      	bge.n	800291e <servoMotor+0xd2>
						 diffRight = rightTick_prev - rightTick;
 8002914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002916:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	647b      	str	r3, [r7, #68]	; 0x44
 800291c:	e017      	b.n	800294e <servoMotor+0x102>
					 else
						 diffRight = (65535 - rightTick) + rightTick_prev;
 800291e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002920:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002924:	33ff      	adds	r3, #255	; 0xff
 8002926:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002928:	4413      	add	r3, r2
 800292a:	647b      	str	r3, [r7, #68]	; 0x44
 800292c:	e00f      	b.n	800294e <servoMotor+0x102>
				 }
				 else
				 {
					 if (rightTick > rightTick_prev)
 800292e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002930:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002932:	429a      	cmp	r2, r3
 8002934:	dd04      	ble.n	8002940 <servoMotor+0xf4>
						 diffRight = rightTick - rightTick_prev;
 8002936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
 800293e:	e006      	b.n	800294e <servoMotor+0x102>
					 else
						 diffRight = 65535 - rightTick_prev + rightTick;
 8002940:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002942:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002946:	33ff      	adds	r3, #255	; 0xff
 8002948:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800294a:	4413      	add	r3, r2
 800294c:	647b      	str	r3, [r7, #68]	; 0x44
				 }



	//			// OLED
				sprintf(messageA, "SLeft: %2d\0", diffLeft);
 800294e:	f107 0320 	add.w	r3, r7, #32
 8002952:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002954:	4911      	ldr	r1, [pc, #68]	; (800299c <servoMotor+0x150>)
 8002956:	4618      	mov	r0, r3
 8002958:	f009 ff6c 	bl	800c834 <siprintf>
				OLED_ShowString(10, 20, messageA);
 800295c:	f107 0320 	add.w	r3, r7, #32
 8002960:	461a      	mov	r2, r3
 8002962:	2114      	movs	r1, #20
 8002964:	200a      	movs	r0, #10
 8002966:	f008 ffe7 	bl	800b938 <OLED_ShowString>

				sprintf(messageB, "SRight: %2d\0", diffRight);
 800296a:	f107 030c 	add.w	r3, r7, #12
 800296e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002970:	490b      	ldr	r1, [pc, #44]	; (80029a0 <servoMotor+0x154>)
 8002972:	4618      	mov	r0, r3
 8002974:	f009 ff5e 	bl	800c834 <siprintf>
				OLED_ShowString(10, 40, messageB);
 8002978:	f107 030c 	add.w	r3, r7, #12
 800297c:	461a      	mov	r2, r3
 800297e:	2128      	movs	r1, #40	; 0x28
 8002980:	200a      	movs	r0, #10
 8002982:	f008 ffd9 	bl	800b938 <OLED_ShowString>

				prevTime = currTime;
 8002986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002988:	64fb      	str	r3, [r7, #76]	; 0x4c
				leftTick_prev = leftTick;
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	657b      	str	r3, [r7, #84]	; 0x54
				rightTick_prev = rightTick;
 800298e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002990:	653b      	str	r3, [r7, #80]	; 0x50
			 currTime = HAL_GetTick();
 8002992:	e778      	b.n	8002886 <servoMotor+0x3a>
 8002994:	200002b0 	.word	0x200002b0
 8002998:	200002f8 	.word	0x200002f8
 800299c:	08010504 	.word	0x08010504
 80029a0:	08010510 	.word	0x08010510

080029a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029a8:	b672      	cpsid	i
}
 80029aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029ac:	e7fe      	b.n	80029ac <Error_Handler+0x8>
	...

080029b0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029b6:	2300      	movs	r3, #0
 80029b8:	607b      	str	r3, [r7, #4]
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <HAL_MspInit+0x54>)
 80029bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029be:	4a11      	ldr	r2, [pc, #68]	; (8002a04 <HAL_MspInit+0x54>)
 80029c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029c4:	6453      	str	r3, [r2, #68]	; 0x44
 80029c6:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_MspInit+0x54>)
 80029c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ce:	607b      	str	r3, [r7, #4]
 80029d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029d2:	2300      	movs	r3, #0
 80029d4:	603b      	str	r3, [r7, #0]
 80029d6:	4b0b      	ldr	r3, [pc, #44]	; (8002a04 <HAL_MspInit+0x54>)
 80029d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029da:	4a0a      	ldr	r2, [pc, #40]	; (8002a04 <HAL_MspInit+0x54>)
 80029dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029e0:	6413      	str	r3, [r2, #64]	; 0x40
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <HAL_MspInit+0x54>)
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029ee:	2200      	movs	r2, #0
 80029f0:	210f      	movs	r1, #15
 80029f2:	f06f 0001 	mvn.w	r0, #1
 80029f6:	f000 fc84 	bl	8003302 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b08a      	sub	sp, #40	; 0x28
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0314 	add.w	r3, r7, #20
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
 8002a1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_I2C_MspInit+0x94>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d134      	bne.n	8002a94 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_I2C_MspInit+0x98>)
 8002a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a32:	4a1b      	ldr	r2, [pc, #108]	; (8002aa0 <HAL_I2C_MspInit+0x98>)
 8002a34:	f043 0302 	orr.w	r3, r3, #2
 8002a38:	6313      	str	r3, [r2, #48]	; 0x30
 8002a3a:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_I2C_MspInit+0x98>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	613b      	str	r3, [r7, #16]
 8002a44:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_SCL_Pin|GYRO_SDA_Pin;
 8002a46:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a4c:	2312      	movs	r3, #18
 8002a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a54:	2303      	movs	r3, #3
 8002a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a58:	2304      	movs	r3, #4
 8002a5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4619      	mov	r1, r3
 8002a62:	4810      	ldr	r0, [pc, #64]	; (8002aa4 <HAL_I2C_MspInit+0x9c>)
 8002a64:	f000 fd24 	bl	80034b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_I2C_MspInit+0x98>)
 8002a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a70:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_I2C_MspInit+0x98>)
 8002a72:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a76:	6413      	str	r3, [r2, #64]	; 0x40
 8002a78:	4b09      	ldr	r3, [pc, #36]	; (8002aa0 <HAL_I2C_MspInit+0x98>)
 8002a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002a84:	2200      	movs	r2, #0
 8002a86:	2105      	movs	r1, #5
 8002a88:	201f      	movs	r0, #31
 8002a8a:	f000 fc3a 	bl	8003302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002a8e:	201f      	movs	r0, #31
 8002a90:	f000 fc53 	bl	800333a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002a94:	bf00      	nop
 8002a96:	3728      	adds	r7, #40	; 0x28
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40005400 	.word	0x40005400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020400 	.word	0x40020400

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08a      	sub	sp, #40	; 0x28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ab0:	f107 0314 	add.w	r3, r7, #20
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	605a      	str	r2, [r3, #4]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	60da      	str	r2, [r3, #12]
 8002abe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a23      	ldr	r2, [pc, #140]	; (8002b54 <HAL_TIM_Base_MspInit+0xac>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10e      	bne.n	8002ae8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	613b      	str	r3, [r7, #16]
 8002ace:	4b22      	ldr	r3, [pc, #136]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a21      	ldr	r2, [pc, #132]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b1f      	ldr	r3, [pc, #124]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
 8002ae4:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002ae6:	e030      	b.n	8002b4a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a1b      	ldr	r2, [pc, #108]	; (8002b5c <HAL_TIM_Base_MspInit+0xb4>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d12b      	bne.n	8002b4a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b18      	ldr	r3, [pc, #96]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002afc:	f043 0302 	orr.w	r3, r3, #2
 8002b00:	6453      	str	r3, [r2, #68]	; 0x44
 8002b02:	4b15      	ldr	r3, [pc, #84]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b11      	ldr	r3, [pc, #68]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b16:	4a10      	ldr	r2, [pc, #64]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b1e:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_TIM_Base_MspInit+0xb0>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	f003 0304 	and.w	r3, r3, #4
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8002b2a:	23c0      	movs	r3, #192	; 0xc0
 8002b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b2e:	2302      	movs	r3, #2
 8002b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b32:	2300      	movs	r3, #0
 8002b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b36:	2300      	movs	r3, #0
 8002b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4619      	mov	r1, r3
 8002b44:	4806      	ldr	r0, [pc, #24]	; (8002b60 <HAL_TIM_Base_MspInit+0xb8>)
 8002b46:	f000 fcb3 	bl	80034b0 <HAL_GPIO_Init>
}
 8002b4a:	bf00      	nop
 8002b4c:	3728      	adds	r7, #40	; 0x28
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	40010000 	.word	0x40010000
 8002b58:	40023800 	.word	0x40023800
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	40020800 	.word	0x40020800

08002b64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b08c      	sub	sp, #48	; 0x30
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b6c:	f107 031c 	add.w	r3, r7, #28
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]
 8002b74:	605a      	str	r2, [r3, #4]
 8002b76:	609a      	str	r2, [r3, #8]
 8002b78:	60da      	str	r2, [r3, #12]
 8002b7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d14b      	bne.n	8002c1e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b86:	2300      	movs	r3, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	4b3f      	ldr	r3, [pc, #252]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8e:	4a3e      	ldr	r2, [pc, #248]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	6413      	str	r3, [r2, #64]	; 0x40
 8002b96:	4b3c      	ldr	r3, [pc, #240]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	61bb      	str	r3, [r7, #24]
 8002ba0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	4b38      	ldr	r3, [pc, #224]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002baa:	4a37      	ldr	r2, [pc, #220]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bac:	f043 0301 	orr.w	r3, r3, #1
 8002bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bb2:	4b35      	ldr	r3, [pc, #212]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	f003 0301 	and.w	r3, r3, #1
 8002bba:	617b      	str	r3, [r7, #20]
 8002bbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	613b      	str	r3, [r7, #16]
 8002bc2:	4b31      	ldr	r3, [pc, #196]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	4a30      	ldr	r2, [pc, #192]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bc8:	f043 0302 	orr.w	r3, r3, #2
 8002bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bce:	4b2e      	ldr	r3, [pc, #184]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	613b      	str	r3, [r7, #16]
 8002bd8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002bda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002be0:	2302      	movs	r3, #2
 8002be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be8:	2300      	movs	r3, #0
 8002bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002bec:	2301      	movs	r3, #1
 8002bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bf0:	f107 031c 	add.w	r3, r7, #28
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4825      	ldr	r0, [pc, #148]	; (8002c8c <HAL_TIM_Encoder_MspInit+0x128>)
 8002bf8:	f000 fc5a 	bl	80034b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002bfc:	2308      	movs	r3, #8
 8002bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c00:	2302      	movs	r3, #2
 8002c02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c04:	2300      	movs	r3, #0
 8002c06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c10:	f107 031c 	add.w	r3, r7, #28
 8002c14:	4619      	mov	r1, r3
 8002c16:	481e      	ldr	r0, [pc, #120]	; (8002c90 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002c18:	f000 fc4a 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c1c:	e030      	b.n	8002c80 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1c      	ldr	r2, [pc, #112]	; (8002c94 <HAL_TIM_Encoder_MspInit+0x130>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d12b      	bne.n	8002c80 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c28:	2300      	movs	r3, #0
 8002c2a:	60fb      	str	r3, [r7, #12]
 8002c2c:	4b16      	ldr	r3, [pc, #88]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c30:	4a15      	ldr	r2, [pc, #84]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c32:	f043 0302 	orr.w	r3, r3, #2
 8002c36:	6413      	str	r3, [r2, #64]	; 0x40
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c44:	2300      	movs	r3, #0
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	4b0f      	ldr	r3, [pc, #60]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4c:	4a0e      	ldr	r2, [pc, #56]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6313      	str	r3, [r2, #48]	; 0x30
 8002c54:	4b0c      	ldr	r3, [pc, #48]	; (8002c88 <HAL_TIM_Encoder_MspInit+0x124>)
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	60bb      	str	r3, [r7, #8]
 8002c5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002c60:	23c0      	movs	r3, #192	; 0xc0
 8002c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c70:	2302      	movs	r3, #2
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c74:	f107 031c 	add.w	r3, r7, #28
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4804      	ldr	r0, [pc, #16]	; (8002c8c <HAL_TIM_Encoder_MspInit+0x128>)
 8002c7c:	f000 fc18 	bl	80034b0 <HAL_GPIO_Init>
}
 8002c80:	bf00      	nop
 8002c82:	3730      	adds	r7, #48	; 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40023800 	.word	0x40023800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40000400 	.word	0x40000400

08002c98 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca0:	f107 030c 	add.w	r3, r7, #12
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	609a      	str	r2, [r3, #8]
 8002cac:	60da      	str	r2, [r3, #12]
 8002cae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a12      	ldr	r2, [pc, #72]	; (8002d00 <HAL_TIM_MspPostInit+0x68>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d11e      	bne.n	8002cf8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60bb      	str	r3, [r7, #8]
 8002cbe:	4b11      	ldr	r3, [pc, #68]	; (8002d04 <HAL_TIM_MspPostInit+0x6c>)
 8002cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc2:	4a10      	ldr	r2, [pc, #64]	; (8002d04 <HAL_TIM_MspPostInit+0x6c>)
 8002cc4:	f043 0310 	orr.w	r3, r3, #16
 8002cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002cca:	4b0e      	ldr	r3, [pc, #56]	; (8002d04 <HAL_TIM_MspPostInit+0x6c>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f003 0310 	and.w	r3, r3, #16
 8002cd2:	60bb      	str	r3, [r7, #8]
 8002cd4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cda:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cec:	f107 030c 	add.w	r3, r7, #12
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4805      	ldr	r0, [pc, #20]	; (8002d08 <HAL_TIM_MspPostInit+0x70>)
 8002cf4:	f000 fbdc 	bl	80034b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cf8:	bf00      	nop
 8002cfa:	3720      	adds	r7, #32
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}
 8002d00:	40010000 	.word	0x40010000
 8002d04:	40023800 	.word	0x40023800
 8002d08:	40021000 	.word	0x40021000

08002d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 0314 	add.w	r3, r7, #20
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a1d      	ldr	r2, [pc, #116]	; (8002da0 <HAL_UART_MspInit+0x94>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d134      	bne.n	8002d98 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	613b      	str	r3, [r7, #16]
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <HAL_UART_MspInit+0x98>)
 8002d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d36:	4a1b      	ldr	r2, [pc, #108]	; (8002da4 <HAL_UART_MspInit+0x98>)
 8002d38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <HAL_UART_MspInit+0x98>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d46:	613b      	str	r3, [r7, #16]
 8002d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	4b15      	ldr	r3, [pc, #84]	; (8002da4 <HAL_UART_MspInit+0x98>)
 8002d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d52:	4a14      	ldr	r2, [pc, #80]	; (8002da4 <HAL_UART_MspInit+0x98>)
 8002d54:	f043 0304 	orr.w	r3, r3, #4
 8002d58:	6313      	str	r3, [r2, #48]	; 0x30
 8002d5a:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <HAL_UART_MspInit+0x98>)
 8002d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5e:	f003 0304 	and.w	r3, r3, #4
 8002d62:	60fb      	str	r3, [r7, #12]
 8002d64:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d66:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d6c:	2302      	movs	r3, #2
 8002d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d70:	2300      	movs	r3, #0
 8002d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d74:	2303      	movs	r3, #3
 8002d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d78:	2307      	movs	r3, #7
 8002d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d7c:	f107 0314 	add.w	r3, r7, #20
 8002d80:	4619      	mov	r1, r3
 8002d82:	4809      	ldr	r0, [pc, #36]	; (8002da8 <HAL_UART_MspInit+0x9c>)
 8002d84:	f000 fb94 	bl	80034b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	2105      	movs	r1, #5
 8002d8c:	2027      	movs	r0, #39	; 0x27
 8002d8e:	f000 fab8 	bl	8003302 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d92:	2027      	movs	r0, #39	; 0x27
 8002d94:	f000 fad1 	bl	800333a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d98:	bf00      	nop
 8002d9a:	3728      	adds	r7, #40	; 0x28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40004800 	.word	0x40004800
 8002da4:	40023800 	.word	0x40023800
 8002da8:	40020800 	.word	0x40020800

08002dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002db0:	e7fe      	b.n	8002db0 <NMI_Handler+0x4>

08002db2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002db2:	b480      	push	{r7}
 8002db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002db6:	e7fe      	b.n	8002db6 <HardFault_Handler+0x4>

08002db8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002db8:	b480      	push	{r7}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dbc:	e7fe      	b.n	8002dbc <MemManage_Handler+0x4>

08002dbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dc2:	e7fe      	b.n	8002dc2 <BusFault_Handler+0x4>

08002dc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dc8:	e7fe      	b.n	8002dc8 <UsageFault_Handler+0x4>

08002dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ddc:	f000 f972 	bl	80030c4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002de0:	f007 fadc 	bl	800a39c <xTaskGetSchedulerState>
 8002de4:	4603      	mov	r3, r0
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d001      	beq.n	8002dee <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002dea:	f008 f8c5 	bl	800af78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002df8:	4802      	ldr	r0, [pc, #8]	; (8002e04 <I2C1_EV_IRQHandler+0x10>)
 8002dfa:	f001 f98d 	bl	8004118 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002dfe:	bf00      	nop
 8002e00:	bd80      	pop	{r7, pc}
 8002e02:	bf00      	nop
 8002e04:	20000214 	.word	0x20000214

08002e08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002e0c:	4802      	ldr	r0, [pc, #8]	; (8002e18 <USART3_IRQHandler+0x10>)
 8002e0e:	f004 fe3f 	bl	8007a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000388 	.word	0x20000388

08002e1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
	return 1;
 8002e20:	2301      	movs	r3, #1
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <_kill>:

int _kill(int pid, int sig)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e36:	f008 fe3d 	bl	800bab4 <__errno>
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	2216      	movs	r2, #22
 8002e3e:	601a      	str	r2, [r3, #0]
	return -1;
 8002e40:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <_exit>:

void _exit (int status)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e54:	f04f 31ff 	mov.w	r1, #4294967295
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ffe7 	bl	8002e2c <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e5e:	e7fe      	b.n	8002e5e <_exit+0x12>

08002e60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b086      	sub	sp, #24
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
 8002e70:	e00a      	b.n	8002e88 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e72:	f3af 8000 	nop.w
 8002e76:	4601      	mov	r1, r0
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	60ba      	str	r2, [r7, #8]
 8002e7e:	b2ca      	uxtb	r2, r1
 8002e80:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	dbf0      	blt.n	8002e72 <_read+0x12>
	}

return len;
 8002e90:	687b      	ldr	r3, [r7, #4]
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b086      	sub	sp, #24
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	60f8      	str	r0, [r7, #12]
 8002ea2:	60b9      	str	r1, [r7, #8]
 8002ea4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
 8002eaa:	e009      	b.n	8002ec0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	1c5a      	adds	r2, r3, #1
 8002eb0:	60ba      	str	r2, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	617b      	str	r3, [r7, #20]
 8002ec0:	697a      	ldr	r2, [r7, #20]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	dbf1      	blt.n	8002eac <_write+0x12>
	}
	return len;
 8002ec8:	687b      	ldr	r3, [r7, #4]
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3718      	adds	r7, #24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <_close>:

int _close(int file)
{
 8002ed2:	b480      	push	{r7}
 8002ed4:	b083      	sub	sp, #12
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
	return -1;
 8002eda:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr

08002eea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
 8002ef2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002efa:	605a      	str	r2, [r3, #4]
	return 0;
 8002efc:	2300      	movs	r3, #0
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <_isatty>:

int _isatty(int file)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	b083      	sub	sp, #12
 8002f0e:	af00      	add	r7, sp, #0
 8002f10:	6078      	str	r0, [r7, #4]
	return 1;
 8002f12:	2301      	movs	r3, #1
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	60f8      	str	r0, [r7, #12]
 8002f28:	60b9      	str	r1, [r7, #8]
 8002f2a:	607a      	str	r2, [r7, #4]
	return 0;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
	...

08002f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b086      	sub	sp, #24
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f44:	4a14      	ldr	r2, [pc, #80]	; (8002f98 <_sbrk+0x5c>)
 8002f46:	4b15      	ldr	r3, [pc, #84]	; (8002f9c <_sbrk+0x60>)
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f50:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <_sbrk+0x64>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d102      	bne.n	8002f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f58:	4b11      	ldr	r3, [pc, #68]	; (8002fa0 <_sbrk+0x64>)
 8002f5a:	4a12      	ldr	r2, [pc, #72]	; (8002fa4 <_sbrk+0x68>)
 8002f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <_sbrk+0x64>)
 8002f60:	681a      	ldr	r2, [r3, #0]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4413      	add	r3, r2
 8002f66:	693a      	ldr	r2, [r7, #16]
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d207      	bcs.n	8002f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f6c:	f008 fda2 	bl	800bab4 <__errno>
 8002f70:	4603      	mov	r3, r0
 8002f72:	220c      	movs	r2, #12
 8002f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e009      	b.n	8002f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f7c:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <_sbrk+0x64>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <_sbrk+0x64>)
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4413      	add	r3, r2
 8002f8a:	4a05      	ldr	r2, [pc, #20]	; (8002fa0 <_sbrk+0x64>)
 8002f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	20020000 	.word	0x20020000
 8002f9c:	00000400 	.word	0x00000400
 8002fa0:	20000410 	.word	0x20000410
 8002fa4:	20006378 	.word	0x20006378

08002fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002fac:	4b06      	ldr	r3, [pc, #24]	; (8002fc8 <SystemInit+0x20>)
 8002fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb2:	4a05      	ldr	r2, [pc, #20]	; (8002fc8 <SystemInit+0x20>)
 8002fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fbc:	bf00      	nop
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	e000ed00 	.word	0xe000ed00

08002fcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003004 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fd0:	480d      	ldr	r0, [pc, #52]	; (8003008 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fd2:	490e      	ldr	r1, [pc, #56]	; (800300c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fd4:	4a0e      	ldr	r2, [pc, #56]	; (8003010 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fd8:	e002      	b.n	8002fe0 <LoopCopyDataInit>

08002fda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fdc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fde:	3304      	adds	r3, #4

08002fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fe0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fe2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fe4:	d3f9      	bcc.n	8002fda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fe6:	4a0b      	ldr	r2, [pc, #44]	; (8003014 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fe8:	4c0b      	ldr	r4, [pc, #44]	; (8003018 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fec:	e001      	b.n	8002ff2 <LoopFillZerobss>

08002fee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ff0:	3204      	adds	r2, #4

08002ff2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ff2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ff4:	d3fb      	bcc.n	8002fee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002ff6:	f7ff ffd7 	bl	8002fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002ffa:	f008 fd61 	bl	800bac0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002ffe:	f7fe fb79 	bl	80016f4 <main>
  bx  lr    
 8003002:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003004:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003008:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800300c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8003010:	08011564 	.word	0x08011564
  ldr r2, =_sbss
 8003014:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8003018:	20006378 	.word	0x20006378

0800301c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800301c:	e7fe      	b.n	800301c <ADC_IRQHandler>
	...

08003020 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003024:	4b0e      	ldr	r3, [pc, #56]	; (8003060 <HAL_Init+0x40>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a0d      	ldr	r2, [pc, #52]	; (8003060 <HAL_Init+0x40>)
 800302a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800302e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003030:	4b0b      	ldr	r3, [pc, #44]	; (8003060 <HAL_Init+0x40>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a0a      	ldr	r2, [pc, #40]	; (8003060 <HAL_Init+0x40>)
 8003036:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800303a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <HAL_Init+0x40>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a07      	ldr	r2, [pc, #28]	; (8003060 <HAL_Init+0x40>)
 8003042:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003046:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f000 f94f 	bl	80032ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800304e:	200f      	movs	r0, #15
 8003050:	f000 f808 	bl	8003064 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003054:	f7ff fcac 	bl	80029b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003058:	2300      	movs	r3, #0
}
 800305a:	4618      	mov	r0, r3
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	40023c00 	.word	0x40023c00

08003064 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_InitTick+0x54>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4b12      	ldr	r3, [pc, #72]	; (80030bc <HAL_InitTick+0x58>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4619      	mov	r1, r3
 8003076:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800307a:	fbb3 f3f1 	udiv	r3, r3, r1
 800307e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f967 	bl	8003356 <HAL_SYSTICK_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d001      	beq.n	8003092 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e00e      	b.n	80030b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2b0f      	cmp	r3, #15
 8003096:	d80a      	bhi.n	80030ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003098:	2200      	movs	r2, #0
 800309a:	6879      	ldr	r1, [r7, #4]
 800309c:	f04f 30ff 	mov.w	r0, #4294967295
 80030a0:	f000 f92f 	bl	8003302 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030a4:	4a06      	ldr	r2, [pc, #24]	; (80030c0 <HAL_InitTick+0x5c>)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3708      	adds	r7, #8
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	20000000 	.word	0x20000000
 80030bc:	20000008 	.word	0x20000008
 80030c0:	20000004 	.word	0x20000004

080030c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030c8:	4b06      	ldr	r3, [pc, #24]	; (80030e4 <HAL_IncTick+0x20>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	4b06      	ldr	r3, [pc, #24]	; (80030e8 <HAL_IncTick+0x24>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4413      	add	r3, r2
 80030d4:	4a04      	ldr	r2, [pc, #16]	; (80030e8 <HAL_IncTick+0x24>)
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	20000008 	.word	0x20000008
 80030e8:	20000414 	.word	0x20000414

080030ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030ec:	b480      	push	{r7}
 80030ee:	af00      	add	r7, sp, #0
  return uwTick;
 80030f0:	4b03      	ldr	r3, [pc, #12]	; (8003100 <HAL_GetTick+0x14>)
 80030f2:	681b      	ldr	r3, [r3, #0]
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr
 80030fe:	bf00      	nop
 8003100:	20000414 	.word	0x20000414

08003104 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800310c:	f7ff ffee 	bl	80030ec <HAL_GetTick>
 8003110:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800311c:	d005      	beq.n	800312a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800311e:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <HAL_Delay+0x44>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800312a:	bf00      	nop
 800312c:	f7ff ffde 	bl	80030ec <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	68fa      	ldr	r2, [r7, #12]
 8003138:	429a      	cmp	r2, r3
 800313a:	d8f7      	bhi.n	800312c <HAL_Delay+0x28>
  {
  }
}
 800313c:	bf00      	nop
 800313e:	bf00      	nop
 8003140:	3710      	adds	r7, #16
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	20000008 	.word	0x20000008

0800314c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800315c:	4b0c      	ldr	r3, [pc, #48]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003168:	4013      	ands	r3, r2
 800316a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003174:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003178:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800317c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800317e:	4a04      	ldr	r2, [pc, #16]	; (8003190 <__NVIC_SetPriorityGrouping+0x44>)
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	60d3      	str	r3, [r2, #12]
}
 8003184:	bf00      	nop
 8003186:	3714      	adds	r7, #20
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr
 8003190:	e000ed00 	.word	0xe000ed00

08003194 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003198:	4b04      	ldr	r3, [pc, #16]	; (80031ac <__NVIC_GetPriorityGrouping+0x18>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0a1b      	lsrs	r3, r3, #8
 800319e:	f003 0307 	and.w	r3, r3, #7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	e000ed00 	.word	0xe000ed00

080031b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	4603      	mov	r3, r0
 80031b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	db0b      	blt.n	80031da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031c2:	79fb      	ldrb	r3, [r7, #7]
 80031c4:	f003 021f 	and.w	r2, r3, #31
 80031c8:	4907      	ldr	r1, [pc, #28]	; (80031e8 <__NVIC_EnableIRQ+0x38>)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	095b      	lsrs	r3, r3, #5
 80031d0:	2001      	movs	r0, #1
 80031d2:	fa00 f202 	lsl.w	r2, r0, r2
 80031d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031da:	bf00      	nop
 80031dc:	370c      	adds	r7, #12
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	e000e100 	.word	0xe000e100

080031ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	6039      	str	r1, [r7, #0]
 80031f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	db0a      	blt.n	8003216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	b2da      	uxtb	r2, r3
 8003204:	490c      	ldr	r1, [pc, #48]	; (8003238 <__NVIC_SetPriority+0x4c>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	0112      	lsls	r2, r2, #4
 800320c:	b2d2      	uxtb	r2, r2
 800320e:	440b      	add	r3, r1
 8003210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003214:	e00a      	b.n	800322c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	b2da      	uxtb	r2, r3
 800321a:	4908      	ldr	r1, [pc, #32]	; (800323c <__NVIC_SetPriority+0x50>)
 800321c:	79fb      	ldrb	r3, [r7, #7]
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	3b04      	subs	r3, #4
 8003224:	0112      	lsls	r2, r2, #4
 8003226:	b2d2      	uxtb	r2, r2
 8003228:	440b      	add	r3, r1
 800322a:	761a      	strb	r2, [r3, #24]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	e000e100 	.word	0xe000e100
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003240:	b480      	push	{r7}
 8003242:	b089      	sub	sp, #36	; 0x24
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	f1c3 0307 	rsb	r3, r3, #7
 800325a:	2b04      	cmp	r3, #4
 800325c:	bf28      	it	cs
 800325e:	2304      	movcs	r3, #4
 8003260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	3304      	adds	r3, #4
 8003266:	2b06      	cmp	r3, #6
 8003268:	d902      	bls.n	8003270 <NVIC_EncodePriority+0x30>
 800326a:	69fb      	ldr	r3, [r7, #28]
 800326c:	3b03      	subs	r3, #3
 800326e:	e000      	b.n	8003272 <NVIC_EncodePriority+0x32>
 8003270:	2300      	movs	r3, #0
 8003272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003274:	f04f 32ff 	mov.w	r2, #4294967295
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	fa02 f303 	lsl.w	r3, r2, r3
 800327e:	43da      	mvns	r2, r3
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	401a      	ands	r2, r3
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003288:	f04f 31ff 	mov.w	r1, #4294967295
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	fa01 f303 	lsl.w	r3, r1, r3
 8003292:	43d9      	mvns	r1, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003298:	4313      	orrs	r3, r2
         );
}
 800329a:	4618      	mov	r0, r3
 800329c:	3724      	adds	r7, #36	; 0x24
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
	...

080032a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b082      	sub	sp, #8
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3b01      	subs	r3, #1
 80032b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032b8:	d301      	bcc.n	80032be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032ba:	2301      	movs	r3, #1
 80032bc:	e00f      	b.n	80032de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032be:	4a0a      	ldr	r2, [pc, #40]	; (80032e8 <SysTick_Config+0x40>)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032c6:	210f      	movs	r1, #15
 80032c8:	f04f 30ff 	mov.w	r0, #4294967295
 80032cc:	f7ff ff8e 	bl	80031ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032d0:	4b05      	ldr	r3, [pc, #20]	; (80032e8 <SysTick_Config+0x40>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032d6:	4b04      	ldr	r3, [pc, #16]	; (80032e8 <SysTick_Config+0x40>)
 80032d8:	2207      	movs	r2, #7
 80032da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	3708      	adds	r7, #8
 80032e2:	46bd      	mov	sp, r7
 80032e4:	bd80      	pop	{r7, pc}
 80032e6:	bf00      	nop
 80032e8:	e000e010 	.word	0xe000e010

080032ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b082      	sub	sp, #8
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7ff ff29 	bl	800314c <__NVIC_SetPriorityGrouping>
}
 80032fa:	bf00      	nop
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}

08003302 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003302:	b580      	push	{r7, lr}
 8003304:	b086      	sub	sp, #24
 8003306:	af00      	add	r7, sp, #0
 8003308:	4603      	mov	r3, r0
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003314:	f7ff ff3e 	bl	8003194 <__NVIC_GetPriorityGrouping>
 8003318:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	68b9      	ldr	r1, [r7, #8]
 800331e:	6978      	ldr	r0, [r7, #20]
 8003320:	f7ff ff8e 	bl	8003240 <NVIC_EncodePriority>
 8003324:	4602      	mov	r2, r0
 8003326:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff ff5d 	bl	80031ec <__NVIC_SetPriority>
}
 8003332:	bf00      	nop
 8003334:	3718      	adds	r7, #24
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	4603      	mov	r3, r0
 8003342:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003348:	4618      	mov	r0, r3
 800334a:	f7ff ff31 	bl	80031b0 <__NVIC_EnableIRQ>
}
 800334e:	bf00      	nop
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f7ff ffa2 	bl	80032a8 <SysTick_Config>
 8003364:	4603      	mov	r3, r0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b084      	sub	sp, #16
 8003372:	af00      	add	r7, sp, #0
 8003374:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800337a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800337c:	f7ff feb6 	bl	80030ec <HAL_GetTick>
 8003380:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b02      	cmp	r3, #2
 800338c:	d008      	beq.n	80033a0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2280      	movs	r2, #128	; 0x80
 8003392:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e052      	b.n	8003446 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0216 	bic.w	r2, r2, #22
 80033ae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033be:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d103      	bne.n	80033d0 <HAL_DMA_Abort+0x62>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d007      	beq.n	80033e0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0208 	bic.w	r2, r2, #8
 80033de:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80033f0:	e013      	b.n	800341a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033f2:	f7ff fe7b 	bl	80030ec <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b05      	cmp	r3, #5
 80033fe:	d90c      	bls.n	800341a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2203      	movs	r2, #3
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e015      	b.n	8003446 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0301 	and.w	r3, r3, #1
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1e4      	bne.n	80033f2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800342c:	223f      	movs	r2, #63	; 0x3f
 800342e:	409a      	lsls	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d004      	beq.n	800346c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e00c      	b.n	8003486 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2205      	movs	r2, #5
 8003470:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f022 0201 	bic.w	r2, r2, #1
 8003482:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr

08003492 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003492:	b480      	push	{r7}
 8003494:	b083      	sub	sp, #12
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b089      	sub	sp, #36	; 0x24
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034be:	2300      	movs	r3, #0
 80034c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034c2:	2300      	movs	r3, #0
 80034c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034c6:	2300      	movs	r3, #0
 80034c8:	61fb      	str	r3, [r7, #28]
 80034ca:	e16b      	b.n	80037a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034cc:	2201      	movs	r2, #1
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4013      	ands	r3, r2
 80034de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034e0:	693a      	ldr	r2, [r7, #16]
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f040 815a 	bne.w	800379e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d005      	beq.n	8003502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d130      	bne.n	8003564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003508:	69fb      	ldr	r3, [r7, #28]
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	2203      	movs	r2, #3
 800350e:	fa02 f303 	lsl.w	r3, r2, r3
 8003512:	43db      	mvns	r3, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4013      	ands	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4313      	orrs	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69ba      	ldr	r2, [r7, #24]
 8003530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003538:	2201      	movs	r2, #1
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	091b      	lsrs	r3, r3, #4
 800354e:	f003 0201 	and.w	r2, r3, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f003 0303 	and.w	r3, r3, #3
 800356c:	2b03      	cmp	r3, #3
 800356e:	d017      	beq.n	80035a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	68db      	ldr	r3, [r3, #12]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	005b      	lsls	r3, r3, #1
 800357a:	2203      	movs	r2, #3
 800357c:	fa02 f303 	lsl.w	r3, r2, r3
 8003580:	43db      	mvns	r3, r3
 8003582:	69ba      	ldr	r2, [r7, #24]
 8003584:	4013      	ands	r3, r2
 8003586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	fa02 f303 	lsl.w	r3, r2, r3
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	4313      	orrs	r3, r2
 8003598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f003 0303 	and.w	r3, r3, #3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d123      	bne.n	80035f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	08da      	lsrs	r2, r3, #3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	3208      	adds	r2, #8
 80035b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	f003 0307 	and.w	r3, r3, #7
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	220f      	movs	r2, #15
 80035c4:	fa02 f303 	lsl.w	r3, r2, r3
 80035c8:	43db      	mvns	r3, r3
 80035ca:	69ba      	ldr	r2, [r7, #24]
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	f003 0307 	and.w	r3, r3, #7
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	4313      	orrs	r3, r2
 80035e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	08da      	lsrs	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3208      	adds	r2, #8
 80035ee:	69b9      	ldr	r1, [r7, #24]
 80035f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	005b      	lsls	r3, r3, #1
 80035fe:	2203      	movs	r2, #3
 8003600:	fa02 f303 	lsl.w	r3, r2, r3
 8003604:	43db      	mvns	r3, r3
 8003606:	69ba      	ldr	r2, [r7, #24]
 8003608:	4013      	ands	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0203 	and.w	r2, r3, #3
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	005b      	lsls	r3, r3, #1
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	69ba      	ldr	r2, [r7, #24]
 800361e:	4313      	orrs	r3, r2
 8003620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 80b4 	beq.w	800379e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	4b60      	ldr	r3, [pc, #384]	; (80037bc <HAL_GPIO_Init+0x30c>)
 800363c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363e:	4a5f      	ldr	r2, [pc, #380]	; (80037bc <HAL_GPIO_Init+0x30c>)
 8003640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003644:	6453      	str	r3, [r2, #68]	; 0x44
 8003646:	4b5d      	ldr	r3, [pc, #372]	; (80037bc <HAL_GPIO_Init+0x30c>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003652:	4a5b      	ldr	r2, [pc, #364]	; (80037c0 <HAL_GPIO_Init+0x310>)
 8003654:	69fb      	ldr	r3, [r7, #28]
 8003656:	089b      	lsrs	r3, r3, #2
 8003658:	3302      	adds	r3, #2
 800365a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800365e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003660:	69fb      	ldr	r3, [r7, #28]
 8003662:	f003 0303 	and.w	r3, r3, #3
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	220f      	movs	r2, #15
 800366a:	fa02 f303 	lsl.w	r3, r2, r3
 800366e:	43db      	mvns	r3, r3
 8003670:	69ba      	ldr	r2, [r7, #24]
 8003672:	4013      	ands	r3, r2
 8003674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a52      	ldr	r2, [pc, #328]	; (80037c4 <HAL_GPIO_Init+0x314>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d02b      	beq.n	80036d6 <HAL_GPIO_Init+0x226>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a51      	ldr	r2, [pc, #324]	; (80037c8 <HAL_GPIO_Init+0x318>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d025      	beq.n	80036d2 <HAL_GPIO_Init+0x222>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a50      	ldr	r2, [pc, #320]	; (80037cc <HAL_GPIO_Init+0x31c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d01f      	beq.n	80036ce <HAL_GPIO_Init+0x21e>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a4f      	ldr	r2, [pc, #316]	; (80037d0 <HAL_GPIO_Init+0x320>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d019      	beq.n	80036ca <HAL_GPIO_Init+0x21a>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a4e      	ldr	r2, [pc, #312]	; (80037d4 <HAL_GPIO_Init+0x324>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d013      	beq.n	80036c6 <HAL_GPIO_Init+0x216>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a4d      	ldr	r2, [pc, #308]	; (80037d8 <HAL_GPIO_Init+0x328>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d00d      	beq.n	80036c2 <HAL_GPIO_Init+0x212>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4c      	ldr	r2, [pc, #304]	; (80037dc <HAL_GPIO_Init+0x32c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d007      	beq.n	80036be <HAL_GPIO_Init+0x20e>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4b      	ldr	r2, [pc, #300]	; (80037e0 <HAL_GPIO_Init+0x330>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_GPIO_Init+0x20a>
 80036b6:	2307      	movs	r3, #7
 80036b8:	e00e      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ba:	2308      	movs	r3, #8
 80036bc:	e00c      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036be:	2306      	movs	r3, #6
 80036c0:	e00a      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036c2:	2305      	movs	r3, #5
 80036c4:	e008      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036c6:	2304      	movs	r3, #4
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ca:	2303      	movs	r3, #3
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x228>
 80036d6:	2300      	movs	r3, #0
 80036d8:	69fa      	ldr	r2, [r7, #28]
 80036da:	f002 0203 	and.w	r2, r2, #3
 80036de:	0092      	lsls	r2, r2, #2
 80036e0:	4093      	lsls	r3, r2
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e8:	4935      	ldr	r1, [pc, #212]	; (80037c0 <HAL_GPIO_Init+0x310>)
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3302      	adds	r3, #2
 80036f0:	69ba      	ldr	r2, [r7, #24]
 80036f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f6:	4b3b      	ldr	r3, [pc, #236]	; (80037e4 <HAL_GPIO_Init+0x334>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	43db      	mvns	r3, r3
 8003700:	69ba      	ldr	r2, [r7, #24]
 8003702:	4013      	ands	r3, r2
 8003704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003712:	69ba      	ldr	r2, [r7, #24]
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	4313      	orrs	r3, r2
 8003718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800371a:	4a32      	ldr	r2, [pc, #200]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003720:	4b30      	ldr	r3, [pc, #192]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	43db      	mvns	r3, r3
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	4013      	ands	r3, r2
 800372e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	4313      	orrs	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003744:	4a27      	ldr	r2, [pc, #156]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003746:	69bb      	ldr	r3, [r7, #24]
 8003748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800374a:	4b26      	ldr	r3, [pc, #152]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	43db      	mvns	r3, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4013      	ands	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d003      	beq.n	800376e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003766:	69ba      	ldr	r2, [r7, #24]
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	4313      	orrs	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376e:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003774:	4b1b      	ldr	r3, [pc, #108]	; (80037e4 <HAL_GPIO_Init+0x334>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800377a:	693b      	ldr	r3, [r7, #16]
 800377c:	43db      	mvns	r3, r3
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	4013      	ands	r3, r2
 8003782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4313      	orrs	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003798:	4a12      	ldr	r2, [pc, #72]	; (80037e4 <HAL_GPIO_Init+0x334>)
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	3301      	adds	r3, #1
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b0f      	cmp	r3, #15
 80037a8:	f67f ae90 	bls.w	80034cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	3724      	adds	r7, #36	; 0x24
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
 80037ba:	bf00      	nop
 80037bc:	40023800 	.word	0x40023800
 80037c0:	40013800 	.word	0x40013800
 80037c4:	40020000 	.word	0x40020000
 80037c8:	40020400 	.word	0x40020400
 80037cc:	40020800 	.word	0x40020800
 80037d0:	40020c00 	.word	0x40020c00
 80037d4:	40021000 	.word	0x40021000
 80037d8:	40021400 	.word	0x40021400
 80037dc:	40021800 	.word	0x40021800
 80037e0:	40021c00 	.word	0x40021c00
 80037e4:	40013c00 	.word	0x40013c00

080037e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
 80037f0:	460b      	mov	r3, r1
 80037f2:	807b      	strh	r3, [r7, #2]
 80037f4:	4613      	mov	r3, r2
 80037f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037f8:	787b      	ldrb	r3, [r7, #1]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037fe:	887a      	ldrh	r2, [r7, #2]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003804:	e003      	b.n	800380e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003806:	887b      	ldrh	r3, [r7, #2]
 8003808:	041a      	lsls	r2, r3, #16
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	619a      	str	r2, [r3, #24]
}
 800380e:	bf00      	nop
 8003810:	370c      	adds	r7, #12
 8003812:	46bd      	mov	sp, r7
 8003814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003818:	4770      	bx	lr

0800381a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800381a:	b480      	push	{r7}
 800381c:	b085      	sub	sp, #20
 800381e:	af00      	add	r7, sp, #0
 8003820:	6078      	str	r0, [r7, #4]
 8003822:	460b      	mov	r3, r1
 8003824:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	695b      	ldr	r3, [r3, #20]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800382c:	887a      	ldrh	r2, [r7, #2]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	4013      	ands	r3, r2
 8003832:	041a      	lsls	r2, r3, #16
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	43d9      	mvns	r1, r3
 8003838:	887b      	ldrh	r3, [r7, #2]
 800383a:	400b      	ands	r3, r1
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	619a      	str	r2, [r3, #24]
}
 8003842:	bf00      	nop
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	e12b      	b.n	8003aba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d106      	bne.n	800387c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f7ff f8c6 	bl	8002a08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2224      	movs	r2, #36	; 0x24
 8003880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f022 0201 	bic.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038b4:	f002 ffa8 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 80038b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4a81      	ldr	r2, [pc, #516]	; (8003ac4 <HAL_I2C_Init+0x274>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d807      	bhi.n	80038d4 <HAL_I2C_Init+0x84>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4a80      	ldr	r2, [pc, #512]	; (8003ac8 <HAL_I2C_Init+0x278>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	bf94      	ite	ls
 80038cc:	2301      	movls	r3, #1
 80038ce:	2300      	movhi	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e006      	b.n	80038e2 <HAL_I2C_Init+0x92>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	4a7d      	ldr	r2, [pc, #500]	; (8003acc <HAL_I2C_Init+0x27c>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	bf94      	ite	ls
 80038dc:	2301      	movls	r3, #1
 80038de:	2300      	movhi	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0e7      	b.n	8003aba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a78      	ldr	r2, [pc, #480]	; (8003ad0 <HAL_I2C_Init+0x280>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0c9b      	lsrs	r3, r3, #18
 80038f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	68ba      	ldr	r2, [r7, #8]
 8003906:	430a      	orrs	r2, r1
 8003908:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6a1b      	ldr	r3, [r3, #32]
 8003910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4a6a      	ldr	r2, [pc, #424]	; (8003ac4 <HAL_I2C_Init+0x274>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d802      	bhi.n	8003924 <HAL_I2C_Init+0xd4>
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	3301      	adds	r3, #1
 8003922:	e009      	b.n	8003938 <HAL_I2C_Init+0xe8>
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800392a:	fb02 f303 	mul.w	r3, r2, r3
 800392e:	4a69      	ldr	r2, [pc, #420]	; (8003ad4 <HAL_I2C_Init+0x284>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	099b      	lsrs	r3, r3, #6
 8003936:	3301      	adds	r3, #1
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800394a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	495c      	ldr	r1, [pc, #368]	; (8003ac4 <HAL_I2C_Init+0x274>)
 8003954:	428b      	cmp	r3, r1
 8003956:	d819      	bhi.n	800398c <HAL_I2C_Init+0x13c>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1e59      	subs	r1, r3, #1
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	fbb1 f3f3 	udiv	r3, r1, r3
 8003966:	1c59      	adds	r1, r3, #1
 8003968:	f640 73fc 	movw	r3, #4092	; 0xffc
 800396c:	400b      	ands	r3, r1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_I2C_Init+0x138>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	1e59      	subs	r1, r3, #1
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	005b      	lsls	r3, r3, #1
 800397c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003980:	3301      	adds	r3, #1
 8003982:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003986:	e051      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 8003988:	2304      	movs	r3, #4
 800398a:	e04f      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d111      	bne.n	80039b8 <HAL_I2C_Init+0x168>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	1e58      	subs	r0, r3, #1
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6859      	ldr	r1, [r3, #4]
 800399c:	460b      	mov	r3, r1
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	440b      	add	r3, r1
 80039a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a6:	3301      	adds	r3, #1
 80039a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	bf0c      	ite	eq
 80039b0:	2301      	moveq	r3, #1
 80039b2:	2300      	movne	r3, #0
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	e012      	b.n	80039de <HAL_I2C_Init+0x18e>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1e58      	subs	r0, r3, #1
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6859      	ldr	r1, [r3, #4]
 80039c0:	460b      	mov	r3, r1
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	0099      	lsls	r1, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ce:	3301      	adds	r3, #1
 80039d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bf0c      	ite	eq
 80039d8:	2301      	moveq	r3, #1
 80039da:	2300      	movne	r3, #0
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_I2C_Init+0x196>
 80039e2:	2301      	movs	r3, #1
 80039e4:	e022      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d10e      	bne.n	8003a0c <HAL_I2C_Init+0x1bc>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1e58      	subs	r0, r3, #1
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6859      	ldr	r1, [r3, #4]
 80039f6:	460b      	mov	r3, r1
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	440b      	add	r3, r1
 80039fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a00:	3301      	adds	r3, #1
 8003a02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a06:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a0a:	e00f      	b.n	8003a2c <HAL_I2C_Init+0x1dc>
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	1e58      	subs	r0, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6859      	ldr	r1, [r3, #4]
 8003a14:	460b      	mov	r3, r1
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	440b      	add	r3, r1
 8003a1a:	0099      	lsls	r1, r3, #2
 8003a1c:	440b      	add	r3, r1
 8003a1e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a22:	3301      	adds	r3, #1
 8003a24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a2c:	6879      	ldr	r1, [r7, #4]
 8003a2e:	6809      	ldr	r1, [r1, #0]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	69da      	ldr	r2, [r3, #28]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a5a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6911      	ldr	r1, [r2, #16]
 8003a62:	687a      	ldr	r2, [r7, #4]
 8003a64:	68d2      	ldr	r2, [r2, #12]
 8003a66:	4311      	orrs	r1, r2
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	6812      	ldr	r2, [r2, #0]
 8003a6c:	430b      	orrs	r3, r1
 8003a6e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68db      	ldr	r3, [r3, #12]
 8003a76:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695a      	ldr	r2, [r3, #20]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	699b      	ldr	r3, [r3, #24]
 8003a82:	431a      	orrs	r2, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f042 0201 	orr.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}
 8003ac2:	bf00      	nop
 8003ac4:	000186a0 	.word	0x000186a0
 8003ac8:	001e847f 	.word	0x001e847f
 8003acc:	003d08ff 	.word	0x003d08ff
 8003ad0:	431bde83 	.word	0x431bde83
 8003ad4:	10624dd3 	.word	0x10624dd3

08003ad8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	460b      	mov	r3, r1
 8003aec:	813b      	strh	r3, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af2:	f7ff fafb 	bl	80030ec <HAL_GetTick>
 8003af6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	f040 80d9 	bne.w	8003cb8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2319      	movs	r3, #25
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	496d      	ldr	r1, [pc, #436]	; (8003cc4 <HAL_I2C_Mem_Write+0x1ec>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f001 fff7 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e0cc      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Mem_Write+0x56>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0c5      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d007      	beq.n	8003b54 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2221      	movs	r2, #33	; 0x21
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	; 0x40
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6a3a      	ldr	r2, [r7, #32]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b84:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a4d      	ldr	r2, [pc, #308]	; (8003cc8 <HAL_I2C_Mem_Write+0x1f0>)
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b96:	88f8      	ldrh	r0, [r7, #6]
 8003b98:	893a      	ldrh	r2, [r7, #8]
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f001 fd86 	bl	80056b8 <I2C_RequestMemoryWrite>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d052      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e081      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bb6:	697a      	ldr	r2, [r7, #20]
 8003bb8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f002 f878 	bl	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00d      	beq.n	8003be2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bca:	2b04      	cmp	r3, #4
 8003bcc:	d107      	bne.n	8003bde <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bdc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e06b      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	781a      	ldrb	r2, [r3, #0]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	3b01      	subs	r3, #1
 8003c0c:	b29a      	uxth	r2, r3
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	f003 0304 	and.w	r3, r3, #4
 8003c1c:	2b04      	cmp	r3, #4
 8003c1e:	d11b      	bne.n	8003c58 <HAL_I2C_Mem_Write+0x180>
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d017      	beq.n	8003c58 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	781a      	ldrb	r2, [r3, #0]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c5a      	adds	r2, r3, #1
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c42:	3b01      	subs	r3, #1
 8003c44:	b29a      	uxth	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c4e:	b29b      	uxth	r3, r3
 8003c50:	3b01      	subs	r3, #1
 8003c52:	b29a      	uxth	r2, r3
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d1aa      	bne.n	8003bb6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f002 f864 	bl	8005d32 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d00d      	beq.n	8003c8c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d107      	bne.n	8003c88 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c86:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e016      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	e000      	b.n	8003cba <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003cb8:	2302      	movs	r3, #2
  }
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	00100002 	.word	0x00100002
 8003cc8:	ffff0000 	.word	0xffff0000

08003ccc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08c      	sub	sp, #48	; 0x30
 8003cd0:	af02      	add	r7, sp, #8
 8003cd2:	60f8      	str	r0, [r7, #12]
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	4611      	mov	r1, r2
 8003cd8:	461a      	mov	r2, r3
 8003cda:	4603      	mov	r3, r0
 8003cdc:	817b      	strh	r3, [r7, #10]
 8003cde:	460b      	mov	r3, r1
 8003ce0:	813b      	strh	r3, [r7, #8]
 8003ce2:	4613      	mov	r3, r2
 8003ce4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ce6:	f7ff fa01 	bl	80030ec <HAL_GetTick>
 8003cea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b20      	cmp	r3, #32
 8003cf6:	f040 8208 	bne.w	800410a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	2319      	movs	r3, #25
 8003d00:	2201      	movs	r2, #1
 8003d02:	497b      	ldr	r1, [pc, #492]	; (8003ef0 <HAL_I2C_Mem_Read+0x224>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f001 fefd 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003d10:	2302      	movs	r3, #2
 8003d12:	e1fb      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_I2C_Mem_Read+0x56>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e1f4      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d007      	beq.n	8003d48 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2222      	movs	r2, #34	; 0x22
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2240      	movs	r2, #64	; 0x40
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003d78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4a5b      	ldr	r2, [pc, #364]	; (8003ef4 <HAL_I2C_Mem_Read+0x228>)
 8003d88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d8a:	88f8      	ldrh	r0, [r7, #6]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	8979      	ldrh	r1, [r7, #10]
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	9301      	str	r3, [sp, #4]
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	9300      	str	r3, [sp, #0]
 8003d98:	4603      	mov	r3, r0
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f001 fd22 	bl	80057e4 <I2C_RequestMemoryRead>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e1b0      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d113      	bne.n	8003dda <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003db2:	2300      	movs	r3, #0
 8003db4:	623b      	str	r3, [r7, #32]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695b      	ldr	r3, [r3, #20]
 8003dbc:	623b      	str	r3, [r7, #32]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	623b      	str	r3, [r7, #32]
 8003dc6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681a      	ldr	r2, [r3, #0]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	e184      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d11b      	bne.n	8003e1a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	681a      	ldr	r2, [r3, #0]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	695b      	ldr	r3, [r3, #20]
 8003dfc:	61fb      	str	r3, [r7, #28]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	699b      	ldr	r3, [r3, #24]
 8003e04:	61fb      	str	r3, [r7, #28]
 8003e06:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	e164      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d11b      	bne.n	8003e5a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e30:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e40:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e42:	2300      	movs	r3, #0
 8003e44:	61bb      	str	r3, [r7, #24]
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	695b      	ldr	r3, [r3, #20]
 8003e4c:	61bb      	str	r3, [r7, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	699b      	ldr	r3, [r3, #24]
 8003e54:	61bb      	str	r3, [r7, #24]
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	e144      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	695b      	ldr	r3, [r3, #20]
 8003e64:	617b      	str	r3, [r7, #20]
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	699b      	ldr	r3, [r3, #24]
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e70:	e138      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e76:	2b03      	cmp	r3, #3
 8003e78:	f200 80f1 	bhi.w	800405e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d123      	bne.n	8003ecc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e86:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e88:	68f8      	ldr	r0, [r7, #12]
 8003e8a:	f001 ffc5 	bl	8005e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d001      	beq.n	8003e98 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003e94:	2301      	movs	r3, #1
 8003e96:	e139      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	691a      	ldr	r2, [r3, #16]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	b2d2      	uxtb	r2, r2
 8003ea4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eb4:	3b01      	subs	r3, #1
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003eca:	e10b      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	2b02      	cmp	r3, #2
 8003ed2:	d14e      	bne.n	8003f72 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eda:	2200      	movs	r2, #0
 8003edc:	4906      	ldr	r1, [pc, #24]	; (8003ef8 <HAL_I2C_Mem_Read+0x22c>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f001 fe10 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d008      	beq.n	8003efc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e10e      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
 8003eee:	bf00      	nop
 8003ef0:	00100002 	.word	0x00100002
 8003ef4:	ffff0000 	.word	0xffff0000
 8003ef8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691a      	ldr	r2, [r3, #16]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	b2d2      	uxtb	r2, r2
 8003f18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1e:	1c5a      	adds	r2, r3, #1
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f28:	3b01      	subs	r3, #1
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f70:	e0b8      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f78:	2200      	movs	r2, #0
 8003f7a:	4966      	ldr	r1, [pc, #408]	; (8004114 <HAL_I2C_Mem_Read+0x448>)
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f001 fdc1 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e0bf      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	691a      	ldr	r2, [r3, #16]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	b2d2      	uxtb	r2, r2
 8003fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	3b01      	subs	r3, #1
 8003fc8:	b29a      	uxth	r2, r3
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	494f      	ldr	r1, [pc, #316]	; (8004114 <HAL_I2C_Mem_Read+0x448>)
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f001 fd93 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8003fde:	4603      	mov	r3, r0
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d001      	beq.n	8003fe8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e091      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ff6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	691a      	ldr	r2, [r3, #16]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400a:	1c5a      	adds	r2, r3, #1
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	691a      	ldr	r2, [r3, #16]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004034:	b2d2      	uxtb	r2, r2
 8004036:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	1c5a      	adds	r2, r3, #1
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004046:	3b01      	subs	r3, #1
 8004048:	b29a      	uxth	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004052:	b29b      	uxth	r3, r3
 8004054:	3b01      	subs	r3, #1
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800405c:	e042      	b.n	80040e4 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004062:	68f8      	ldr	r0, [r7, #12]
 8004064:	f001 fed8 	bl	8005e18 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d001      	beq.n	8004072 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800406e:	2301      	movs	r3, #1
 8004070:	e04c      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	691a      	ldr	r2, [r3, #16]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	b2d2      	uxtb	r2, r2
 800407e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408e:	3b01      	subs	r3, #1
 8004090:	b29a      	uxth	r2, r3
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800409a:	b29b      	uxth	r3, r3
 800409c:	3b01      	subs	r3, #1
 800409e:	b29a      	uxth	r2, r3
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	f003 0304 	and.w	r3, r3, #4
 80040ae:	2b04      	cmp	r3, #4
 80040b0:	d118      	bne.n	80040e4 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	691a      	ldr	r2, [r3, #16]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040da:	b29b      	uxth	r3, r3
 80040dc:	3b01      	subs	r3, #1
 80040de:	b29a      	uxth	r2, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f47f aec2 	bne.w	8003e72 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	e000      	b.n	800410c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800410a:	2302      	movs	r3, #2
  }
}
 800410c:	4618      	mov	r0, r3
 800410e:	3728      	adds	r7, #40	; 0x28
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	00010004 	.word	0x00010004

08004118 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b088      	sub	sp, #32
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004120:	2300      	movs	r3, #0
 8004122:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004138:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004140:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004142:	7bfb      	ldrb	r3, [r7, #15]
 8004144:	2b10      	cmp	r3, #16
 8004146:	d003      	beq.n	8004150 <HAL_I2C_EV_IRQHandler+0x38>
 8004148:	7bfb      	ldrb	r3, [r7, #15]
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	f040 80c1 	bne.w	80042d2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	f003 0301 	and.w	r3, r3, #1
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_I2C_EV_IRQHandler+0x6e>
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004170:	d003      	beq.n	800417a <HAL_I2C_EV_IRQHandler+0x62>
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004178:	d101      	bne.n	800417e <HAL_I2C_EV_IRQHandler+0x66>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <HAL_I2C_EV_IRQHandler+0x68>
 800417e:	2300      	movs	r3, #0
 8004180:	2b01      	cmp	r3, #1
 8004182:	f000 8132 	beq.w	80043ea <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	2b00      	cmp	r3, #0
 800418e:	d00c      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x92>
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	0a5b      	lsrs	r3, r3, #9
 8004194:	f003 0301 	and.w	r3, r3, #1
 8004198:	2b00      	cmp	r3, #0
 800419a:	d006      	beq.n	80041aa <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f001 fec0 	bl	8005f22 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 fcdc 	bl	8004b60 <I2C_Master_SB>
 80041a8:	e092      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d009      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0xb2>
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	0a5b      	lsrs	r3, r3, #9
 80041ba:	f003 0301 	and.w	r3, r3, #1
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f000 fd52 	bl	8004c6c <I2C_Master_ADD10>
 80041c8:	e082      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	085b      	lsrs	r3, r3, #1
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d009      	beq.n	80041ea <HAL_I2C_EV_IRQHandler+0xd2>
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	0a5b      	lsrs	r3, r3, #9
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d003      	beq.n	80041ea <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fd6c 	bl	8004cc0 <I2C_Master_ADDR>
 80041e8:	e072      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	089b      	lsrs	r3, r3, #2
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d03b      	beq.n	800426e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	685b      	ldr	r3, [r3, #4]
 80041fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004200:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004204:	f000 80f3 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	09db      	lsrs	r3, r3, #7
 800420c:	f003 0301 	and.w	r3, r3, #1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00f      	beq.n	8004234 <HAL_I2C_EV_IRQHandler+0x11c>
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	0a9b      	lsrs	r3, r3, #10
 8004218:	f003 0301 	and.w	r3, r3, #1
 800421c:	2b00      	cmp	r3, #0
 800421e:	d009      	beq.n	8004234 <HAL_I2C_EV_IRQHandler+0x11c>
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	089b      	lsrs	r3, r3, #2
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d103      	bne.n	8004234 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f94c 	bl	80044ca <I2C_MasterTransmit_TXE>
 8004232:	e04d      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	089b      	lsrs	r3, r3, #2
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b00      	cmp	r3, #0
 800423e:	f000 80d6 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	0a5b      	lsrs	r3, r3, #9
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	f000 80cf 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004250:	7bbb      	ldrb	r3, [r7, #14]
 8004252:	2b21      	cmp	r3, #33	; 0x21
 8004254:	d103      	bne.n	800425e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f9d3 	bl	8004602 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800425c:	e0c7      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800425e:	7bfb      	ldrb	r3, [r7, #15]
 8004260:	2b40      	cmp	r3, #64	; 0x40
 8004262:	f040 80c4 	bne.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004266:	6878      	ldr	r0, [r7, #4]
 8004268:	f000 fa41 	bl	80046ee <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800426c:	e0bf      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004278:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800427c:	f000 80b7 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	099b      	lsrs	r3, r3, #6
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00f      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x194>
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	0a9b      	lsrs	r3, r3, #10
 8004290:	f003 0301 	and.w	r3, r3, #1
 8004294:	2b00      	cmp	r3, #0
 8004296:	d009      	beq.n	80042ac <HAL_I2C_EV_IRQHandler+0x194>
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	089b      	lsrs	r3, r3, #2
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d103      	bne.n	80042ac <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 fab6 	bl	8004816 <I2C_MasterReceive_RXNE>
 80042aa:	e011      	b.n	80042d0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	089b      	lsrs	r3, r3, #2
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	f000 809a 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	0a5b      	lsrs	r3, r3, #9
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 8093 	beq.w	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 fb5f 	bl	800498c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042ce:	e08e      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
 80042d0:	e08d      	b.n	80043ee <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d004      	beq.n	80042e4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	61fb      	str	r3, [r7, #28]
 80042e2:	e007      	b.n	80042f4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	085b      	lsrs	r3, r3, #1
 80042f8:	f003 0301 	and.w	r3, r3, #1
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d012      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x20e>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	0a5b      	lsrs	r3, r3, #9
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00c      	beq.n	8004326 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004310:	2b00      	cmp	r3, #0
 8004312:	d003      	beq.n	800431c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800431c:	69b9      	ldr	r1, [r7, #24]
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 ff1d 	bl	800515e <I2C_Slave_ADDR>
 8004324:	e066      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	091b      	lsrs	r3, r3, #4
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	2b00      	cmp	r3, #0
 8004330:	d009      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x22e>
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	0a5b      	lsrs	r3, r3, #9
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 ff58 	bl	80051f4 <I2C_Slave_STOPF>
 8004344:	e056      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004346:	7bbb      	ldrb	r3, [r7, #14]
 8004348:	2b21      	cmp	r3, #33	; 0x21
 800434a:	d002      	beq.n	8004352 <HAL_I2C_EV_IRQHandler+0x23a>
 800434c:	7bbb      	ldrb	r3, [r7, #14]
 800434e:	2b29      	cmp	r3, #41	; 0x29
 8004350:	d125      	bne.n	800439e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	09db      	lsrs	r3, r3, #7
 8004356:	f003 0301 	and.w	r3, r3, #1
 800435a:	2b00      	cmp	r3, #0
 800435c:	d00f      	beq.n	800437e <HAL_I2C_EV_IRQHandler+0x266>
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	0a9b      	lsrs	r3, r3, #10
 8004362:	f003 0301 	and.w	r3, r3, #1
 8004366:	2b00      	cmp	r3, #0
 8004368:	d009      	beq.n	800437e <HAL_I2C_EV_IRQHandler+0x266>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d103      	bne.n	800437e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 fe33 	bl	8004fe2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800437c:	e039      	b.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	089b      	lsrs	r3, r3, #2
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d033      	beq.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2da>
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	0a5b      	lsrs	r3, r3, #9
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d02d      	beq.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 fe60 	bl	800505c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439c:	e029      	b.n	80043f2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00f      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	0a9b      	lsrs	r3, r3, #10
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_I2C_EV_IRQHandler+0x2b2>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	089b      	lsrs	r3, r3, #2
 80043ba:	f003 0301 	and.w	r3, r3, #1
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d103      	bne.n	80043ca <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80043c2:	6878      	ldr	r0, [r7, #4]
 80043c4:	f000 fe6b 	bl	800509e <I2C_SlaveReceive_RXNE>
 80043c8:	e014      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	089b      	lsrs	r3, r3, #2
 80043ce:	f003 0301 	and.w	r3, r3, #1
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00e      	beq.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	0a5b      	lsrs	r3, r3, #9
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fe99 	bl	800511a <I2C_SlaveReceive_BTF>
 80043e8:	e004      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80043ea:	bf00      	nop
 80043ec:	e002      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043ee:	bf00      	nop
 80043f0:	e000      	b.n	80043f4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80043f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80043f4:	3720      	adds	r7, #32
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043fa:	b480      	push	{r7}
 80043fc:	b083      	sub	sp, #12
 80043fe:	af00      	add	r7, sp, #0
 8004400:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004402:	bf00      	nop
 8004404:	370c      	adds	r7, #12
 8004406:	46bd      	mov	sp, r7
 8004408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440c:	4770      	bx	lr

0800440e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800440e:	b480      	push	{r7}
 8004410:	b083      	sub	sp, #12
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004416:	bf00      	nop
 8004418:	370c      	adds	r7, #12
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr

08004422 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004422:	b480      	push	{r7}
 8004424:	b083      	sub	sp, #12
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800442a:	bf00      	nop
 800442c:	370c      	adds	r7, #12
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr

08004436 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004448:	4770      	bx	lr

0800444a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800444a:	b480      	push	{r7}
 800444c:	b083      	sub	sp, #12
 800444e:	af00      	add	r7, sp, #0
 8004450:	6078      	str	r0, [r7, #4]
 8004452:	460b      	mov	r3, r1
 8004454:	70fb      	strb	r3, [r7, #3]
 8004456:	4613      	mov	r3, r2
 8004458:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800445a:	bf00      	nop
 800445c:	370c      	adds	r7, #12
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr

0800447a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800447a:	b480      	push	{r7}
 800447c:	b083      	sub	sp, #12
 800447e:	af00      	add	r7, sp, #0
 8004480:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004482:	bf00      	nop
 8004484:	370c      	adds	r7, #12
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800448e:	b480      	push	{r7}
 8004490:	b083      	sub	sp, #12
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004496:	bf00      	nop
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr

080044a2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b083      	sub	sp, #12
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80044aa:	bf00      	nop
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr

080044b6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b083      	sub	sp, #12
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80044be:	bf00      	nop
 80044c0:	370c      	adds	r7, #12
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr

080044ca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044e0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d150      	bne.n	8004592 <I2C_MasterTransmit_TXE+0xc8>
 80044f0:	7bfb      	ldrb	r3, [r7, #15]
 80044f2:	2b21      	cmp	r3, #33	; 0x21
 80044f4:	d14d      	bne.n	8004592 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b08      	cmp	r3, #8
 80044fa:	d01d      	beq.n	8004538 <I2C_MasterTransmit_TXE+0x6e>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b20      	cmp	r3, #32
 8004500:	d01a      	beq.n	8004538 <I2C_MasterTransmit_TXE+0x6e>
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004508:	d016      	beq.n	8004538 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	685a      	ldr	r2, [r3, #4]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004518:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2211      	movs	r2, #17
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2220      	movs	r2, #32
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff62 	bl	80043fa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004536:	e060      	b.n	80045fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004546:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004556:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b40      	cmp	r3, #64	; 0x40
 8004570:	d107      	bne.n	8004582 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f7ff ff7d 	bl	800447a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004580:	e03b      	b.n	80045fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800458a:	6878      	ldr	r0, [r7, #4]
 800458c:	f7ff ff35 	bl	80043fa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004590:	e033      	b.n	80045fa <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004592:	7bfb      	ldrb	r3, [r7, #15]
 8004594:	2b21      	cmp	r3, #33	; 0x21
 8004596:	d005      	beq.n	80045a4 <I2C_MasterTransmit_TXE+0xda>
 8004598:	7bbb      	ldrb	r3, [r7, #14]
 800459a:	2b40      	cmp	r3, #64	; 0x40
 800459c:	d12d      	bne.n	80045fa <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800459e:	7bfb      	ldrb	r3, [r7, #15]
 80045a0:	2b22      	cmp	r3, #34	; 0x22
 80045a2:	d12a      	bne.n	80045fa <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045bc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80045be:	e01c      	b.n	80045fa <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	2b40      	cmp	r3, #64	; 0x40
 80045ca:	d103      	bne.n	80045d4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 f88e 	bl	80046ee <I2C_MemoryTransmit_TXE_BTF>
}
 80045d2:	e012      	b.n	80045fa <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80045f8:	e7ff      	b.n	80045fa <I2C_MasterTransmit_TXE+0x130>
 80045fa:	bf00      	nop
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004616:	b2db      	uxtb	r3, r3
 8004618:	2b21      	cmp	r3, #33	; 0x21
 800461a:	d164      	bne.n	80046e6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004620:	b29b      	uxth	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d012      	beq.n	800464c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	781a      	ldrb	r2, [r3, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	3b01      	subs	r3, #1
 8004644:	b29a      	uxth	r2, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800464a:	e04c      	b.n	80046e6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2b08      	cmp	r3, #8
 8004650:	d01d      	beq.n	800468e <I2C_MasterTransmit_BTF+0x8c>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b20      	cmp	r3, #32
 8004656:	d01a      	beq.n	800468e <I2C_MasterTransmit_BTF+0x8c>
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800465e:	d016      	beq.n	800468e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800466e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2211      	movs	r2, #17
 8004674:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f7ff feb7 	bl	80043fa <HAL_I2C_MasterTxCpltCallback>
}
 800468c:	e02b      	b.n	80046e6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800469c:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ac:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b40      	cmp	r3, #64	; 0x40
 80046c6:	d107      	bne.n	80046d8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7ff fed2 	bl	800447a <HAL_I2C_MemTxCpltCallback>
}
 80046d6:	e006      	b.n	80046e6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80046e0:	6878      	ldr	r0, [r7, #4]
 80046e2:	f7ff fe8a 	bl	80043fa <HAL_I2C_MasterTxCpltCallback>
}
 80046e6:	bf00      	nop
 80046e8:	3710      	adds	r7, #16
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004702:	2b00      	cmp	r3, #0
 8004704:	d11d      	bne.n	8004742 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10b      	bne.n	8004726 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004712:	b2da      	uxtb	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800471e:	1c9a      	adds	r2, r3, #2
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004724:	e073      	b.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800472a:	b29b      	uxth	r3, r3
 800472c:	121b      	asrs	r3, r3, #8
 800472e:	b2da      	uxtb	r2, r3
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800473a:	1c5a      	adds	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004740:	e065      	b.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004746:	2b01      	cmp	r3, #1
 8004748:	d10b      	bne.n	8004762 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474e:	b2da      	uxtb	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	1c5a      	adds	r2, r3, #1
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004760:	e055      	b.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004766:	2b02      	cmp	r3, #2
 8004768:	d151      	bne.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800476a:	7bfb      	ldrb	r3, [r7, #15]
 800476c:	2b22      	cmp	r3, #34	; 0x22
 800476e:	d10d      	bne.n	800478c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800477e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	651a      	str	r2, [r3, #80]	; 0x50
}
 800478a:	e040      	b.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d015      	beq.n	80047c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004796:	7bfb      	ldrb	r3, [r7, #15]
 8004798:	2b21      	cmp	r3, #33	; 0x21
 800479a:	d112      	bne.n	80047c2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a0:	781a      	ldrb	r2, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80047c0:	e025      	b.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d120      	bne.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	2b21      	cmp	r3, #33	; 0x21
 80047d0:	d11d      	bne.n	800480e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80047e0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047f0:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2220      	movs	r2, #32
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	f7ff fe36 	bl	800447a <HAL_I2C_MemTxCpltCallback>
}
 800480e:	bf00      	nop
 8004810:	3710      	adds	r7, #16
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b22      	cmp	r3, #34	; 0x22
 8004828:	f040 80ac 	bne.w	8004984 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004830:	b29b      	uxth	r3, r3
 8004832:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b03      	cmp	r3, #3
 8004838:	d921      	bls.n	800487e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	691a      	ldr	r2, [r3, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	b2d2      	uxtb	r2, r2
 8004846:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	1c5a      	adds	r2, r3, #1
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004856:	b29b      	uxth	r3, r3
 8004858:	3b01      	subs	r3, #1
 800485a:	b29a      	uxth	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004864:	b29b      	uxth	r3, r3
 8004866:	2b03      	cmp	r3, #3
 8004868:	f040 808c 	bne.w	8004984 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685a      	ldr	r2, [r3, #4]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800487a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800487c:	e082      	b.n	8004984 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004882:	2b02      	cmp	r3, #2
 8004884:	d075      	beq.n	8004972 <I2C_MasterReceive_RXNE+0x15c>
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d002      	beq.n	8004892 <I2C_MasterReceive_RXNE+0x7c>
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d16f      	bne.n	8004972 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f001 fa8e 	bl	8005db4 <I2C_WaitOnSTOPRequestThroughIT>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d142      	bne.n	8004924 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ac:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048bc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	691a      	ldr	r2, [r3, #16]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c8:	b2d2      	uxtb	r2, r2
 80048ca:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b40      	cmp	r3, #64	; 0x40
 80048f6:	d10a      	bne.n	800490e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f7ff fdc1 	bl	800448e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800490c:	e03a      	b.n	8004984 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2212      	movs	r2, #18
 800491a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fd76 	bl	800440e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004922:	e02f      	b.n	8004984 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004932:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	691a      	ldr	r2, [r3, #16]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493e:	b2d2      	uxtb	r2, r2
 8004940:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	1c5a      	adds	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004950:	b29b      	uxth	r3, r3
 8004952:	3b01      	subs	r3, #1
 8004954:	b29a      	uxth	r2, r3
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2220      	movs	r2, #32
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7ff fd99 	bl	80044a2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004970:	e008      	b.n	8004984 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004980:	605a      	str	r2, [r3, #4]
}
 8004982:	e7ff      	b.n	8004984 <I2C_MasterReceive_RXNE+0x16e>
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004998:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d11b      	bne.n	80049dc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	691a      	ldr	r2, [r3, #16]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049be:	b2d2      	uxtb	r2, r2
 80049c0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80049da:	e0bd      	b.n	8004b58 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e0:	b29b      	uxth	r3, r3
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d129      	bne.n	8004a3a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f4:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2b04      	cmp	r3, #4
 80049fa:	d00a      	beq.n	8004a12 <I2C_MasterReceive_BTF+0x86>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d007      	beq.n	8004a12 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a10:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	691a      	ldr	r2, [r3, #16]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a24:	1c5a      	adds	r2, r3, #1
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a2e:	b29b      	uxth	r3, r3
 8004a30:	3b01      	subs	r3, #1
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004a38:	e08e      	b.n	8004b58 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	2b02      	cmp	r3, #2
 8004a42:	d176      	bne.n	8004b32 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d002      	beq.n	8004a50 <I2C_MasterReceive_BTF+0xc4>
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	2b10      	cmp	r3, #16
 8004a4e:	d108      	bne.n	8004a62 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a5e:	601a      	str	r2, [r3, #0]
 8004a60:	e019      	b.n	8004a96 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d002      	beq.n	8004a6e <I2C_MasterReceive_BTF+0xe2>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d108      	bne.n	8004a80 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a7c:	601a      	str	r2, [r3, #0]
 8004a7e:	e00a      	b.n	8004a96 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2b10      	cmp	r3, #16
 8004a84:	d007      	beq.n	8004a96 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681a      	ldr	r2, [r3, #0]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a94:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	b2d2      	uxtb	r2, r2
 8004aa2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa8:	1c5a      	adds	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	b29a      	uxth	r2, r3
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	b2d2      	uxtb	r2, r2
 8004ac8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	1c5a      	adds	r2, r3, #1
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	3b01      	subs	r3, #1
 8004adc:	b29a      	uxth	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004af0:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2220      	movs	r2, #32
 8004af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	2b40      	cmp	r3, #64	; 0x40
 8004b04:	d10a      	bne.n	8004b1c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f7ff fcba 	bl	800448e <HAL_I2C_MemRxCpltCallback>
}
 8004b1a:	e01d      	b.n	8004b58 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2212      	movs	r2, #18
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f7ff fc6f 	bl	800440e <HAL_I2C_MasterRxCpltCallback>
}
 8004b30:	e012      	b.n	8004b58 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	691a      	ldr	r2, [r3, #16]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	b2d2      	uxtb	r2, r2
 8004b3e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	1c5a      	adds	r2, r3, #1
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	3b01      	subs	r3, #1
 8004b52:	b29a      	uxth	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b58:	bf00      	nop
 8004b5a:	3710      	adds	r7, #16
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b40      	cmp	r3, #64	; 0x40
 8004b72:	d117      	bne.n	8004ba4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d109      	bne.n	8004b90 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	b2db      	uxtb	r3, r3
 8004b82:	461a      	mov	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b8c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004b8e:	e067      	b.n	8004c60 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	f043 0301 	orr.w	r3, r3, #1
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	611a      	str	r2, [r3, #16]
}
 8004ba2:	e05d      	b.n	8004c60 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bac:	d133      	bne.n	8004c16 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b21      	cmp	r3, #33	; 0x21
 8004bb8:	d109      	bne.n	8004bce <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bca:	611a      	str	r2, [r3, #16]
 8004bcc:	e008      	b.n	8004be0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	f043 0301 	orr.w	r3, r3, #1
 8004bd8:	b2da      	uxtb	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <I2C_Master_SB+0x92>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d108      	bne.n	8004c04 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d032      	beq.n	8004c60 <I2C_Master_SB+0x100>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d02d      	beq.n	8004c60 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685a      	ldr	r2, [r3, #4]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c12:	605a      	str	r2, [r3, #4]
}
 8004c14:	e024      	b.n	8004c60 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d10e      	bne.n	8004c3c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c22:	b29b      	uxth	r3, r3
 8004c24:	11db      	asrs	r3, r3, #7
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	f003 0306 	and.w	r3, r3, #6
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	f063 030f 	orn	r3, r3, #15
 8004c32:	b2da      	uxtb	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	611a      	str	r2, [r3, #16]
}
 8004c3a:	e011      	b.n	8004c60 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d10d      	bne.n	8004c60 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	11db      	asrs	r3, r3, #7
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0306 	and.w	r3, r3, #6
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f063 030e 	orn	r3, r3, #14
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b083      	sub	sp, #12
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d004      	beq.n	8004c92 <I2C_Master_ADD10+0x26>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d108      	bne.n	8004ca4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00c      	beq.n	8004cb4 <I2C_Master_ADD10+0x48>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d007      	beq.n	8004cb4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb2:	605a      	str	r2, [r3, #4]
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b091      	sub	sp, #68	; 0x44
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cdc:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	2b22      	cmp	r3, #34	; 0x22
 8004ce8:	f040 8169 	bne.w	8004fbe <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10f      	bne.n	8004d14 <I2C_Master_ADDR+0x54>
 8004cf4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004cf8:	2b40      	cmp	r3, #64	; 0x40
 8004cfa:	d10b      	bne.n	8004d14 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	633b      	str	r3, [r7, #48]	; 0x30
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	699b      	ldr	r3, [r3, #24]
 8004d0e:	633b      	str	r3, [r7, #48]	; 0x30
 8004d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d12:	e160      	b.n	8004fd6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d11d      	bne.n	8004d58 <I2C_Master_ADDR+0x98>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	691b      	ldr	r3, [r3, #16]
 8004d20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004d24:	d118      	bne.n	8004d58 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d50:	1c5a      	adds	r2, r3, #1
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	651a      	str	r2, [r3, #80]	; 0x50
 8004d56:	e13e      	b.n	8004fd6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d113      	bne.n	8004d8a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d62:	2300      	movs	r3, #0
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d76:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	e115      	b.n	8004fb6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	f040 808a 	bne.w	8004eaa <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d9c:	d137      	bne.n	8004e0e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	681a      	ldr	r2, [r3, #0]
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dac:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004db8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dbc:	d113      	bne.n	8004de6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dcc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dce:	2300      	movs	r3, #0
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	695b      	ldr	r3, [r3, #20]
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	699b      	ldr	r3, [r3, #24]
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
 8004de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de4:	e0e7      	b.n	8004fb6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004de6:	2300      	movs	r3, #0
 8004de8:	623b      	str	r3, [r7, #32]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	623b      	str	r3, [r7, #32]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	623b      	str	r3, [r7, #32]
 8004dfa:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e0a:	601a      	str	r2, [r3, #0]
 8004e0c:	e0d3      	b.n	8004fb6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e10:	2b08      	cmp	r3, #8
 8004e12:	d02e      	beq.n	8004e72 <I2C_Master_ADDR+0x1b2>
 8004e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e16:	2b20      	cmp	r3, #32
 8004e18:	d02b      	beq.n	8004e72 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	2b12      	cmp	r3, #18
 8004e1e:	d102      	bne.n	8004e26 <I2C_Master_ADDR+0x166>
 8004e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d125      	bne.n	8004e72 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d00e      	beq.n	8004e4a <I2C_Master_ADDR+0x18a>
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d00b      	beq.n	8004e4a <I2C_Master_ADDR+0x18a>
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	2b10      	cmp	r3, #16
 8004e36:	d008      	beq.n	8004e4a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e007      	b.n	8004e5a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e58:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	61fb      	str	r3, [r7, #28]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695b      	ldr	r3, [r3, #20]
 8004e64:	61fb      	str	r3, [r7, #28]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	61fb      	str	r3, [r7, #28]
 8004e6e:	69fb      	ldr	r3, [r7, #28]
 8004e70:	e0a1      	b.n	8004fb6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e80:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e82:	2300      	movs	r3, #0
 8004e84:	61bb      	str	r3, [r7, #24]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	695b      	ldr	r3, [r3, #20]
 8004e8c:	61bb      	str	r3, [r7, #24]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	699b      	ldr	r3, [r3, #24]
 8004e94:	61bb      	str	r3, [r7, #24]
 8004e96:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004ea6:	601a      	str	r2, [r3, #0]
 8004ea8:	e085      	b.n	8004fb6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	2b02      	cmp	r3, #2
 8004eb2:	d14d      	bne.n	8004f50 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb6:	2b04      	cmp	r3, #4
 8004eb8:	d016      	beq.n	8004ee8 <I2C_Master_ADDR+0x228>
 8004eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebc:	2b02      	cmp	r3, #2
 8004ebe:	d013      	beq.n	8004ee8 <I2C_Master_ADDR+0x228>
 8004ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d010      	beq.n	8004ee8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ed4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	e007      	b.n	8004ef8 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ef6:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f06:	d117      	bne.n	8004f38 <I2C_Master_ADDR+0x278>
 8004f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f0a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f0e:	d00b      	beq.n	8004f28 <I2C_Master_ADDR+0x268>
 8004f10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d008      	beq.n	8004f28 <I2C_Master_ADDR+0x268>
 8004f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d005      	beq.n	8004f28 <I2C_Master_ADDR+0x268>
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f1e:	2b10      	cmp	r3, #16
 8004f20:	d002      	beq.n	8004f28 <I2C_Master_ADDR+0x268>
 8004f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d107      	bne.n	8004f38 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f36:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	e032      	b.n	8004fb6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f5e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f6e:	d117      	bne.n	8004fa0 <I2C_Master_ADDR+0x2e0>
 8004f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f76:	d00b      	beq.n	8004f90 <I2C_Master_ADDR+0x2d0>
 8004f78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d008      	beq.n	8004f90 <I2C_Master_ADDR+0x2d0>
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	2b08      	cmp	r3, #8
 8004f82:	d005      	beq.n	8004f90 <I2C_Master_ADDR+0x2d0>
 8004f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f86:	2b10      	cmp	r3, #16
 8004f88:	d002      	beq.n	8004f90 <I2C_Master_ADDR+0x2d0>
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	2b20      	cmp	r3, #32
 8004f8e:	d107      	bne.n	8004fa0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004f9e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	613b      	str	r3, [r7, #16]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	695b      	ldr	r3, [r3, #20]
 8004faa:	613b      	str	r3, [r7, #16]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	613b      	str	r3, [r7, #16]
 8004fb4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004fbc:	e00b      	b.n	8004fd6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	695b      	ldr	r3, [r3, #20]
 8004fc8:	60fb      	str	r3, [r7, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	699b      	ldr	r3, [r3, #24]
 8004fd0:	60fb      	str	r3, [r7, #12]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
}
 8004fd4:	e7ff      	b.n	8004fd6 <I2C_Master_ADDR+0x316>
 8004fd6:	bf00      	nop
 8004fd8:	3744      	adds	r7, #68	; 0x44
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b084      	sub	sp, #16
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d02b      	beq.n	8005054 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500c:	1c5a      	adds	r2, r3, #1
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005016:	b29b      	uxth	r3, r3
 8005018:	3b01      	subs	r3, #1
 800501a:	b29a      	uxth	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005024:	b29b      	uxth	r3, r3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d114      	bne.n	8005054 <I2C_SlaveTransmit_TXE+0x72>
 800502a:	7bfb      	ldrb	r3, [r7, #15]
 800502c:	2b29      	cmp	r3, #41	; 0x29
 800502e:	d111      	bne.n	8005054 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800503e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2221      	movs	r2, #33	; 0x21
 8005044:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2228      	movs	r2, #40	; 0x28
 800504a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f7ff f9e7 	bl	8004422 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005054:	bf00      	nop
 8005056:	3710      	adds	r7, #16
 8005058:	46bd      	mov	sp, r7
 800505a:	bd80      	pop	{r7, pc}

0800505c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005068:	b29b      	uxth	r3, r3
 800506a:	2b00      	cmp	r3, #0
 800506c:	d011      	beq.n	8005092 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	781a      	ldrb	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507e:	1c5a      	adds	r2, r3, #1
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b084      	sub	sp, #16
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050ac:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d02c      	beq.n	8005112 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	691a      	ldr	r2, [r3, #16]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c2:	b2d2      	uxtb	r2, r2
 80050c4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	3b01      	subs	r3, #1
 80050d8:	b29a      	uxth	r2, r3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d114      	bne.n	8005112 <I2C_SlaveReceive_RXNE+0x74>
 80050e8:	7bfb      	ldrb	r3, [r7, #15]
 80050ea:	2b2a      	cmp	r3, #42	; 0x2a
 80050ec:	d111      	bne.n	8005112 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685a      	ldr	r2, [r3, #4]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fc:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2222      	movs	r2, #34	; 0x22
 8005102:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2228      	movs	r2, #40	; 0x28
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f7ff f992 	bl	8004436 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}

0800511a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800511a:	b480      	push	{r7}
 800511c:	b083      	sub	sp, #12
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005126:	b29b      	uxth	r3, r3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d012      	beq.n	8005152 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	1c5a      	adds	r2, r3, #1
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005148:	b29b      	uxth	r3, r3
 800514a:	3b01      	subs	r3, #1
 800514c:	b29a      	uxth	r2, r3
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005152:	bf00      	nop
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
 8005166:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005168:	2300      	movs	r3, #0
 800516a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005172:	b2db      	uxtb	r3, r3
 8005174:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005178:	2b28      	cmp	r3, #40	; 0x28
 800517a:	d127      	bne.n	80051cc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685a      	ldr	r2, [r3, #4]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800518a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	089b      	lsrs	r3, r3, #2
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	09db      	lsrs	r3, r3, #7
 80051a0:	f003 0301 	and.w	r3, r3, #1
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d103      	bne.n	80051b0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	81bb      	strh	r3, [r7, #12]
 80051ae:	e002      	b.n	80051b6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80051be:	89ba      	ldrh	r2, [r7, #12]
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	4619      	mov	r1, r3
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f7ff f940 	bl	800444a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80051ca:	e00e      	b.n	80051ea <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051cc:	2300      	movs	r3, #0
 80051ce:	60bb      	str	r3, [r7, #8]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	60bb      	str	r3, [r7, #8]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	60bb      	str	r3, [r7, #8]
 80051e0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051ea:	bf00      	nop
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005212:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005214:	2300      	movs	r3, #0
 8005216:	60bb      	str	r3, [r7, #8]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	60bb      	str	r3, [r7, #8]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f042 0201 	orr.w	r2, r2, #1
 800522e:	601a      	str	r2, [r3, #0]
 8005230:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	681a      	ldr	r2, [r3, #0]
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005240:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800524c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005250:	d172      	bne.n	8005338 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005252:	7bfb      	ldrb	r3, [r7, #15]
 8005254:	2b22      	cmp	r3, #34	; 0x22
 8005256:	d002      	beq.n	800525e <I2C_Slave_STOPF+0x6a>
 8005258:	7bfb      	ldrb	r3, [r7, #15]
 800525a:	2b2a      	cmp	r3, #42	; 0x2a
 800525c:	d135      	bne.n	80052ca <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	b29a      	uxth	r2, r3
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005270:	b29b      	uxth	r3, r3
 8005272:	2b00      	cmp	r3, #0
 8005274:	d005      	beq.n	8005282 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	f043 0204 	orr.w	r2, r3, #4
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	685a      	ldr	r2, [r3, #4]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005290:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005296:	4618      	mov	r0, r3
 8005298:	f7fe f8fb 	bl	8003492 <HAL_DMA_GetState>
 800529c:	4603      	mov	r3, r0
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d049      	beq.n	8005336 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	4a69      	ldr	r2, [pc, #420]	; (800544c <I2C_Slave_STOPF+0x258>)
 80052a8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	4618      	mov	r0, r3
 80052b0:	f7fe f8cd 	bl	800344e <HAL_DMA_Abort_IT>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d03d      	beq.n	8005336 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80052c4:	4610      	mov	r0, r2
 80052c6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80052c8:	e035      	b.n	8005336 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b29a      	uxth	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052dc:	b29b      	uxth	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d005      	beq.n	80052ee <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f043 0204 	orr.w	r2, r3, #4
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685a      	ldr	r2, [r3, #4]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052fc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005302:	4618      	mov	r0, r3
 8005304:	f7fe f8c5 	bl	8003492 <HAL_DMA_GetState>
 8005308:	4603      	mov	r3, r0
 800530a:	2b01      	cmp	r3, #1
 800530c:	d014      	beq.n	8005338 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005312:	4a4e      	ldr	r2, [pc, #312]	; (800544c <I2C_Slave_STOPF+0x258>)
 8005314:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe f897 	bl	800344e <HAL_DMA_Abort_IT>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d008      	beq.n	8005338 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800532a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005330:	4610      	mov	r0, r2
 8005332:	4798      	blx	r3
 8005334:	e000      	b.n	8005338 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005336:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800533c:	b29b      	uxth	r3, r3
 800533e:	2b00      	cmp	r3, #0
 8005340:	d03e      	beq.n	80053c0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b04      	cmp	r3, #4
 800534e:	d112      	bne.n	8005376 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691a      	ldr	r2, [r3, #16]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535a:	b2d2      	uxtb	r2, r2
 800535c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005380:	2b40      	cmp	r3, #64	; 0x40
 8005382:	d112      	bne.n	80053aa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691a      	ldr	r2, [r3, #16]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800538e:	b2d2      	uxtb	r2, r2
 8005390:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	3b01      	subs	r3, #1
 80053a4:	b29a      	uxth	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ae:	b29b      	uxth	r3, r3
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053b8:	f043 0204 	orr.w	r2, r3, #4
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f843 	bl	8005454 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80053ce:	e039      	b.n	8005444 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80053d0:	7bfb      	ldrb	r3, [r7, #15]
 80053d2:	2b2a      	cmp	r3, #42	; 0x2a
 80053d4:	d109      	bne.n	80053ea <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2200      	movs	r2, #0
 80053da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2228      	movs	r2, #40	; 0x28
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f7ff f826 	bl	8004436 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b28      	cmp	r3, #40	; 0x28
 80053f4:	d111      	bne.n	800541a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a15      	ldr	r2, [pc, #84]	; (8005450 <I2C_Slave_STOPF+0x25c>)
 80053fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2220      	movs	r2, #32
 8005406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff f827 	bl	8004466 <HAL_I2C_ListenCpltCallback>
}
 8005418:	e014      	b.n	8005444 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	2b22      	cmp	r3, #34	; 0x22
 8005420:	d002      	beq.n	8005428 <I2C_Slave_STOPF+0x234>
 8005422:	7bfb      	ldrb	r3, [r7, #15]
 8005424:	2b22      	cmp	r3, #34	; 0x22
 8005426:	d10d      	bne.n	8005444 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2200      	movs	r2, #0
 800542c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2200      	movs	r2, #0
 800543a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fe fff9 	bl	8004436 <HAL_I2C_SlaveRxCpltCallback>
}
 8005444:	bf00      	nop
 8005446:	3710      	adds	r7, #16
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}
 800544c:	080059b5 	.word	0x080059b5
 8005450:	ffff0000 	.word	0xffff0000

08005454 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005462:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800546a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800546c:	7bbb      	ldrb	r3, [r7, #14]
 800546e:	2b10      	cmp	r3, #16
 8005470:	d002      	beq.n	8005478 <I2C_ITError+0x24>
 8005472:	7bbb      	ldrb	r3, [r7, #14]
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d10a      	bne.n	800548e <I2C_ITError+0x3a>
 8005478:	7bfb      	ldrb	r3, [r7, #15]
 800547a:	2b22      	cmp	r3, #34	; 0x22
 800547c:	d107      	bne.n	800548e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800548c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800548e:	7bfb      	ldrb	r3, [r7, #15]
 8005490:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005494:	2b28      	cmp	r3, #40	; 0x28
 8005496:	d107      	bne.n	80054a8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2228      	movs	r2, #40	; 0x28
 80054a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80054a6:	e015      	b.n	80054d4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054b6:	d00a      	beq.n	80054ce <I2C_ITError+0x7a>
 80054b8:	7bfb      	ldrb	r3, [r7, #15]
 80054ba:	2b60      	cmp	r3, #96	; 0x60
 80054bc:	d007      	beq.n	80054ce <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80054e2:	d162      	bne.n	80055aa <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80054f2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054fc:	b2db      	uxtb	r3, r3
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d020      	beq.n	8005544 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005506:	4a6a      	ldr	r2, [pc, #424]	; (80056b0 <I2C_ITError+0x25c>)
 8005508:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd ff9d 	bl	800344e <HAL_DMA_Abort_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	f000 8089 	beq.w	800562e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f022 0201 	bic.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800553e:	4610      	mov	r0, r2
 8005540:	4798      	blx	r3
 8005542:	e074      	b.n	800562e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	4a59      	ldr	r2, [pc, #356]	; (80056b0 <I2C_ITError+0x25c>)
 800554a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005550:	4618      	mov	r0, r3
 8005552:	f7fd ff7c 	bl	800344e <HAL_DMA_Abort_IT>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d068      	beq.n	800562e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005566:	2b40      	cmp	r3, #64	; 0x40
 8005568:	d10b      	bne.n	8005582 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	691a      	ldr	r2, [r3, #16]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	b2d2      	uxtb	r2, r2
 8005576:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	681a      	ldr	r2, [r3, #0]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f022 0201 	bic.w	r2, r2, #1
 8005590:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2220      	movs	r2, #32
 8005596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
 80055a8:	e041      	b.n	800562e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b0:	b2db      	uxtb	r3, r3
 80055b2:	2b60      	cmp	r3, #96	; 0x60
 80055b4:	d125      	bne.n	8005602 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2220      	movs	r2, #32
 80055ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055ce:	2b40      	cmp	r3, #64	; 0x40
 80055d0:	d10b      	bne.n	80055ea <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691a      	ldr	r2, [r3, #16]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055dc:	b2d2      	uxtb	r2, r2
 80055de:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e4:	1c5a      	adds	r2, r3, #1
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f022 0201 	bic.w	r2, r2, #1
 80055f8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80055fa:	6878      	ldr	r0, [r7, #4]
 80055fc:	f7fe ff5b 	bl	80044b6 <HAL_I2C_AbortCpltCallback>
 8005600:	e015      	b.n	800562e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	695b      	ldr	r3, [r3, #20]
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d10b      	bne.n	8005628 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	691a      	ldr	r2, [r3, #16]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561a:	b2d2      	uxtb	r2, r2
 800561c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f7fe ff3a 	bl	80044a2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	f003 0301 	and.w	r3, r3, #1
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10e      	bne.n	800565c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005644:	2b00      	cmp	r3, #0
 8005646:	d109      	bne.n	800565c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800564e:	2b00      	cmp	r3, #0
 8005650:	d104      	bne.n	800565c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005658:	2b00      	cmp	r3, #0
 800565a:	d007      	beq.n	800566c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800566a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005672:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b04      	cmp	r3, #4
 800567e:	d113      	bne.n	80056a8 <I2C_ITError+0x254>
 8005680:	7bfb      	ldrb	r3, [r7, #15]
 8005682:	2b28      	cmp	r3, #40	; 0x28
 8005684:	d110      	bne.n	80056a8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <I2C_ITError+0x260>)
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2200      	movs	r2, #0
 8005690:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f7fe fedf 	bl	8004466 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80056a8:	bf00      	nop
 80056aa:	3710      	adds	r7, #16
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}
 80056b0:	080059b5 	.word	0x080059b5
 80056b4:	ffff0000 	.word	0xffff0000

080056b8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	817b      	strh	r3, [r7, #10]
 80056ca:	460b      	mov	r3, r1
 80056cc:	813b      	strh	r3, [r7, #8]
 80056ce:	4613      	mov	r3, r2
 80056d0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	9300      	str	r3, [sp, #0]
 80056e6:	6a3b      	ldr	r3, [r7, #32]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 fa08 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005708:	d103      	bne.n	8005712 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005710:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e05f      	b.n	80057d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005716:	897b      	ldrh	r3, [r7, #10]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	461a      	mov	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005724:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005728:	6a3a      	ldr	r2, [r7, #32]
 800572a:	492d      	ldr	r1, [pc, #180]	; (80057e0 <I2C_RequestMemoryWrite+0x128>)
 800572c:	68f8      	ldr	r0, [r7, #12]
 800572e:	f000 fa40 	bl	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005732:	4603      	mov	r3, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	d001      	beq.n	800573c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e04c      	b.n	80057d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	695b      	ldr	r3, [r3, #20]
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	617b      	str	r3, [r7, #20]
 8005750:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005754:	6a39      	ldr	r1, [r7, #32]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 faaa 	bl	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00d      	beq.n	800577e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005766:	2b04      	cmp	r3, #4
 8005768:	d107      	bne.n	800577a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005778:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800577a:	2301      	movs	r3, #1
 800577c:	e02b      	b.n	80057d6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800577e:	88fb      	ldrh	r3, [r7, #6]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d105      	bne.n	8005790 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005784:	893b      	ldrh	r3, [r7, #8]
 8005786:	b2da      	uxtb	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	611a      	str	r2, [r3, #16]
 800578e:	e021      	b.n	80057d4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005790:	893b      	ldrh	r3, [r7, #8]
 8005792:	0a1b      	lsrs	r3, r3, #8
 8005794:	b29b      	uxth	r3, r3
 8005796:	b2da      	uxtb	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800579e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057a0:	6a39      	ldr	r1, [r7, #32]
 80057a2:	68f8      	ldr	r0, [r7, #12]
 80057a4:	f000 fa84 	bl	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a8:	4603      	mov	r3, r0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d00d      	beq.n	80057ca <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d107      	bne.n	80057c6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057c4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e005      	b.n	80057d6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80057ca:	893b      	ldrh	r3, [r7, #8]
 80057cc:	b2da      	uxtb	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3718      	adds	r7, #24
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd80      	pop	{r7, pc}
 80057de:	bf00      	nop
 80057e0:	00010002 	.word	0x00010002

080057e4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b088      	sub	sp, #32
 80057e8:	af02      	add	r7, sp, #8
 80057ea:	60f8      	str	r0, [r7, #12]
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	461a      	mov	r2, r3
 80057f2:	4603      	mov	r3, r0
 80057f4:	817b      	strh	r3, [r7, #10]
 80057f6:	460b      	mov	r3, r1
 80057f8:	813b      	strh	r3, [r7, #8]
 80057fa:	4613      	mov	r3, r2
 80057fc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	681a      	ldr	r2, [r3, #0]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800580c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800581c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005820:	9300      	str	r3, [sp, #0]
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	2200      	movs	r2, #0
 8005826:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f000 f96a 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00d      	beq.n	8005852 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005844:	d103      	bne.n	800584e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f44f 7200 	mov.w	r2, #512	; 0x200
 800584c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	e0aa      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005852:	897b      	ldrh	r3, [r7, #10]
 8005854:	b2db      	uxtb	r3, r3
 8005856:	461a      	mov	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005860:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	6a3a      	ldr	r2, [r7, #32]
 8005866:	4952      	ldr	r1, [pc, #328]	; (80059b0 <I2C_RequestMemoryRead+0x1cc>)
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f9a2 	bl	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d001      	beq.n	8005878 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005874:	2301      	movs	r3, #1
 8005876:	e097      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	617b      	str	r3, [r7, #20]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	617b      	str	r3, [r7, #20]
 800588c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800588e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005890:	6a39      	ldr	r1, [r7, #32]
 8005892:	68f8      	ldr	r0, [r7, #12]
 8005894:	f000 fa0c 	bl	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005898:	4603      	mov	r3, r0
 800589a:	2b00      	cmp	r3, #0
 800589c:	d00d      	beq.n	80058ba <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d107      	bne.n	80058b6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058b4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e076      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d105      	bne.n	80058cc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058c0:	893b      	ldrh	r3, [r7, #8]
 80058c2:	b2da      	uxtb	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	611a      	str	r2, [r3, #16]
 80058ca:	e021      	b.n	8005910 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058cc:	893b      	ldrh	r3, [r7, #8]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	b2da      	uxtb	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058dc:	6a39      	ldr	r1, [r7, #32]
 80058de:	68f8      	ldr	r0, [r7, #12]
 80058e0:	f000 f9e6 	bl	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00d      	beq.n	8005906 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ee:	2b04      	cmp	r3, #4
 80058f0:	d107      	bne.n	8005902 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005900:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	e050      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005906:	893b      	ldrh	r3, [r7, #8]
 8005908:	b2da      	uxtb	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	6a39      	ldr	r1, [r7, #32]
 8005914:	68f8      	ldr	r0, [r7, #12]
 8005916:	f000 f9cb 	bl	8005cb0 <I2C_WaitOnTXEFlagUntilTimeout>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00d      	beq.n	800593c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005924:	2b04      	cmp	r3, #4
 8005926:	d107      	bne.n	8005938 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005936:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e035      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800594a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	9300      	str	r3, [sp, #0]
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	2200      	movs	r2, #0
 8005954:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 f8d3 	bl	8005b04 <I2C_WaitOnFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00d      	beq.n	8005980 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800596e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005972:	d103      	bne.n	800597c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f44f 7200 	mov.w	r2, #512	; 0x200
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800597c:	2303      	movs	r3, #3
 800597e:	e013      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005980:	897b      	ldrh	r3, [r7, #10]
 8005982:	b2db      	uxtb	r3, r3
 8005984:	f043 0301 	orr.w	r3, r3, #1
 8005988:	b2da      	uxtb	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005992:	6a3a      	ldr	r2, [r7, #32]
 8005994:	4906      	ldr	r1, [pc, #24]	; (80059b0 <I2C_RequestMemoryRead+0x1cc>)
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 f90b 	bl	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e000      	b.n	80059a8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3718      	adds	r7, #24
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	00010002 	.word	0x00010002

080059b4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059cc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80059ce:	4b4b      	ldr	r3, [pc, #300]	; (8005afc <I2C_DMAAbort+0x148>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	08db      	lsrs	r3, r3, #3
 80059d4:	4a4a      	ldr	r2, [pc, #296]	; (8005b00 <I2C_DMAAbort+0x14c>)
 80059d6:	fba2 2303 	umull	r2, r3, r2, r3
 80059da:	0a1a      	lsrs	r2, r3, #8
 80059dc:	4613      	mov	r3, r2
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	4413      	add	r3, r2
 80059e2:	00da      	lsls	r2, r3, #3
 80059e4:	1ad3      	subs	r3, r2, r3
 80059e6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d106      	bne.n	80059fc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059f2:	f043 0220 	orr.w	r2, r3, #32
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80059fa:	e00a      	b.n	8005a12 <I2C_DMAAbort+0x5e>
    }
    count--;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a10:	d0ea      	beq.n	80059e8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d003      	beq.n	8005a22 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	2200      	movs	r2, #0
 8005a20:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005a22:	697b      	ldr	r3, [r7, #20]
 8005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a2e:	2200      	movs	r2, #0
 8005a30:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a40:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	2200      	movs	r2, #0
 8005a46:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a54:	2200      	movs	r2, #0
 8005a56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005a60:	697b      	ldr	r3, [r7, #20]
 8005a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a64:	2200      	movs	r2, #0
 8005a66:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f022 0201 	bic.w	r2, r2, #1
 8005a76:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b60      	cmp	r3, #96	; 0x60
 8005a82:	d10e      	bne.n	8005aa2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2220      	movs	r2, #32
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	2200      	movs	r2, #0
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7fe fd0b 	bl	80044b6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005aa0:	e027      	b.n	8005af2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005aa2:	7cfb      	ldrb	r3, [r7, #19]
 8005aa4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005aa8:	2b28      	cmp	r3, #40	; 0x28
 8005aaa:	d117      	bne.n	8005adc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005aca:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	2228      	movs	r2, #40	; 0x28
 8005ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ada:	e007      	b.n	8005aec <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	2220      	movs	r2, #32
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005aec:	6978      	ldr	r0, [r7, #20]
 8005aee:	f7fe fcd8 	bl	80044a2 <HAL_I2C_ErrorCallback>
}
 8005af2:	bf00      	nop
 8005af4:	3718      	adds	r7, #24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	20000000 	.word	0x20000000
 8005b00:	14f8b589 	.word	0x14f8b589

08005b04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	603b      	str	r3, [r7, #0]
 8005b10:	4613      	mov	r3, r2
 8005b12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b14:	e025      	b.n	8005b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b1c:	d021      	beq.n	8005b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b1e:	f7fd fae5 	bl	80030ec <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	69bb      	ldr	r3, [r7, #24]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d302      	bcc.n	8005b34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d116      	bne.n	8005b62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2220      	movs	r2, #32
 8005b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4e:	f043 0220 	orr.w	r2, r3, #32
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e023      	b.n	8005baa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	0c1b      	lsrs	r3, r3, #16
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d10d      	bne.n	8005b88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	43da      	mvns	r2, r3
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	4013      	ands	r3, r2
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	bf0c      	ite	eq
 8005b7e:	2301      	moveq	r3, #1
 8005b80:	2300      	movne	r3, #0
 8005b82:	b2db      	uxtb	r3, r3
 8005b84:	461a      	mov	r2, r3
 8005b86:	e00c      	b.n	8005ba2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	43da      	mvns	r2, r3
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	4013      	ands	r3, r2
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	bf0c      	ite	eq
 8005b9a:	2301      	moveq	r3, #1
 8005b9c:	2300      	movne	r3, #0
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	461a      	mov	r2, r3
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d0b6      	beq.n	8005b16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	60f8      	str	r0, [r7, #12]
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005bc0:	e051      	b.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd0:	d123      	bne.n	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	f043 0204 	orr.w	r2, r3, #4
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e046      	b.n	8005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c20:	d021      	beq.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c22:	f7fd fa63 	bl	80030ec <HAL_GetTick>
 8005c26:	4602      	mov	r2, r0
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	1ad3      	subs	r3, r2, r3
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d302      	bcc.n	8005c38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d116      	bne.n	8005c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2220      	movs	r2, #32
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	f043 0220 	orr.w	r2, r3, #32
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e020      	b.n	8005ca8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	0c1b      	lsrs	r3, r3, #16
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d10c      	bne.n	8005c8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	695b      	ldr	r3, [r3, #20]
 8005c76:	43da      	mvns	r2, r3
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	4013      	ands	r3, r2
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bf14      	ite	ne
 8005c82:	2301      	movne	r3, #1
 8005c84:	2300      	moveq	r3, #0
 8005c86:	b2db      	uxtb	r3, r3
 8005c88:	e00b      	b.n	8005ca2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	699b      	ldr	r3, [r3, #24]
 8005c90:	43da      	mvns	r2, r3
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	4013      	ands	r3, r2
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d18d      	bne.n	8005bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005ca6:	2300      	movs	r3, #0
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b084      	sub	sp, #16
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	60b9      	str	r1, [r7, #8]
 8005cba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005cbc:	e02d      	b.n	8005d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005cbe:	68f8      	ldr	r0, [r7, #12]
 8005cc0:	f000 f900 	bl	8005ec4 <I2C_IsAcknowledgeFailed>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d001      	beq.n	8005cce <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e02d      	b.n	8005d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd4:	d021      	beq.n	8005d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cd6:	f7fd fa09 	bl	80030ec <HAL_GetTick>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	1ad3      	subs	r3, r2, r3
 8005ce0:	68ba      	ldr	r2, [r7, #8]
 8005ce2:	429a      	cmp	r2, r3
 8005ce4:	d302      	bcc.n	8005cec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d116      	bne.n	8005d1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	2220      	movs	r2, #32
 8005cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d06:	f043 0220 	orr.w	r2, r3, #32
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e007      	b.n	8005d2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d1ca      	bne.n	8005cbe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005d28:	2300      	movs	r3, #0
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3710      	adds	r7, #16
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d3e:	e02d      	b.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f000 f8bf 	bl	8005ec4 <I2C_IsAcknowledgeFailed>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e02d      	b.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d56:	d021      	beq.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d58:	f7fd f9c8 	bl	80030ec <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	429a      	cmp	r2, r3
 8005d66:	d302      	bcc.n	8005d6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d116      	bne.n	8005d9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2220      	movs	r2, #32
 8005d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f043 0220 	orr.w	r2, r3, #32
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e007      	b.n	8005dac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d1ca      	bne.n	8005d40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005daa:	2300      	movs	r3, #0
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	3710      	adds	r7, #16
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}

08005db4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005dc0:	4b13      	ldr	r3, [pc, #76]	; (8005e10 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	08db      	lsrs	r3, r3, #3
 8005dc6:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dcc:	0a1a      	lsrs	r2, r3, #8
 8005dce:	4613      	mov	r3, r2
 8005dd0:	009b      	lsls	r3, r3, #2
 8005dd2:	4413      	add	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d107      	bne.n	8005df2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	f043 0220 	orr.w	r2, r3, #32
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e008      	b.n	8005e04 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d0e9      	beq.n	8005dd6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005e02:	2300      	movs	r3, #0
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	20000000 	.word	0x20000000
 8005e14:	14f8b589 	.word	0x14f8b589

08005e18 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e24:	e042      	b.n	8005eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	695b      	ldr	r3, [r3, #20]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d119      	bne.n	8005e68 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0210 	mvn.w	r2, #16
 8005e3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e029      	b.n	8005ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e68:	f7fd f940 	bl	80030ec <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d302      	bcc.n	8005e7e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d116      	bne.n	8005eac <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2220      	movs	r2, #32
 8005e88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e98:	f043 0220 	orr.w	r2, r3, #32
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e007      	b.n	8005ebc <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b40      	cmp	r3, #64	; 0x40
 8005eb8:	d1b5      	bne.n	8005e26 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b083      	sub	sp, #12
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	695b      	ldr	r3, [r3, #20]
 8005ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005eda:	d11b      	bne.n	8005f14 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ee4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2220      	movs	r2, #32
 8005ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f00:	f043 0204 	orr.w	r2, r3, #4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e000      	b.n	8005f16 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	370c      	adds	r7, #12
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f20:	4770      	bx	lr

08005f22 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005f22:	b480      	push	{r7}
 8005f24:	b083      	sub	sp, #12
 8005f26:	af00      	add	r7, sp, #0
 8005f28:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f2e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005f32:	d103      	bne.n	8005f3c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005f3a:	e007      	b.n	8005f4c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f40:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005f44:	d102      	bne.n	8005f4c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2208      	movs	r2, #8
 8005f4a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005f5e:	4b06      	ldr	r3, [pc, #24]	; (8005f78 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005f60:	2201      	movs	r2, #1
 8005f62:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_PWR_EnableBkUpAccess+0x24>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005f6a:	687b      	ldr	r3, [r7, #4]
}
 8005f6c:	bf00      	nop
 8005f6e:	370c      	adds	r7, #12
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	420e0020 	.word	0x420e0020
 8005f7c:	40007000 	.word	0x40007000

08005f80 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005f86:	4b06      	ldr	r3, [pc, #24]	; (8005fa0 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005f8c:	4b05      	ldr	r3, [pc, #20]	; (8005fa4 <HAL_PWR_DisableBkUpAccess+0x24>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005f92:	687b      	ldr	r3, [r7, #4]
}
 8005f94:	bf00      	nop
 8005f96:	370c      	adds	r7, #12
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr
 8005fa0:	420e0020 	.word	0x420e0020
 8005fa4:	40007000 	.word	0x40007000

08005fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b086      	sub	sp, #24
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d101      	bne.n	8005fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e267      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d075      	beq.n	80060b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fc6:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 030c 	and.w	r3, r3, #12
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d00c      	beq.n	8005fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fd2:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d112      	bne.n	8006004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005fde:	4b82      	ldr	r3, [pc, #520]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fe0:	685b      	ldr	r3, [r3, #4]
 8005fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fea:	d10b      	bne.n	8006004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fec:	4b7e      	ldr	r3, [pc, #504]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d05b      	beq.n	80060b0 <HAL_RCC_OscConfig+0x108>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d157      	bne.n	80060b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	e242      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800600c:	d106      	bne.n	800601c <HAL_RCC_OscConfig+0x74>
 800600e:	4b76      	ldr	r3, [pc, #472]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a75      	ldr	r2, [pc, #468]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	e01d      	b.n	8006058 <HAL_RCC_OscConfig+0xb0>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	685b      	ldr	r3, [r3, #4]
 8006020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006024:	d10c      	bne.n	8006040 <HAL_RCC_OscConfig+0x98>
 8006026:	4b70      	ldr	r3, [pc, #448]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a6f      	ldr	r2, [pc, #444]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800602c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	4b6d      	ldr	r3, [pc, #436]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a6c      	ldr	r2, [pc, #432]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800603c:	6013      	str	r3, [r2, #0]
 800603e:	e00b      	b.n	8006058 <HAL_RCC_OscConfig+0xb0>
 8006040:	4b69      	ldr	r3, [pc, #420]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a68      	ldr	r2, [pc, #416]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800604a:	6013      	str	r3, [r2, #0]
 800604c:	4b66      	ldr	r3, [pc, #408]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a65      	ldr	r2, [pc, #404]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d013      	beq.n	8006088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006060:	f7fd f844 	bl	80030ec <HAL_GetTick>
 8006064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006066:	e008      	b.n	800607a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006068:	f7fd f840 	bl	80030ec <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	693b      	ldr	r3, [r7, #16]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	2b64      	cmp	r3, #100	; 0x64
 8006074:	d901      	bls.n	800607a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006076:	2303      	movs	r3, #3
 8006078:	e207      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800607a:	4b5b      	ldr	r3, [pc, #364]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006082:	2b00      	cmp	r3, #0
 8006084:	d0f0      	beq.n	8006068 <HAL_RCC_OscConfig+0xc0>
 8006086:	e014      	b.n	80060b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006088:	f7fd f830 	bl	80030ec <HAL_GetTick>
 800608c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006090:	f7fd f82c 	bl	80030ec <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b64      	cmp	r3, #100	; 0x64
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e1f3      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0xe8>
 80060ae:	e000      	b.n	80060b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0302 	and.w	r3, r3, #2
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d063      	beq.n	8006186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060be:	4b4a      	ldr	r3, [pc, #296]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060c0:	689b      	ldr	r3, [r3, #8]
 80060c2:	f003 030c 	and.w	r3, r3, #12
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00b      	beq.n	80060e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060ca:	4b47      	ldr	r3, [pc, #284]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80060d2:	2b08      	cmp	r3, #8
 80060d4:	d11c      	bne.n	8006110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80060d6:	4b44      	ldr	r3, [pc, #272]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d116      	bne.n	8006110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80060e2:	4b41      	ldr	r3, [pc, #260]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0302 	and.w	r3, r3, #2
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d005      	beq.n	80060fa <HAL_RCC_OscConfig+0x152>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68db      	ldr	r3, [r3, #12]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d001      	beq.n	80060fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e1c7      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060fa:	4b3b      	ldr	r3, [pc, #236]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	691b      	ldr	r3, [r3, #16]
 8006106:	00db      	lsls	r3, r3, #3
 8006108:	4937      	ldr	r1, [pc, #220]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800610a:	4313      	orrs	r3, r2
 800610c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800610e:	e03a      	b.n	8006186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d020      	beq.n	800615a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006118:	4b34      	ldr	r3, [pc, #208]	; (80061ec <HAL_RCC_OscConfig+0x244>)
 800611a:	2201      	movs	r2, #1
 800611c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800611e:	f7fc ffe5 	bl	80030ec <HAL_GetTick>
 8006122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006124:	e008      	b.n	8006138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006126:	f7fc ffe1 	bl	80030ec <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	2b02      	cmp	r3, #2
 8006132:	d901      	bls.n	8006138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006134:	2303      	movs	r3, #3
 8006136:	e1a8      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006138:	4b2b      	ldr	r3, [pc, #172]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b00      	cmp	r3, #0
 8006142:	d0f0      	beq.n	8006126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4925      	ldr	r1, [pc, #148]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 8006154:	4313      	orrs	r3, r2
 8006156:	600b      	str	r3, [r1, #0]
 8006158:	e015      	b.n	8006186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800615a:	4b24      	ldr	r3, [pc, #144]	; (80061ec <HAL_RCC_OscConfig+0x244>)
 800615c:	2200      	movs	r2, #0
 800615e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006160:	f7fc ffc4 	bl	80030ec <HAL_GetTick>
 8006164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006166:	e008      	b.n	800617a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006168:	f7fc ffc0 	bl	80030ec <HAL_GetTick>
 800616c:	4602      	mov	r2, r0
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	1ad3      	subs	r3, r2, r3
 8006172:	2b02      	cmp	r3, #2
 8006174:	d901      	bls.n	800617a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006176:	2303      	movs	r3, #3
 8006178:	e187      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d1f0      	bne.n	8006168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b00      	cmp	r3, #0
 8006190:	d036      	beq.n	8006200 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d016      	beq.n	80061c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800619a:	4b15      	ldr	r3, [pc, #84]	; (80061f0 <HAL_RCC_OscConfig+0x248>)
 800619c:	2201      	movs	r2, #1
 800619e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061a0:	f7fc ffa4 	bl	80030ec <HAL_GetTick>
 80061a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061a6:	e008      	b.n	80061ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061a8:	f7fc ffa0 	bl	80030ec <HAL_GetTick>
 80061ac:	4602      	mov	r2, r0
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d901      	bls.n	80061ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e167      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061ba:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_RCC_OscConfig+0x240>)
 80061bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0f0      	beq.n	80061a8 <HAL_RCC_OscConfig+0x200>
 80061c6:	e01b      	b.n	8006200 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80061c8:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <HAL_RCC_OscConfig+0x248>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ce:	f7fc ff8d 	bl	80030ec <HAL_GetTick>
 80061d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061d4:	e00e      	b.n	80061f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061d6:	f7fc ff89 	bl	80030ec <HAL_GetTick>
 80061da:	4602      	mov	r2, r0
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	1ad3      	subs	r3, r2, r3
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d907      	bls.n	80061f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80061e4:	2303      	movs	r3, #3
 80061e6:	e150      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
 80061e8:	40023800 	.word	0x40023800
 80061ec:	42470000 	.word	0x42470000
 80061f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80061f4:	4b88      	ldr	r3, [pc, #544]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80061f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80061f8:	f003 0302 	and.w	r3, r3, #2
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d1ea      	bne.n	80061d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0304 	and.w	r3, r3, #4
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 8097 	beq.w	800633c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800620e:	2300      	movs	r3, #0
 8006210:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006212:	4b81      	ldr	r3, [pc, #516]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006216:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10f      	bne.n	800623e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	4b7d      	ldr	r3, [pc, #500]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	4a7c      	ldr	r2, [pc, #496]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006228:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800622c:	6413      	str	r3, [r2, #64]	; 0x40
 800622e:	4b7a      	ldr	r3, [pc, #488]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006236:	60bb      	str	r3, [r7, #8]
 8006238:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800623a:	2301      	movs	r3, #1
 800623c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800623e:	4b77      	ldr	r3, [pc, #476]	; (800641c <HAL_RCC_OscConfig+0x474>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006246:	2b00      	cmp	r3, #0
 8006248:	d118      	bne.n	800627c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800624a:	4b74      	ldr	r3, [pc, #464]	; (800641c <HAL_RCC_OscConfig+0x474>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a73      	ldr	r2, [pc, #460]	; (800641c <HAL_RCC_OscConfig+0x474>)
 8006250:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006254:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006256:	f7fc ff49 	bl	80030ec <HAL_GetTick>
 800625a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800625c:	e008      	b.n	8006270 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800625e:	f7fc ff45 	bl	80030ec <HAL_GetTick>
 8006262:	4602      	mov	r2, r0
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	1ad3      	subs	r3, r2, r3
 8006268:	2b02      	cmp	r3, #2
 800626a:	d901      	bls.n	8006270 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	e10c      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006270:	4b6a      	ldr	r3, [pc, #424]	; (800641c <HAL_RCC_OscConfig+0x474>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006278:	2b00      	cmp	r3, #0
 800627a:	d0f0      	beq.n	800625e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d106      	bne.n	8006292 <HAL_RCC_OscConfig+0x2ea>
 8006284:	4b64      	ldr	r3, [pc, #400]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006288:	4a63      	ldr	r2, [pc, #396]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	6713      	str	r3, [r2, #112]	; 0x70
 8006290:	e01c      	b.n	80062cc <HAL_RCC_OscConfig+0x324>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	689b      	ldr	r3, [r3, #8]
 8006296:	2b05      	cmp	r3, #5
 8006298:	d10c      	bne.n	80062b4 <HAL_RCC_OscConfig+0x30c>
 800629a:	4b5f      	ldr	r3, [pc, #380]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 800629c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800629e:	4a5e      	ldr	r2, [pc, #376]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062a0:	f043 0304 	orr.w	r3, r3, #4
 80062a4:	6713      	str	r3, [r2, #112]	; 0x70
 80062a6:	4b5c      	ldr	r3, [pc, #368]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062aa:	4a5b      	ldr	r2, [pc, #364]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062ac:	f043 0301 	orr.w	r3, r3, #1
 80062b0:	6713      	str	r3, [r2, #112]	; 0x70
 80062b2:	e00b      	b.n	80062cc <HAL_RCC_OscConfig+0x324>
 80062b4:	4b58      	ldr	r3, [pc, #352]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062ba:	f023 0301 	bic.w	r3, r3, #1
 80062be:	6713      	str	r3, [r2, #112]	; 0x70
 80062c0:	4b55      	ldr	r3, [pc, #340]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062c4:	4a54      	ldr	r2, [pc, #336]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062c6:	f023 0304 	bic.w	r3, r3, #4
 80062ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d015      	beq.n	8006300 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80062d4:	f7fc ff0a 	bl	80030ec <HAL_GetTick>
 80062d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062da:	e00a      	b.n	80062f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80062dc:	f7fc ff06 	bl	80030ec <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d901      	bls.n	80062f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80062ee:	2303      	movs	r3, #3
 80062f0:	e0cb      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80062f2:	4b49      	ldr	r3, [pc, #292]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80062f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d0ee      	beq.n	80062dc <HAL_RCC_OscConfig+0x334>
 80062fe:	e014      	b.n	800632a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006300:	f7fc fef4 	bl	80030ec <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006306:	e00a      	b.n	800631e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006308:	f7fc fef0 	bl	80030ec <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	f241 3288 	movw	r2, #5000	; 0x1388
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e0b5      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800631e:	4b3e      	ldr	r3, [pc, #248]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006320:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1ee      	bne.n	8006308 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800632a:	7dfb      	ldrb	r3, [r7, #23]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d105      	bne.n	800633c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006330:	4b39      	ldr	r3, [pc, #228]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006334:	4a38      	ldr	r2, [pc, #224]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006336:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800633a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	699b      	ldr	r3, [r3, #24]
 8006340:	2b00      	cmp	r3, #0
 8006342:	f000 80a1 	beq.w	8006488 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006346:	4b34      	ldr	r3, [pc, #208]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	f003 030c 	and.w	r3, r3, #12
 800634e:	2b08      	cmp	r3, #8
 8006350:	d05c      	beq.n	800640c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	699b      	ldr	r3, [r3, #24]
 8006356:	2b02      	cmp	r3, #2
 8006358:	d141      	bne.n	80063de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800635a:	4b31      	ldr	r3, [pc, #196]	; (8006420 <HAL_RCC_OscConfig+0x478>)
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006360:	f7fc fec4 	bl	80030ec <HAL_GetTick>
 8006364:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006366:	e008      	b.n	800637a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006368:	f7fc fec0 	bl	80030ec <HAL_GetTick>
 800636c:	4602      	mov	r2, r0
 800636e:	693b      	ldr	r3, [r7, #16]
 8006370:	1ad3      	subs	r3, r2, r3
 8006372:	2b02      	cmp	r3, #2
 8006374:	d901      	bls.n	800637a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006376:	2303      	movs	r3, #3
 8006378:	e087      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800637a:	4b27      	ldr	r3, [pc, #156]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1f0      	bne.n	8006368 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	69da      	ldr	r2, [r3, #28]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a1b      	ldr	r3, [r3, #32]
 800638e:	431a      	orrs	r2, r3
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	019b      	lsls	r3, r3, #6
 8006396:	431a      	orrs	r2, r3
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639c:	085b      	lsrs	r3, r3, #1
 800639e:	3b01      	subs	r3, #1
 80063a0:	041b      	lsls	r3, r3, #16
 80063a2:	431a      	orrs	r2, r3
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a8:	061b      	lsls	r3, r3, #24
 80063aa:	491b      	ldr	r1, [pc, #108]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80063ac:	4313      	orrs	r3, r2
 80063ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80063b0:	4b1b      	ldr	r3, [pc, #108]	; (8006420 <HAL_RCC_OscConfig+0x478>)
 80063b2:	2201      	movs	r2, #1
 80063b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b6:	f7fc fe99 	bl	80030ec <HAL_GetTick>
 80063ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063bc:	e008      	b.n	80063d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063be:	f7fc fe95 	bl	80030ec <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	2b02      	cmp	r3, #2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e05c      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063d0:	4b11      	ldr	r3, [pc, #68]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0f0      	beq.n	80063be <HAL_RCC_OscConfig+0x416>
 80063dc:	e054      	b.n	8006488 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063de:	4b10      	ldr	r3, [pc, #64]	; (8006420 <HAL_RCC_OscConfig+0x478>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063e4:	f7fc fe82 	bl	80030ec <HAL_GetTick>
 80063e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063ea:	e008      	b.n	80063fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ec:	f7fc fe7e 	bl	80030ec <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d901      	bls.n	80063fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80063fa:	2303      	movs	r3, #3
 80063fc:	e045      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063fe:	4b06      	ldr	r3, [pc, #24]	; (8006418 <HAL_RCC_OscConfig+0x470>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006406:	2b00      	cmp	r3, #0
 8006408:	d1f0      	bne.n	80063ec <HAL_RCC_OscConfig+0x444>
 800640a:	e03d      	b.n	8006488 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	2b01      	cmp	r3, #1
 8006412:	d107      	bne.n	8006424 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	e038      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
 8006418:	40023800 	.word	0x40023800
 800641c:	40007000 	.word	0x40007000
 8006420:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <HAL_RCC_OscConfig+0x4ec>)
 8006426:	685b      	ldr	r3, [r3, #4]
 8006428:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d028      	beq.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800643c:	429a      	cmp	r2, r3
 800643e:	d121      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800644a:	429a      	cmp	r2, r3
 800644c:	d11a      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800644e:	68fa      	ldr	r2, [r7, #12]
 8006450:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006454:	4013      	ands	r3, r2
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800645a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800645c:	4293      	cmp	r3, r2
 800645e:	d111      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800646a:	085b      	lsrs	r3, r3, #1
 800646c:	3b01      	subs	r3, #1
 800646e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006470:	429a      	cmp	r2, r3
 8006472:	d107      	bne.n	8006484 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800647e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006480:	429a      	cmp	r2, r3
 8006482:	d001      	beq.n	8006488 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006488:	2300      	movs	r3, #0
}
 800648a:	4618      	mov	r0, r3
 800648c:	3718      	adds	r7, #24
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
 8006492:	bf00      	nop
 8006494:	40023800 	.word	0x40023800

08006498 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
 80064a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d101      	bne.n	80064ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064a8:	2301      	movs	r3, #1
 80064aa:	e0cc      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064ac:	4b68      	ldr	r3, [pc, #416]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90c      	bls.n	80064d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064ba:	4b65      	ldr	r3, [pc, #404]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	683a      	ldr	r2, [r7, #0]
 80064be:	b2d2      	uxtb	r2, r2
 80064c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064c2:	4b63      	ldr	r3, [pc, #396]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	f003 0307 	and.w	r3, r3, #7
 80064ca:	683a      	ldr	r2, [r7, #0]
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d001      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	e0b8      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0302 	and.w	r3, r3, #2
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d020      	beq.n	8006522 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d005      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80064ec:	4b59      	ldr	r3, [pc, #356]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	4a58      	ldr	r2, [pc, #352]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80064f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80064f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0308 	and.w	r3, r3, #8
 8006500:	2b00      	cmp	r3, #0
 8006502:	d005      	beq.n	8006510 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006504:	4b53      	ldr	r3, [pc, #332]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a52      	ldr	r2, [pc, #328]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800650e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006510:	4b50      	ldr	r3, [pc, #320]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	494d      	ldr	r1, [pc, #308]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800651e:	4313      	orrs	r3, r2
 8006520:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	d044      	beq.n	80065b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d107      	bne.n	8006546 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006536:	4b47      	ldr	r3, [pc, #284]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d119      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e07f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	685b      	ldr	r3, [r3, #4]
 800654a:	2b02      	cmp	r3, #2
 800654c:	d003      	beq.n	8006556 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006552:	2b03      	cmp	r3, #3
 8006554:	d107      	bne.n	8006566 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006556:	4b3f      	ldr	r3, [pc, #252]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d109      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e06f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006566:	4b3b      	ldr	r3, [pc, #236]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f003 0302 	and.w	r3, r3, #2
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006572:	2301      	movs	r3, #1
 8006574:	e067      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006576:	4b37      	ldr	r3, [pc, #220]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006578:	689b      	ldr	r3, [r3, #8]
 800657a:	f023 0203 	bic.w	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4934      	ldr	r1, [pc, #208]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	4313      	orrs	r3, r2
 8006586:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006588:	f7fc fdb0 	bl	80030ec <HAL_GetTick>
 800658c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800658e:	e00a      	b.n	80065a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006590:	f7fc fdac 	bl	80030ec <HAL_GetTick>
 8006594:	4602      	mov	r2, r0
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	1ad3      	subs	r3, r2, r3
 800659a:	f241 3288 	movw	r2, #5000	; 0x1388
 800659e:	4293      	cmp	r3, r2
 80065a0:	d901      	bls.n	80065a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065a2:	2303      	movs	r3, #3
 80065a4:	e04f      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065a6:	4b2b      	ldr	r3, [pc, #172]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 020c 	and.w	r2, r3, #12
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d1eb      	bne.n	8006590 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065b8:	4b25      	ldr	r3, [pc, #148]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f003 0307 	and.w	r3, r3, #7
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d20c      	bcs.n	80065e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80065c6:	4b22      	ldr	r3, [pc, #136]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80065c8:	683a      	ldr	r2, [r7, #0]
 80065ca:	b2d2      	uxtb	r2, r2
 80065cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80065ce:	4b20      	ldr	r3, [pc, #128]	; (8006650 <HAL_RCC_ClockConfig+0x1b8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 0307 	and.w	r3, r3, #7
 80065d6:	683a      	ldr	r2, [r7, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	d001      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80065dc:	2301      	movs	r3, #1
 80065de:	e032      	b.n	8006646 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f003 0304 	and.w	r3, r3, #4
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d008      	beq.n	80065fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80065ec:	4b19      	ldr	r3, [pc, #100]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	689b      	ldr	r3, [r3, #8]
 80065f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	4916      	ldr	r1, [pc, #88]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 80065fa:	4313      	orrs	r3, r2
 80065fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f003 0308 	and.w	r3, r3, #8
 8006606:	2b00      	cmp	r3, #0
 8006608:	d009      	beq.n	800661e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800660a:	4b12      	ldr	r3, [pc, #72]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	691b      	ldr	r3, [r3, #16]
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	490e      	ldr	r1, [pc, #56]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 800661a:	4313      	orrs	r3, r2
 800661c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800661e:	f000 f821 	bl	8006664 <HAL_RCC_GetSysClockFreq>
 8006622:	4602      	mov	r2, r0
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_RCC_ClockConfig+0x1bc>)
 8006626:	689b      	ldr	r3, [r3, #8]
 8006628:	091b      	lsrs	r3, r3, #4
 800662a:	f003 030f 	and.w	r3, r3, #15
 800662e:	490a      	ldr	r1, [pc, #40]	; (8006658 <HAL_RCC_ClockConfig+0x1c0>)
 8006630:	5ccb      	ldrb	r3, [r1, r3]
 8006632:	fa22 f303 	lsr.w	r3, r2, r3
 8006636:	4a09      	ldr	r2, [pc, #36]	; (800665c <HAL_RCC_ClockConfig+0x1c4>)
 8006638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800663a:	4b09      	ldr	r3, [pc, #36]	; (8006660 <HAL_RCC_ClockConfig+0x1c8>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f7fc fd10 	bl	8003064 <HAL_InitTick>

  return HAL_OK;
 8006644:	2300      	movs	r3, #0
}
 8006646:	4618      	mov	r0, r3
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	40023c00 	.word	0x40023c00
 8006654:	40023800 	.word	0x40023800
 8006658:	08010634 	.word	0x08010634
 800665c:	20000000 	.word	0x20000000
 8006660:	20000004 	.word	0x20000004

08006664 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006668:	b090      	sub	sp, #64	; 0x40
 800666a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800666c:	2300      	movs	r3, #0
 800666e:	637b      	str	r3, [r7, #52]	; 0x34
 8006670:	2300      	movs	r3, #0
 8006672:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006674:	2300      	movs	r3, #0
 8006676:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006678:	2300      	movs	r3, #0
 800667a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800667c:	4b59      	ldr	r3, [pc, #356]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f003 030c 	and.w	r3, r3, #12
 8006684:	2b08      	cmp	r3, #8
 8006686:	d00d      	beq.n	80066a4 <HAL_RCC_GetSysClockFreq+0x40>
 8006688:	2b08      	cmp	r3, #8
 800668a:	f200 80a1 	bhi.w	80067d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800668e:	2b00      	cmp	r3, #0
 8006690:	d002      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0x34>
 8006692:	2b04      	cmp	r3, #4
 8006694:	d003      	beq.n	800669e <HAL_RCC_GetSysClockFreq+0x3a>
 8006696:	e09b      	b.n	80067d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006698:	4b53      	ldr	r3, [pc, #332]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800669a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800669c:	e09b      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800669e:	4b53      	ldr	r3, [pc, #332]	; (80067ec <HAL_RCC_GetSysClockFreq+0x188>)
 80066a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066a2:	e098      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80066a4:	4b4f      	ldr	r3, [pc, #316]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80066ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80066ae:	4b4d      	ldr	r3, [pc, #308]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d028      	beq.n	800670c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80066ba:	4b4a      	ldr	r3, [pc, #296]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	099b      	lsrs	r3, r3, #6
 80066c0:	2200      	movs	r2, #0
 80066c2:	623b      	str	r3, [r7, #32]
 80066c4:	627a      	str	r2, [r7, #36]	; 0x24
 80066c6:	6a3b      	ldr	r3, [r7, #32]
 80066c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80066cc:	2100      	movs	r1, #0
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <HAL_RCC_GetSysClockFreq+0x188>)
 80066d0:	fb03 f201 	mul.w	r2, r3, r1
 80066d4:	2300      	movs	r3, #0
 80066d6:	fb00 f303 	mul.w	r3, r0, r3
 80066da:	4413      	add	r3, r2
 80066dc:	4a43      	ldr	r2, [pc, #268]	; (80067ec <HAL_RCC_GetSysClockFreq+0x188>)
 80066de:	fba0 1202 	umull	r1, r2, r0, r2
 80066e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066e4:	460a      	mov	r2, r1
 80066e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80066e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066ea:	4413      	add	r3, r2
 80066ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80066ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f0:	2200      	movs	r2, #0
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	61fa      	str	r2, [r7, #28]
 80066f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80066fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80066fe:	f7fa fac3 	bl	8000c88 <__aeabi_uldivmod>
 8006702:	4602      	mov	r2, r0
 8006704:	460b      	mov	r3, r1
 8006706:	4613      	mov	r3, r2
 8006708:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670a:	e053      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800670c:	4b35      	ldr	r3, [pc, #212]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	099b      	lsrs	r3, r3, #6
 8006712:	2200      	movs	r2, #0
 8006714:	613b      	str	r3, [r7, #16]
 8006716:	617a      	str	r2, [r7, #20]
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800671e:	f04f 0b00 	mov.w	fp, #0
 8006722:	4652      	mov	r2, sl
 8006724:	465b      	mov	r3, fp
 8006726:	f04f 0000 	mov.w	r0, #0
 800672a:	f04f 0100 	mov.w	r1, #0
 800672e:	0159      	lsls	r1, r3, #5
 8006730:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006734:	0150      	lsls	r0, r2, #5
 8006736:	4602      	mov	r2, r0
 8006738:	460b      	mov	r3, r1
 800673a:	ebb2 080a 	subs.w	r8, r2, sl
 800673e:	eb63 090b 	sbc.w	r9, r3, fp
 8006742:	f04f 0200 	mov.w	r2, #0
 8006746:	f04f 0300 	mov.w	r3, #0
 800674a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800674e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006752:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006756:	ebb2 0408 	subs.w	r4, r2, r8
 800675a:	eb63 0509 	sbc.w	r5, r3, r9
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	00eb      	lsls	r3, r5, #3
 8006768:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800676c:	00e2      	lsls	r2, r4, #3
 800676e:	4614      	mov	r4, r2
 8006770:	461d      	mov	r5, r3
 8006772:	eb14 030a 	adds.w	r3, r4, sl
 8006776:	603b      	str	r3, [r7, #0]
 8006778:	eb45 030b 	adc.w	r3, r5, fp
 800677c:	607b      	str	r3, [r7, #4]
 800677e:	f04f 0200 	mov.w	r2, #0
 8006782:	f04f 0300 	mov.w	r3, #0
 8006786:	e9d7 4500 	ldrd	r4, r5, [r7]
 800678a:	4629      	mov	r1, r5
 800678c:	028b      	lsls	r3, r1, #10
 800678e:	4621      	mov	r1, r4
 8006790:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006794:	4621      	mov	r1, r4
 8006796:	028a      	lsls	r2, r1, #10
 8006798:	4610      	mov	r0, r2
 800679a:	4619      	mov	r1, r3
 800679c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679e:	2200      	movs	r2, #0
 80067a0:	60bb      	str	r3, [r7, #8]
 80067a2:	60fa      	str	r2, [r7, #12]
 80067a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80067a8:	f7fa fa6e 	bl	8000c88 <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4613      	mov	r3, r2
 80067b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80067b4:	4b0b      	ldr	r3, [pc, #44]	; (80067e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	0c1b      	lsrs	r3, r3, #16
 80067ba:	f003 0303 	and.w	r3, r3, #3
 80067be:	3301      	adds	r3, #1
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80067c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80067c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80067cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067ce:	e002      	b.n	80067d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80067d0:	4b05      	ldr	r3, [pc, #20]	; (80067e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80067d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80067d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3740      	adds	r7, #64	; 0x40
 80067dc:	46bd      	mov	sp, r7
 80067de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067e2:	bf00      	nop
 80067e4:	40023800 	.word	0x40023800
 80067e8:	00f42400 	.word	0x00f42400
 80067ec:	017d7840 	.word	0x017d7840

080067f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80067f0:	b480      	push	{r7}
 80067f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80067f4:	4b03      	ldr	r3, [pc, #12]	; (8006804 <HAL_RCC_GetHCLKFreq+0x14>)
 80067f6:	681b      	ldr	r3, [r3, #0]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20000000 	.word	0x20000000

08006808 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800680c:	f7ff fff0 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006810:	4602      	mov	r2, r0
 8006812:	4b05      	ldr	r3, [pc, #20]	; (8006828 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006814:	689b      	ldr	r3, [r3, #8]
 8006816:	0a9b      	lsrs	r3, r3, #10
 8006818:	f003 0307 	and.w	r3, r3, #7
 800681c:	4903      	ldr	r1, [pc, #12]	; (800682c <HAL_RCC_GetPCLK1Freq+0x24>)
 800681e:	5ccb      	ldrb	r3, [r1, r3]
 8006820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006824:	4618      	mov	r0, r3
 8006826:	bd80      	pop	{r7, pc}
 8006828:	40023800 	.word	0x40023800
 800682c:	08010644 	.word	0x08010644

08006830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006834:	f7ff ffdc 	bl	80067f0 <HAL_RCC_GetHCLKFreq>
 8006838:	4602      	mov	r2, r0
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <HAL_RCC_GetPCLK2Freq+0x20>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	0b5b      	lsrs	r3, r3, #13
 8006840:	f003 0307 	and.w	r3, r3, #7
 8006844:	4903      	ldr	r1, [pc, #12]	; (8006854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006846:	5ccb      	ldrb	r3, [r1, r3]
 8006848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800684c:	4618      	mov	r0, r3
 800684e:	bd80      	pop	{r7, pc}
 8006850:	40023800 	.word	0x40023800
 8006854:	08010644 	.word	0x08010644

08006858 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d101      	bne.n	800686a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	e041      	b.n	80068ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d106      	bne.n	8006884 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f7fc f912 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2202      	movs	r2, #2
 8006888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	3304      	adds	r3, #4
 8006894:	4619      	mov	r1, r3
 8006896:	4610      	mov	r0, r2
 8006898:	f000 fc0c 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2201      	movs	r2, #1
 80068a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2201      	movs	r2, #1
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2201      	movs	r2, #1
 80068b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2201      	movs	r2, #1
 80068b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2201      	movs	r2, #1
 80068d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2201      	movs	r2, #1
 80068e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80068ec:	2300      	movs	r3, #0
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3708      	adds	r7, #8
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b082      	sub	sp, #8
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d101      	bne.n	8006908 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	e041      	b.n	800698c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800690e:	b2db      	uxtb	r3, r3
 8006910:	2b00      	cmp	r3, #0
 8006912:	d106      	bne.n	8006922 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f839 	bl	8006994 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2202      	movs	r2, #2
 8006926:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	3304      	adds	r3, #4
 8006932:	4619      	mov	r1, r3
 8006934:	4610      	mov	r0, r2
 8006936:	f000 fbbd 	bl	80070b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800699c:	bf00      	nop
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr

080069a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d109      	bne.n	80069cc <HAL_TIM_PWM_Start+0x24>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	bf14      	ite	ne
 80069c4:	2301      	movne	r3, #1
 80069c6:	2300      	moveq	r3, #0
 80069c8:	b2db      	uxtb	r3, r3
 80069ca:	e022      	b.n	8006a12 <HAL_TIM_PWM_Start+0x6a>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b04      	cmp	r3, #4
 80069d0:	d109      	bne.n	80069e6 <HAL_TIM_PWM_Start+0x3e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b01      	cmp	r3, #1
 80069dc:	bf14      	ite	ne
 80069de:	2301      	movne	r3, #1
 80069e0:	2300      	moveq	r3, #0
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	e015      	b.n	8006a12 <HAL_TIM_PWM_Start+0x6a>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d109      	bne.n	8006a00 <HAL_TIM_PWM_Start+0x58>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069f2:	b2db      	uxtb	r3, r3
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	bf14      	ite	ne
 80069f8:	2301      	movne	r3, #1
 80069fa:	2300      	moveq	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	e008      	b.n	8006a12 <HAL_TIM_PWM_Start+0x6a>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a06:	b2db      	uxtb	r3, r3
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	bf14      	ite	ne
 8006a0c:	2301      	movne	r3, #1
 8006a0e:	2300      	moveq	r3, #0
 8006a10:	b2db      	uxtb	r3, r3
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d001      	beq.n	8006a1a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	e07c      	b.n	8006b14 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d104      	bne.n	8006a2a <HAL_TIM_PWM_Start+0x82>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2202      	movs	r2, #2
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a28:	e013      	b.n	8006a52 <HAL_TIM_PWM_Start+0xaa>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b04      	cmp	r3, #4
 8006a2e:	d104      	bne.n	8006a3a <HAL_TIM_PWM_Start+0x92>
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2202      	movs	r2, #2
 8006a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a38:	e00b      	b.n	8006a52 <HAL_TIM_PWM_Start+0xaa>
 8006a3a:	683b      	ldr	r3, [r7, #0]
 8006a3c:	2b08      	cmp	r3, #8
 8006a3e:	d104      	bne.n	8006a4a <HAL_TIM_PWM_Start+0xa2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2202      	movs	r2, #2
 8006a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a48:	e003      	b.n	8006a52 <HAL_TIM_PWM_Start+0xaa>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2202      	movs	r2, #2
 8006a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	2201      	movs	r2, #1
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f000 fe14 	bl	8007688 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a2d      	ldr	r2, [pc, #180]	; (8006b1c <HAL_TIM_PWM_Start+0x174>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d004      	beq.n	8006a74 <HAL_TIM_PWM_Start+0xcc>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a2c      	ldr	r2, [pc, #176]	; (8006b20 <HAL_TIM_PWM_Start+0x178>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d101      	bne.n	8006a78 <HAL_TIM_PWM_Start+0xd0>
 8006a74:	2301      	movs	r3, #1
 8006a76:	e000      	b.n	8006a7a <HAL_TIM_PWM_Start+0xd2>
 8006a78:	2300      	movs	r3, #0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d007      	beq.n	8006a8e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a22      	ldr	r2, [pc, #136]	; (8006b1c <HAL_TIM_PWM_Start+0x174>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d022      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006aa0:	d01d      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a1f      	ldr	r2, [pc, #124]	; (8006b24 <HAL_TIM_PWM_Start+0x17c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d018      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a1d      	ldr	r2, [pc, #116]	; (8006b28 <HAL_TIM_PWM_Start+0x180>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d013      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1c      	ldr	r2, [pc, #112]	; (8006b2c <HAL_TIM_PWM_Start+0x184>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d00e      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4a16      	ldr	r2, [pc, #88]	; (8006b20 <HAL_TIM_PWM_Start+0x178>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d009      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a18      	ldr	r2, [pc, #96]	; (8006b30 <HAL_TIM_PWM_Start+0x188>)
 8006ad0:	4293      	cmp	r3, r2
 8006ad2:	d004      	beq.n	8006ade <HAL_TIM_PWM_Start+0x136>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <HAL_TIM_PWM_Start+0x18c>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d111      	bne.n	8006b02 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 0307 	and.w	r3, r3, #7
 8006ae8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b06      	cmp	r3, #6
 8006aee:	d010      	beq.n	8006b12 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	681a      	ldr	r2, [r3, #0]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f042 0201 	orr.w	r2, r2, #1
 8006afe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b00:	e007      	b.n	8006b12 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f042 0201 	orr.w	r2, r2, #1
 8006b10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b12:	2300      	movs	r3, #0
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	3710      	adds	r7, #16
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40010400 	.word	0x40010400
 8006b24:	40000400 	.word	0x40000400
 8006b28:	40000800 	.word	0x40000800
 8006b2c:	40000c00 	.word	0x40000c00
 8006b30:	40014000 	.word	0x40014000
 8006b34:	40001800 	.word	0x40001800

08006b38 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
 8006b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d101      	bne.n	8006b4c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e097      	b.n	8006c7c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b52:	b2db      	uxtb	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d106      	bne.n	8006b66 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f7fb ffff 	bl	8002b64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6812      	ldr	r2, [r2, #0]
 8006b78:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b7c:	f023 0307 	bic.w	r3, r3, #7
 8006b80:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681a      	ldr	r2, [r3, #0]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f000 fa91 	bl	80070b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	697a      	ldr	r2, [r7, #20]
 8006bb0:	4313      	orrs	r3, r2
 8006bb2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bb4:	693b      	ldr	r3, [r7, #16]
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bba:	f023 0303 	bic.w	r3, r3, #3
 8006bbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	699b      	ldr	r3, [r3, #24]
 8006bc8:	021b      	lsls	r3, r3, #8
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bd8:	f023 030c 	bic.w	r3, r3, #12
 8006bdc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006be4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006be8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	68da      	ldr	r2, [r3, #12]
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	693a      	ldr	r2, [r7, #16]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	011a      	lsls	r2, r3, #4
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6a1b      	ldr	r3, [r3, #32]
 8006c06:	031b      	lsls	r3, r3, #12
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c16:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c1e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	685a      	ldr	r2, [r3, #4]
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	695b      	ldr	r3, [r3, #20]
 8006c28:	011b      	lsls	r3, r3, #4
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	697a      	ldr	r2, [r7, #20]
 8006c38:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	693a      	ldr	r2, [r7, #16]
 8006c40:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68fa      	ldr	r2, [r7, #12]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2201      	movs	r2, #1
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2201      	movs	r2, #1
 8006c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	2201      	movs	r2, #1
 8006c76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c7a:	2300      	movs	r3, #0
}
 8006c7c:	4618      	mov	r0, r3
 8006c7e:	3718      	adds	r7, #24
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b084      	sub	sp, #16
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c94:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006c9c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006ca4:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cac:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d110      	bne.n	8006cd6 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d102      	bne.n	8006cc0 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cba:	7b7b      	ldrb	r3, [r7, #13]
 8006cbc:	2b01      	cmp	r3, #1
 8006cbe:	d001      	beq.n	8006cc4 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e069      	b.n	8006d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2202      	movs	r2, #2
 8006cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2202      	movs	r2, #2
 8006cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006cd4:	e031      	b.n	8006d3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d110      	bne.n	8006cfe <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d102      	bne.n	8006ce8 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ce2:	7b3b      	ldrb	r3, [r7, #12]
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d001      	beq.n	8006cec <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e055      	b.n	8006d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2202      	movs	r2, #2
 8006cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2202      	movs	r2, #2
 8006cf8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006cfc:	e01d      	b.n	8006d3a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cfe:	7bfb      	ldrb	r3, [r7, #15]
 8006d00:	2b01      	cmp	r3, #1
 8006d02:	d108      	bne.n	8006d16 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d04:	7bbb      	ldrb	r3, [r7, #14]
 8006d06:	2b01      	cmp	r3, #1
 8006d08:	d105      	bne.n	8006d16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d0a:	7b7b      	ldrb	r3, [r7, #13]
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d102      	bne.n	8006d16 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d10:	7b3b      	ldrb	r3, [r7, #12]
 8006d12:	2b01      	cmp	r3, #1
 8006d14:	d001      	beq.n	8006d1a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e03e      	b.n	8006d98 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2202      	movs	r2, #2
 8006d1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2202      	movs	r2, #2
 8006d26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2202      	movs	r2, #2
 8006d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2202      	movs	r2, #2
 8006d36:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_TIM_Encoder_Start+0xc4>
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	2b04      	cmp	r3, #4
 8006d44:	d008      	beq.n	8006d58 <HAL_TIM_Encoder_Start+0xd4>
 8006d46:	e00f      	b.n	8006d68 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	2100      	movs	r1, #0
 8006d50:	4618      	mov	r0, r3
 8006d52:	f000 fc99 	bl	8007688 <TIM_CCxChannelCmd>
      break;
 8006d56:	e016      	b.n	8006d86 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	2104      	movs	r1, #4
 8006d60:	4618      	mov	r0, r3
 8006d62:	f000 fc91 	bl	8007688 <TIM_CCxChannelCmd>
      break;
 8006d66:	e00e      	b.n	8006d86 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	2100      	movs	r1, #0
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 fc89 	bl	8007688 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	2201      	movs	r2, #1
 8006d7c:	2104      	movs	r1, #4
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 fc82 	bl	8007688 <TIM_CCxChannelCmd>
      break;
 8006d84:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f042 0201 	orr.w	r2, r2, #1
 8006d94:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006d96:	2300      	movs	r3, #0
}
 8006d98:	4618      	mov	r0, r3
 8006d9a:	3710      	adds	r7, #16
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	bd80      	pop	{r7, pc}

08006da0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b086      	sub	sp, #24
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006dac:	2300      	movs	r3, #0
 8006dae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006db6:	2b01      	cmp	r3, #1
 8006db8:	d101      	bne.n	8006dbe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006dba:	2302      	movs	r3, #2
 8006dbc:	e0ae      	b.n	8006f1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b0c      	cmp	r3, #12
 8006dca:	f200 809f 	bhi.w	8006f0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006dce:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd4:	08006e09 	.word	0x08006e09
 8006dd8:	08006f0d 	.word	0x08006f0d
 8006ddc:	08006f0d 	.word	0x08006f0d
 8006de0:	08006f0d 	.word	0x08006f0d
 8006de4:	08006e49 	.word	0x08006e49
 8006de8:	08006f0d 	.word	0x08006f0d
 8006dec:	08006f0d 	.word	0x08006f0d
 8006df0:	08006f0d 	.word	0x08006f0d
 8006df4:	08006e8b 	.word	0x08006e8b
 8006df8:	08006f0d 	.word	0x08006f0d
 8006dfc:	08006f0d 	.word	0x08006f0d
 8006e00:	08006f0d 	.word	0x08006f0d
 8006e04:	08006ecb 	.word	0x08006ecb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68b9      	ldr	r1, [r7, #8]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f000 f9f0 	bl	80071f4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	699a      	ldr	r2, [r3, #24]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f042 0208 	orr.w	r2, r2, #8
 8006e22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	699a      	ldr	r2, [r3, #24]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	f022 0204 	bic.w	r2, r2, #4
 8006e32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	6999      	ldr	r1, [r3, #24]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	430a      	orrs	r2, r1
 8006e44:	619a      	str	r2, [r3, #24]
      break;
 8006e46:	e064      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f000 fa40 	bl	80072d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	699a      	ldr	r2, [r3, #24]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	6999      	ldr	r1, [r3, #24]
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	430a      	orrs	r2, r1
 8006e86:	619a      	str	r2, [r3, #24]
      break;
 8006e88:	e043      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68b9      	ldr	r1, [r7, #8]
 8006e90:	4618      	mov	r0, r3
 8006e92:	f000 fa95 	bl	80073c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	69da      	ldr	r2, [r3, #28]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f042 0208 	orr.w	r2, r2, #8
 8006ea4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f022 0204 	bic.w	r2, r2, #4
 8006eb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69d9      	ldr	r1, [r3, #28]
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	691a      	ldr	r2, [r3, #16]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	430a      	orrs	r2, r1
 8006ec6:	61da      	str	r2, [r3, #28]
      break;
 8006ec8:	e023      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68b9      	ldr	r1, [r7, #8]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f000 fae9 	bl	80074a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	69da      	ldr	r2, [r3, #28]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ee4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	69da      	ldr	r2, [r3, #28]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ef4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	69d9      	ldr	r1, [r3, #28]
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	691b      	ldr	r3, [r3, #16]
 8006f00:	021a      	lsls	r2, r3, #8
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	430a      	orrs	r2, r1
 8006f08:	61da      	str	r2, [r3, #28]
      break;
 8006f0a:	e002      	b.n	8006f12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8006f10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2200      	movs	r2, #0
 8006f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	3718      	adds	r7, #24
 8006f20:	46bd      	mov	sp, r7
 8006f22:	bd80      	pop	{r7, pc}

08006f24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b084      	sub	sp, #16
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f38:	2b01      	cmp	r3, #1
 8006f3a:	d101      	bne.n	8006f40 <HAL_TIM_ConfigClockSource+0x1c>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	e0b4      	b.n	80070aa <HAL_TIM_ConfigClockSource+0x186>
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2201      	movs	r2, #1
 8006f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	689b      	ldr	r3, [r3, #8]
 8006f56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	68ba      	ldr	r2, [r7, #8]
 8006f6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f78:	d03e      	beq.n	8006ff8 <HAL_TIM_ConfigClockSource+0xd4>
 8006f7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f7e:	f200 8087 	bhi.w	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006f82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f86:	f000 8086 	beq.w	8007096 <HAL_TIM_ConfigClockSource+0x172>
 8006f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f8e:	d87f      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b70      	cmp	r3, #112	; 0x70
 8006f92:	d01a      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0xa6>
 8006f94:	2b70      	cmp	r3, #112	; 0x70
 8006f96:	d87b      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b60      	cmp	r3, #96	; 0x60
 8006f9a:	d050      	beq.n	800703e <HAL_TIM_ConfigClockSource+0x11a>
 8006f9c:	2b60      	cmp	r3, #96	; 0x60
 8006f9e:	d877      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b50      	cmp	r3, #80	; 0x50
 8006fa2:	d03c      	beq.n	800701e <HAL_TIM_ConfigClockSource+0xfa>
 8006fa4:	2b50      	cmp	r3, #80	; 0x50
 8006fa6:	d873      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa8:	2b40      	cmp	r3, #64	; 0x40
 8006faa:	d058      	beq.n	800705e <HAL_TIM_ConfigClockSource+0x13a>
 8006fac:	2b40      	cmp	r3, #64	; 0x40
 8006fae:	d86f      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb0:	2b30      	cmp	r3, #48	; 0x30
 8006fb2:	d064      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fb4:	2b30      	cmp	r3, #48	; 0x30
 8006fb6:	d86b      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fb8:	2b20      	cmp	r3, #32
 8006fba:	d060      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d867      	bhi.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d05c      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fc4:	2b10      	cmp	r3, #16
 8006fc6:	d05a      	beq.n	800707e <HAL_TIM_ConfigClockSource+0x15a>
 8006fc8:	e062      	b.n	8007090 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6818      	ldr	r0, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	6899      	ldr	r1, [r3, #8]
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	685a      	ldr	r2, [r3, #4]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	68db      	ldr	r3, [r3, #12]
 8006fda:	f000 fb35 	bl	8007648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	689b      	ldr	r3, [r3, #8]
 8006fe4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fe6:	68bb      	ldr	r3, [r7, #8]
 8006fe8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	609a      	str	r2, [r3, #8]
      break;
 8006ff6:	e04f      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	6899      	ldr	r1, [r3, #8]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f000 fb1e 	bl	8007648 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	689a      	ldr	r2, [r3, #8]
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800701a:	609a      	str	r2, [r3, #8]
      break;
 800701c:	e03c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	6859      	ldr	r1, [r3, #4]
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	68db      	ldr	r3, [r3, #12]
 800702a:	461a      	mov	r2, r3
 800702c:	f000 fa92 	bl	8007554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2150      	movs	r1, #80	; 0x50
 8007036:	4618      	mov	r0, r3
 8007038:	f000 faeb 	bl	8007612 <TIM_ITRx_SetConfig>
      break;
 800703c:	e02c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6818      	ldr	r0, [r3, #0]
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	6859      	ldr	r1, [r3, #4]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	461a      	mov	r2, r3
 800704c:	f000 fab1 	bl	80075b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	2160      	movs	r1, #96	; 0x60
 8007056:	4618      	mov	r0, r3
 8007058:	f000 fadb 	bl	8007612 <TIM_ITRx_SetConfig>
      break;
 800705c:	e01c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6818      	ldr	r0, [r3, #0]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	6859      	ldr	r1, [r3, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	461a      	mov	r2, r3
 800706c:	f000 fa72 	bl	8007554 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2140      	movs	r1, #64	; 0x40
 8007076:	4618      	mov	r0, r3
 8007078:	f000 facb 	bl	8007612 <TIM_ITRx_SetConfig>
      break;
 800707c:	e00c      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681a      	ldr	r2, [r3, #0]
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4619      	mov	r1, r3
 8007088:	4610      	mov	r0, r2
 800708a:	f000 fac2 	bl	8007612 <TIM_ITRx_SetConfig>
      break;
 800708e:	e003      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007090:	2301      	movs	r3, #1
 8007092:	73fb      	strb	r3, [r7, #15]
      break;
 8007094:	e000      	b.n	8007098 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007096:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2201      	movs	r2, #1
 800709c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}
	...

080070b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b4:	b480      	push	{r7}
 80070b6:	b085      	sub	sp, #20
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	4a40      	ldr	r2, [pc, #256]	; (80071c8 <TIM_Base_SetConfig+0x114>)
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d013      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d2:	d00f      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	4a3d      	ldr	r2, [pc, #244]	; (80071cc <TIM_Base_SetConfig+0x118>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d00b      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	4a3c      	ldr	r2, [pc, #240]	; (80071d0 <TIM_Base_SetConfig+0x11c>)
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d007      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	4a3b      	ldr	r2, [pc, #236]	; (80071d4 <TIM_Base_SetConfig+0x120>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d003      	beq.n	80070f4 <TIM_Base_SetConfig+0x40>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4a3a      	ldr	r2, [pc, #232]	; (80071d8 <TIM_Base_SetConfig+0x124>)
 80070f0:	4293      	cmp	r3, r2
 80070f2:	d108      	bne.n	8007106 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	4313      	orrs	r3, r2
 8007104:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a2f      	ldr	r2, [pc, #188]	; (80071c8 <TIM_Base_SetConfig+0x114>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d02b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007114:	d027      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a2c      	ldr	r2, [pc, #176]	; (80071cc <TIM_Base_SetConfig+0x118>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d023      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a2b      	ldr	r2, [pc, #172]	; (80071d0 <TIM_Base_SetConfig+0x11c>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d01f      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a2a      	ldr	r2, [pc, #168]	; (80071d4 <TIM_Base_SetConfig+0x120>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d01b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a29      	ldr	r2, [pc, #164]	; (80071d8 <TIM_Base_SetConfig+0x124>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d017      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a28      	ldr	r2, [pc, #160]	; (80071dc <TIM_Base_SetConfig+0x128>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d013      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a27      	ldr	r2, [pc, #156]	; (80071e0 <TIM_Base_SetConfig+0x12c>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00f      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a26      	ldr	r2, [pc, #152]	; (80071e4 <TIM_Base_SetConfig+0x130>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d00b      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a25      	ldr	r2, [pc, #148]	; (80071e8 <TIM_Base_SetConfig+0x134>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d007      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a24      	ldr	r2, [pc, #144]	; (80071ec <TIM_Base_SetConfig+0x138>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d003      	beq.n	8007166 <TIM_Base_SetConfig+0xb2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a23      	ldr	r2, [pc, #140]	; (80071f0 <TIM_Base_SetConfig+0x13c>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d108      	bne.n	8007178 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800716c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800716e:	683b      	ldr	r3, [r7, #0]
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4313      	orrs	r3, r2
 8007176:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	695b      	ldr	r3, [r3, #20]
 8007182:	4313      	orrs	r3, r2
 8007184:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	68fa      	ldr	r2, [r7, #12]
 800718a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	689a      	ldr	r2, [r3, #8]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a0a      	ldr	r2, [pc, #40]	; (80071c8 <TIM_Base_SetConfig+0x114>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d003      	beq.n	80071ac <TIM_Base_SetConfig+0xf8>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	4a0c      	ldr	r2, [pc, #48]	; (80071d8 <TIM_Base_SetConfig+0x124>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d103      	bne.n	80071b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	691a      	ldr	r2, [r3, #16]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	615a      	str	r2, [r3, #20]
}
 80071ba:	bf00      	nop
 80071bc:	3714      	adds	r7, #20
 80071be:	46bd      	mov	sp, r7
 80071c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c4:	4770      	bx	lr
 80071c6:	bf00      	nop
 80071c8:	40010000 	.word	0x40010000
 80071cc:	40000400 	.word	0x40000400
 80071d0:	40000800 	.word	0x40000800
 80071d4:	40000c00 	.word	0x40000c00
 80071d8:	40010400 	.word	0x40010400
 80071dc:	40014000 	.word	0x40014000
 80071e0:	40014400 	.word	0x40014400
 80071e4:	40014800 	.word	0x40014800
 80071e8:	40001800 	.word	0x40001800
 80071ec:	40001c00 	.word	0x40001c00
 80071f0:	40002000 	.word	0x40002000

080071f4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b087      	sub	sp, #28
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	6a1b      	ldr	r3, [r3, #32]
 8007202:	f023 0201 	bic.w	r2, r3, #1
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6a1b      	ldr	r3, [r3, #32]
 800720e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	685b      	ldr	r3, [r3, #4]
 8007214:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	699b      	ldr	r3, [r3, #24]
 800721a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007222:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0303 	bic.w	r3, r3, #3
 800722a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4313      	orrs	r3, r2
 8007234:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	f023 0302 	bic.w	r3, r3, #2
 800723c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	697a      	ldr	r2, [r7, #20]
 8007244:	4313      	orrs	r3, r2
 8007246:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a20      	ldr	r2, [pc, #128]	; (80072cc <TIM_OC1_SetConfig+0xd8>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d003      	beq.n	8007258 <TIM_OC1_SetConfig+0x64>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a1f      	ldr	r2, [pc, #124]	; (80072d0 <TIM_OC1_SetConfig+0xdc>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d10c      	bne.n	8007272 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f023 0308 	bic.w	r3, r3, #8
 800725e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007260:	683b      	ldr	r3, [r7, #0]
 8007262:	68db      	ldr	r3, [r3, #12]
 8007264:	697a      	ldr	r2, [r7, #20]
 8007266:	4313      	orrs	r3, r2
 8007268:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	f023 0304 	bic.w	r3, r3, #4
 8007270:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a15      	ldr	r2, [pc, #84]	; (80072cc <TIM_OC1_SetConfig+0xd8>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d003      	beq.n	8007282 <TIM_OC1_SetConfig+0x8e>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a14      	ldr	r2, [pc, #80]	; (80072d0 <TIM_OC1_SetConfig+0xdc>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d111      	bne.n	80072a6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	693a      	ldr	r2, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800729c:	683b      	ldr	r3, [r7, #0]
 800729e:	699b      	ldr	r3, [r3, #24]
 80072a0:	693a      	ldr	r2, [r7, #16]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	685a      	ldr	r2, [r3, #4]
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	697a      	ldr	r2, [r7, #20]
 80072be:	621a      	str	r2, [r3, #32]
}
 80072c0:	bf00      	nop
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr
 80072cc:	40010000 	.word	0x40010000
 80072d0:	40010400 	.word	0x40010400

080072d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b087      	sub	sp, #28
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	f023 0210 	bic.w	r2, r3, #16
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6a1b      	ldr	r3, [r3, #32]
 80072ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800730c:	683b      	ldr	r3, [r7, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	021b      	lsls	r3, r3, #8
 8007312:	68fa      	ldr	r2, [r7, #12]
 8007314:	4313      	orrs	r3, r2
 8007316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0320 	bic.w	r3, r3, #32
 800731e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a22      	ldr	r2, [pc, #136]	; (80073b8 <TIM_OC2_SetConfig+0xe4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d003      	beq.n	800733c <TIM_OC2_SetConfig+0x68>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a21      	ldr	r2, [pc, #132]	; (80073bc <TIM_OC2_SetConfig+0xe8>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d10d      	bne.n	8007358 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007342:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	68db      	ldr	r3, [r3, #12]
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	4313      	orrs	r3, r2
 800734e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007356:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <TIM_OC2_SetConfig+0xe4>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d003      	beq.n	8007368 <TIM_OC2_SetConfig+0x94>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	4a16      	ldr	r2, [pc, #88]	; (80073bc <TIM_OC2_SetConfig+0xe8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d113      	bne.n	8007390 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800736e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007370:	693b      	ldr	r3, [r7, #16]
 8007372:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007376:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	695b      	ldr	r3, [r3, #20]
 800737c:	009b      	lsls	r3, r3, #2
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	699b      	ldr	r3, [r3, #24]
 8007388:	009b      	lsls	r3, r3, #2
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4313      	orrs	r3, r2
 800738e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	697a      	ldr	r2, [r7, #20]
 80073a8:	621a      	str	r2, [r3, #32]
}
 80073aa:	bf00      	nop
 80073ac:	371c      	adds	r7, #28
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	40010000 	.word	0x40010000
 80073bc:	40010400 	.word	0x40010400

080073c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b087      	sub	sp, #28
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a1b      	ldr	r3, [r3, #32]
 80073da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	685b      	ldr	r3, [r3, #4]
 80073e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f023 0303 	bic.w	r3, r3, #3
 80073f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	4313      	orrs	r3, r2
 8007400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	021b      	lsls	r3, r3, #8
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a21      	ldr	r2, [pc, #132]	; (80074a0 <TIM_OC3_SetConfig+0xe0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d003      	beq.n	8007426 <TIM_OC3_SetConfig+0x66>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a20      	ldr	r2, [pc, #128]	; (80074a4 <TIM_OC3_SetConfig+0xe4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d10d      	bne.n	8007442 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800742c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	68db      	ldr	r3, [r3, #12]
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	697a      	ldr	r2, [r7, #20]
 8007436:	4313      	orrs	r3, r2
 8007438:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007440:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	4a16      	ldr	r2, [pc, #88]	; (80074a0 <TIM_OC3_SetConfig+0xe0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d003      	beq.n	8007452 <TIM_OC3_SetConfig+0x92>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4a15      	ldr	r2, [pc, #84]	; (80074a4 <TIM_OC3_SetConfig+0xe4>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d113      	bne.n	800747a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	011b      	lsls	r3, r3, #4
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	4313      	orrs	r3, r2
 800746c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	011b      	lsls	r3, r3, #4
 8007474:	693a      	ldr	r2, [r7, #16]
 8007476:	4313      	orrs	r3, r2
 8007478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	697a      	ldr	r2, [r7, #20]
 8007492:	621a      	str	r2, [r3, #32]
}
 8007494:	bf00      	nop
 8007496:	371c      	adds	r7, #28
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr
 80074a0:	40010000 	.word	0x40010000
 80074a4:	40010400 	.word	0x40010400

080074a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b087      	sub	sp, #28
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6a1b      	ldr	r3, [r3, #32]
 80074b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	69db      	ldr	r3, [r3, #28]
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	021b      	lsls	r3, r3, #8
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074ec:	693b      	ldr	r3, [r7, #16]
 80074ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	689b      	ldr	r3, [r3, #8]
 80074f8:	031b      	lsls	r3, r3, #12
 80074fa:	693a      	ldr	r2, [r7, #16]
 80074fc:	4313      	orrs	r3, r2
 80074fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	4a12      	ldr	r2, [pc, #72]	; (800754c <TIM_OC4_SetConfig+0xa4>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d003      	beq.n	8007510 <TIM_OC4_SetConfig+0x68>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4a11      	ldr	r2, [pc, #68]	; (8007550 <TIM_OC4_SetConfig+0xa8>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d109      	bne.n	8007524 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	695b      	ldr	r3, [r3, #20]
 800751c:	019b      	lsls	r3, r3, #6
 800751e:	697a      	ldr	r2, [r7, #20]
 8007520:	4313      	orrs	r3, r2
 8007522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	697a      	ldr	r2, [r7, #20]
 8007528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685a      	ldr	r2, [r3, #4]
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	693a      	ldr	r2, [r7, #16]
 800753c:	621a      	str	r2, [r3, #32]
}
 800753e:	bf00      	nop
 8007540:	371c      	adds	r7, #28
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr
 800754a:	bf00      	nop
 800754c:	40010000 	.word	0x40010000
 8007550:	40010400 	.word	0x40010400

08007554 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007554:	b480      	push	{r7}
 8007556:	b087      	sub	sp, #28
 8007558:	af00      	add	r7, sp, #0
 800755a:	60f8      	str	r0, [r7, #12]
 800755c:	60b9      	str	r1, [r7, #8]
 800755e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6a1b      	ldr	r3, [r3, #32]
 8007564:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	6a1b      	ldr	r3, [r3, #32]
 800756a:	f023 0201 	bic.w	r2, r3, #1
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800757e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	011b      	lsls	r3, r3, #4
 8007584:	693a      	ldr	r2, [r7, #16]
 8007586:	4313      	orrs	r3, r2
 8007588:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	f023 030a 	bic.w	r3, r3, #10
 8007590:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	4313      	orrs	r3, r2
 8007598:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	621a      	str	r2, [r3, #32]
}
 80075a6:	bf00      	nop
 80075a8:	371c      	adds	r7, #28
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b2:	b480      	push	{r7}
 80075b4:	b087      	sub	sp, #28
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	60f8      	str	r0, [r7, #12]
 80075ba:	60b9      	str	r1, [r7, #8]
 80075bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	f023 0210 	bic.w	r2, r3, #16
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	699b      	ldr	r3, [r3, #24]
 80075ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	031b      	lsls	r3, r3, #12
 80075e2:	697a      	ldr	r2, [r7, #20]
 80075e4:	4313      	orrs	r3, r2
 80075e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075e8:	693b      	ldr	r3, [r7, #16]
 80075ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	011b      	lsls	r3, r3, #4
 80075f4:	693a      	ldr	r2, [r7, #16]
 80075f6:	4313      	orrs	r3, r2
 80075f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	697a      	ldr	r2, [r7, #20]
 80075fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	693a      	ldr	r2, [r7, #16]
 8007604:	621a      	str	r2, [r3, #32]
}
 8007606:	bf00      	nop
 8007608:	371c      	adds	r7, #28
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr

08007612 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007612:	b480      	push	{r7}
 8007614:	b085      	sub	sp, #20
 8007616:	af00      	add	r7, sp, #0
 8007618:	6078      	str	r0, [r7, #4]
 800761a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	689b      	ldr	r3, [r3, #8]
 8007620:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007628:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800762a:	683a      	ldr	r2, [r7, #0]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	4313      	orrs	r3, r2
 8007630:	f043 0307 	orr.w	r3, r3, #7
 8007634:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	68fa      	ldr	r2, [r7, #12]
 800763a:	609a      	str	r2, [r3, #8]
}
 800763c:	bf00      	nop
 800763e:	3714      	adds	r7, #20
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007648:	b480      	push	{r7}
 800764a:	b087      	sub	sp, #28
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	607a      	str	r2, [r7, #4]
 8007654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	021a      	lsls	r2, r3, #8
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	431a      	orrs	r2, r3
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	4313      	orrs	r3, r2
 8007670:	697a      	ldr	r2, [r7, #20]
 8007672:	4313      	orrs	r3, r2
 8007674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	609a      	str	r2, [r3, #8]
}
 800767c:	bf00      	nop
 800767e:	371c      	adds	r7, #28
 8007680:	46bd      	mov	sp, r7
 8007682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007686:	4770      	bx	lr

08007688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007688:	b480      	push	{r7}
 800768a:	b087      	sub	sp, #28
 800768c:	af00      	add	r7, sp, #0
 800768e:	60f8      	str	r0, [r7, #12]
 8007690:	60b9      	str	r1, [r7, #8]
 8007692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	f003 031f 	and.w	r3, r3, #31
 800769a:	2201      	movs	r2, #1
 800769c:	fa02 f303 	lsl.w	r3, r2, r3
 80076a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	6a1a      	ldr	r2, [r3, #32]
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	43db      	mvns	r3, r3
 80076aa:	401a      	ands	r2, r3
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	6a1a      	ldr	r2, [r3, #32]
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	f003 031f 	and.w	r3, r3, #31
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	fa01 f303 	lsl.w	r3, r1, r3
 80076c0:	431a      	orrs	r2, r3
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
	...

080076d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
 80076dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e4:	2b01      	cmp	r3, #1
 80076e6:	d101      	bne.n	80076ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076e8:	2302      	movs	r3, #2
 80076ea:	e05a      	b.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2202      	movs	r2, #2
 80076f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	685b      	ldr	r3, [r3, #4]
 8007702:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007712:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68fa      	ldr	r2, [r7, #12]
 8007724:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	4a21      	ldr	r2, [pc, #132]	; (80077b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800772c:	4293      	cmp	r3, r2
 800772e:	d022      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007738:	d01d      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4a1d      	ldr	r2, [pc, #116]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d018      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	4a1b      	ldr	r2, [pc, #108]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1a      	ldr	r2, [pc, #104]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d00e      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a18      	ldr	r2, [pc, #96]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d009      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a17      	ldr	r2, [pc, #92]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d004      	beq.n	8007776 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a15      	ldr	r2, [pc, #84]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d10c      	bne.n	8007790 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800777c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	4313      	orrs	r3, r2
 8007786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a0:	2300      	movs	r3, #0
}
 80077a2:	4618      	mov	r0, r3
 80077a4:	3714      	adds	r7, #20
 80077a6:	46bd      	mov	sp, r7
 80077a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	40010000 	.word	0x40010000
 80077b4:	40000400 	.word	0x40000400
 80077b8:	40000800 	.word	0x40000800
 80077bc:	40000c00 	.word	0x40000c00
 80077c0:	40010400 	.word	0x40010400
 80077c4:	40014000 	.word	0x40014000
 80077c8:	40001800 	.word	0x40001800

080077cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b085      	sub	sp, #20
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
 80077d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e03d      	b.n	8007864 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	4313      	orrs	r3, r2
 800780a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	685b      	ldr	r3, [r3, #4]
 8007816:	4313      	orrs	r3, r2
 8007818:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4313      	orrs	r3, r2
 8007826:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	4313      	orrs	r3, r2
 8007834:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	695b      	ldr	r3, [r3, #20]
 8007840:	4313      	orrs	r3, r2
 8007842:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	69db      	ldr	r3, [r3, #28]
 800784e:	4313      	orrs	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007862:	2300      	movs	r3, #0
}
 8007864:	4618      	mov	r0, r3
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr

08007870 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d101      	bne.n	8007882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800787e:	2301      	movs	r3, #1
 8007880:	e03f      	b.n	8007902 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d106      	bne.n	800789c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f7fb fa38 	bl	8002d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2224      	movs	r2, #36	; 0x24
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	68da      	ldr	r2, [r3, #12]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	f000 fddf 	bl	8008478 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	691a      	ldr	r2, [r3, #16]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	695a      	ldr	r2, [r3, #20]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80078d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	68da      	ldr	r2, [r3, #12]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2200      	movs	r2, #0
 80078ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2220      	movs	r2, #32
 80078f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007900:	2300      	movs	r3, #0
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}

0800790a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800790a:	b580      	push	{r7, lr}
 800790c:	b08a      	sub	sp, #40	; 0x28
 800790e:	af02      	add	r7, sp, #8
 8007910:	60f8      	str	r0, [r7, #12]
 8007912:	60b9      	str	r1, [r7, #8]
 8007914:	603b      	str	r3, [r7, #0]
 8007916:	4613      	mov	r3, r2
 8007918:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800791a:	2300      	movs	r3, #0
 800791c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007924:	b2db      	uxtb	r3, r3
 8007926:	2b20      	cmp	r3, #32
 8007928:	d17c      	bne.n	8007a24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800792a:	68bb      	ldr	r3, [r7, #8]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d002      	beq.n	8007936 <HAL_UART_Transmit+0x2c>
 8007930:	88fb      	ldrh	r3, [r7, #6]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e075      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d101      	bne.n	8007948 <HAL_UART_Transmit+0x3e>
 8007944:	2302      	movs	r3, #2
 8007946:	e06e      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2201      	movs	r2, #1
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	2200      	movs	r2, #0
 8007954:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2221      	movs	r2, #33	; 0x21
 800795a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800795e:	f7fb fbc5 	bl	80030ec <HAL_GetTick>
 8007962:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	88fa      	ldrh	r2, [r7, #6]
 8007968:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	88fa      	ldrh	r2, [r7, #6]
 800796e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	689b      	ldr	r3, [r3, #8]
 8007974:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007978:	d108      	bne.n	800798c <HAL_UART_Transmit+0x82>
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d104      	bne.n	800798c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007982:	2300      	movs	r3, #0
 8007984:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	e003      	b.n	8007994 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007990:	2300      	movs	r3, #0
 8007992:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2200      	movs	r2, #0
 8007998:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800799c:	e02a      	b.n	80079f4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	9300      	str	r3, [sp, #0]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2200      	movs	r2, #0
 80079a6:	2180      	movs	r1, #128	; 0x80
 80079a8:	68f8      	ldr	r0, [r7, #12]
 80079aa:	f000 fb1f 	bl	8007fec <UART_WaitOnFlagUntilTimeout>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d001      	beq.n	80079b8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e036      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079b8:	69fb      	ldr	r3, [r7, #28]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10b      	bne.n	80079d6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	881b      	ldrh	r3, [r3, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	3302      	adds	r3, #2
 80079d2:	61bb      	str	r3, [r7, #24]
 80079d4:	e007      	b.n	80079e6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80079d6:	69fb      	ldr	r3, [r7, #28]
 80079d8:	781a      	ldrb	r2, [r3, #0]
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	3301      	adds	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	3b01      	subs	r3, #1
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1cf      	bne.n	800799e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	9300      	str	r3, [sp, #0]
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	2200      	movs	r2, #0
 8007a06:	2140      	movs	r1, #64	; 0x40
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 faef 	bl	8007fec <UART_WaitOnFlagUntilTimeout>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a14:	2303      	movs	r3, #3
 8007a16:	e006      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2220      	movs	r2, #32
 8007a1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a20:	2300      	movs	r3, #0
 8007a22:	e000      	b.n	8007a26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a24:	2302      	movs	r3, #2
  }
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	3720      	adds	r7, #32
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	bd80      	pop	{r7, pc}

08007a2e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b084      	sub	sp, #16
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	60f8      	str	r0, [r7, #12]
 8007a36:	60b9      	str	r1, [r7, #8]
 8007a38:	4613      	mov	r3, r2
 8007a3a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b20      	cmp	r3, #32
 8007a46:	d11d      	bne.n	8007a84 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <HAL_UART_Receive_IT+0x26>
 8007a4e:	88fb      	ldrh	r3, [r7, #6]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e016      	b.n	8007a86 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_UART_Receive_IT+0x38>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e00f      	b.n	8007a86 <HAL_UART_Receive_IT+0x58>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	2200      	movs	r2, #0
 8007a72:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007a74:	88fb      	ldrh	r3, [r7, #6]
 8007a76:	461a      	mov	r2, r3
 8007a78:	68b9      	ldr	r1, [r7, #8]
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fb24 	bl	80080c8 <UART_Start_Receive_IT>
 8007a80:	4603      	mov	r3, r0
 8007a82:	e000      	b.n	8007a86 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007a84:	2302      	movs	r3, #2
  }
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
	...

08007a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b0ba      	sub	sp, #232	; 0xe8
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	695b      	ldr	r3, [r3, #20]
 8007ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d10f      	bne.n	8007af6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d009      	beq.n	8007af6 <HAL_UART_IRQHandler+0x66>
 8007ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae6:	f003 0320 	and.w	r3, r3, #32
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d003      	beq.n	8007af6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f000 fc07 	bl	8008302 <UART_Receive_IT>
      return;
 8007af4:	e256      	b.n	8007fa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 80de 	beq.w	8007cbc <HAL_UART_IRQHandler+0x22c>
 8007b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d106      	bne.n	8007b1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f000 80d1 	beq.w	8007cbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b1e:	f003 0301 	and.w	r3, r3, #1
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d00b      	beq.n	8007b3e <HAL_UART_IRQHandler+0xae>
 8007b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d005      	beq.n	8007b3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b36:	f043 0201 	orr.w	r2, r3, #1
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b42:	f003 0304 	and.w	r3, r3, #4
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00b      	beq.n	8007b62 <HAL_UART_IRQHandler+0xd2>
 8007b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d005      	beq.n	8007b62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5a:	f043 0202 	orr.w	r2, r3, #2
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <HAL_UART_IRQHandler+0xf6>
 8007b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b72:	f003 0301 	and.w	r3, r3, #1
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d005      	beq.n	8007b86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b7e:	f043 0204 	orr.w	r2, r3, #4
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b8a:	f003 0308 	and.w	r3, r3, #8
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d011      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x126>
 8007b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b96:	f003 0320 	and.w	r3, r3, #32
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d105      	bne.n	8007baa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d005      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bae:	f043 0208 	orr.w	r2, r3, #8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 81ed 	beq.w	8007f9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bc4:	f003 0320 	and.w	r3, r3, #32
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d008      	beq.n	8007bde <HAL_UART_IRQHandler+0x14e>
 8007bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bd0:	f003 0320 	and.w	r3, r3, #32
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d002      	beq.n	8007bde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fb92 	bl	8008302 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	695b      	ldr	r3, [r3, #20]
 8007be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be8:	2b40      	cmp	r3, #64	; 0x40
 8007bea:	bf0c      	ite	eq
 8007bec:	2301      	moveq	r3, #1
 8007bee:	2300      	movne	r3, #0
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d103      	bne.n	8007c0a <HAL_UART_IRQHandler+0x17a>
 8007c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d04f      	beq.n	8007caa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 fa9a 	bl	8008144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c1a:	2b40      	cmp	r3, #64	; 0x40
 8007c1c:	d141      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3314      	adds	r3, #20
 8007c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c2c:	e853 3f00 	ldrex	r3, [r3]
 8007c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3314      	adds	r3, #20
 8007c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d1d9      	bne.n	8007c1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d013      	beq.n	8007c9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	4a7d      	ldr	r2, [pc, #500]	; (8007e6c <HAL_UART_IRQHandler+0x3dc>)
 8007c78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fb fbe5 	bl	800344e <HAL_DMA_Abort_IT>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d016      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c90:	687a      	ldr	r2, [r7, #4]
 8007c92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007c94:	4610      	mov	r0, r2
 8007c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c98:	e00e      	b.n	8007cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f990 	bl	8007fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca0:	e00a      	b.n	8007cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ca2:	6878      	ldr	r0, [r7, #4]
 8007ca4:	f000 f98c 	bl	8007fc0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca8:	e006      	b.n	8007cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f988 	bl	8007fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007cb6:	e170      	b.n	8007f9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cb8:	bf00      	nop
    return;
 8007cba:	e16e      	b.n	8007f9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	f040 814a 	bne.w	8007f5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cca:	f003 0310 	and.w	r3, r3, #16
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f000 8143 	beq.w	8007f5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cd8:	f003 0310 	and.w	r3, r3, #16
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	f000 813c 	beq.w	8007f5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60bb      	str	r3, [r7, #8]
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60bb      	str	r3, [r7, #8]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	60bb      	str	r3, [r7, #8]
 8007cf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	695b      	ldr	r3, [r3, #20]
 8007cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d02:	2b40      	cmp	r3, #64	; 0x40
 8007d04:	f040 80b4 	bne.w	8007e70 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f000 8140 	beq.w	8007f9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d26:	429a      	cmp	r2, r3
 8007d28:	f080 8139 	bcs.w	8007f9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	69db      	ldr	r3, [r3, #28]
 8007d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d3e:	f000 8088 	beq.w	8007e52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	330c      	adds	r3, #12
 8007d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d50:	e853 3f00 	ldrex	r3, [r3]
 8007d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	330c      	adds	r3, #12
 8007d6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d7e:	e841 2300 	strex	r3, r2, [r1]
 8007d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1d9      	bne.n	8007d42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	3314      	adds	r3, #20
 8007d94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007da0:	f023 0301 	bic.w	r3, r3, #1
 8007da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	3314      	adds	r3, #20
 8007dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007db2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007db6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dbe:	e841 2300 	strex	r3, r2, [r1]
 8007dc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d1e1      	bne.n	8007d8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	3314      	adds	r3, #20
 8007dd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dd4:	e853 3f00 	ldrex	r3, [r3]
 8007dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3314      	adds	r3, #20
 8007dea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007dee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007df0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007df4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e3      	bne.n	8007dca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	330c      	adds	r3, #12
 8007e16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e22:	f023 0310 	bic.w	r3, r3, #16
 8007e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	330c      	adds	r3, #12
 8007e30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e34:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e3c:	e841 2300 	strex	r3, r2, [r1]
 8007e40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d1e3      	bne.n	8007e10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fb fa8e 	bl	800336e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e5a:	b29b      	uxth	r3, r3
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	4619      	mov	r1, r3
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 f8b6 	bl	8007fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e68:	e099      	b.n	8007f9e <HAL_UART_IRQHandler+0x50e>
 8007e6a:	bf00      	nop
 8007e6c:	0800820b 	.word	0x0800820b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	1ad3      	subs	r3, r2, r3
 8007e7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e84:	b29b      	uxth	r3, r3
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f000 808b 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 8086 	beq.w	8007fa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ea0:	e853 3f00 	ldrex	r3, [r3]
 8007ea4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	330c      	adds	r3, #12
 8007eb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007eba:	647a      	str	r2, [r7, #68]	; 0x44
 8007ebc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ebe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007ec2:	e841 2300 	strex	r3, r2, [r1]
 8007ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e3      	bne.n	8007e96 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	3314      	adds	r3, #20
 8007ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed8:	e853 3f00 	ldrex	r3, [r3]
 8007edc:	623b      	str	r3, [r7, #32]
   return(result);
 8007ede:	6a3b      	ldr	r3, [r7, #32]
 8007ee0:	f023 0301 	bic.w	r3, r3, #1
 8007ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	3314      	adds	r3, #20
 8007eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8007ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007efa:	e841 2300 	strex	r3, r2, [r1]
 8007efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d1e3      	bne.n	8007ece <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	2220      	movs	r2, #32
 8007f0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	330c      	adds	r3, #12
 8007f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	e853 3f00 	ldrex	r3, [r3]
 8007f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f023 0310 	bic.w	r3, r3, #16
 8007f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	330c      	adds	r3, #12
 8007f34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f38:	61fa      	str	r2, [r7, #28]
 8007f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	69b9      	ldr	r1, [r7, #24]
 8007f3e:	69fa      	ldr	r2, [r7, #28]
 8007f40:	e841 2300 	strex	r3, r2, [r1]
 8007f44:	617b      	str	r3, [r7, #20]
   return(result);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d1e3      	bne.n	8007f14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f50:	4619      	mov	r1, r3
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f83e 	bl	8007fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f58:	e023      	b.n	8007fa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d009      	beq.n	8007f7a <HAL_UART_IRQHandler+0x4ea>
 8007f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 f95d 	bl	8008232 <UART_Transmit_IT>
    return;
 8007f78:	e014      	b.n	8007fa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00e      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x514>
 8007f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d008      	beq.n	8007fa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 f99d 	bl	80082d2 <UART_EndTransmit_IT>
    return;
 8007f98:	e004      	b.n	8007fa4 <HAL_UART_IRQHandler+0x514>
    return;
 8007f9a:	bf00      	nop
 8007f9c:	e002      	b.n	8007fa4 <HAL_UART_IRQHandler+0x514>
      return;
 8007f9e:	bf00      	nop
 8007fa0:	e000      	b.n	8007fa4 <HAL_UART_IRQHandler+0x514>
      return;
 8007fa2:	bf00      	nop
  }
}
 8007fa4:	37e8      	adds	r7, #232	; 0xe8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}
 8007faa:	bf00      	nop

08007fac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b083      	sub	sp, #12
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fb4:	bf00      	nop
 8007fb6:	370c      	adds	r7, #12
 8007fb8:	46bd      	mov	sp, r7
 8007fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbe:	4770      	bx	lr

08007fc0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fc0:	b480      	push	{r7}
 8007fc2:	b083      	sub	sp, #12
 8007fc4:	af00      	add	r7, sp, #0
 8007fc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007fc8:	bf00      	nop
 8007fca:	370c      	adds	r7, #12
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd2:	4770      	bx	lr

08007fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007fd4:	b480      	push	{r7}
 8007fd6:	b083      	sub	sp, #12
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	460b      	mov	r3, r1
 8007fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b090      	sub	sp, #64	; 0x40
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	603b      	str	r3, [r7, #0]
 8007ff8:	4613      	mov	r3, r2
 8007ffa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ffc:	e050      	b.n	80080a0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ffe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008004:	d04c      	beq.n	80080a0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008006:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008008:	2b00      	cmp	r3, #0
 800800a:	d007      	beq.n	800801c <UART_WaitOnFlagUntilTimeout+0x30>
 800800c:	f7fb f86e 	bl	80030ec <HAL_GetTick>
 8008010:	4602      	mov	r2, r0
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	1ad3      	subs	r3, r2, r3
 8008016:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008018:	429a      	cmp	r2, r3
 800801a:	d241      	bcs.n	80080a0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	330c      	adds	r3, #12
 8008022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008026:	e853 3f00 	ldrex	r3, [r3]
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800803c:	637a      	str	r2, [r7, #52]	; 0x34
 800803e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008042:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008044:	e841 2300 	strex	r3, r2, [r1]
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1e5      	bne.n	800801c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3314      	adds	r3, #20
 8008056:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	e853 3f00 	ldrex	r3, [r3]
 800805e:	613b      	str	r3, [r7, #16]
   return(result);
 8008060:	693b      	ldr	r3, [r7, #16]
 8008062:	f023 0301 	bic.w	r3, r3, #1
 8008066:	63bb      	str	r3, [r7, #56]	; 0x38
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	3314      	adds	r3, #20
 800806e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008070:	623a      	str	r2, [r7, #32]
 8008072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008074:	69f9      	ldr	r1, [r7, #28]
 8008076:	6a3a      	ldr	r2, [r7, #32]
 8008078:	e841 2300 	strex	r3, r2, [r1]
 800807c:	61bb      	str	r3, [r7, #24]
   return(result);
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d1e5      	bne.n	8008050 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	2220      	movs	r2, #32
 8008090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2200      	movs	r2, #0
 8008098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800809c:	2303      	movs	r3, #3
 800809e:	e00f      	b.n	80080c0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	681a      	ldr	r2, [r3, #0]
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	4013      	ands	r3, r2
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	bf0c      	ite	eq
 80080b0:	2301      	moveq	r3, #1
 80080b2:	2300      	movne	r3, #0
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	461a      	mov	r2, r3
 80080b8:	79fb      	ldrb	r3, [r7, #7]
 80080ba:	429a      	cmp	r2, r3
 80080bc:	d09f      	beq.n	8007ffe <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3740      	adds	r7, #64	; 0x40
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	60f8      	str	r0, [r7, #12]
 80080d0:	60b9      	str	r1, [r7, #8]
 80080d2:	4613      	mov	r3, r2
 80080d4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	88fa      	ldrh	r2, [r7, #6]
 80080e0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	88fa      	ldrh	r2, [r7, #6]
 80080e6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	2200      	movs	r2, #0
 80080ec:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	2222      	movs	r2, #34	; 0x22
 80080f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2200      	movs	r2, #0
 80080fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d007      	beq.n	8008116 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	68da      	ldr	r2, [r3, #12]
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008114:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695a      	ldr	r2, [r3, #20]
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f042 0201 	orr.w	r2, r2, #1
 8008124:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	68da      	ldr	r2, [r3, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f042 0220 	orr.w	r2, r2, #32
 8008134:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008136:	2300      	movs	r3, #0
}
 8008138:	4618      	mov	r0, r3
 800813a:	3714      	adds	r7, #20
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008144:	b480      	push	{r7}
 8008146:	b095      	sub	sp, #84	; 0x54
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	330c      	adds	r3, #12
 8008152:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008156:	e853 3f00 	ldrex	r3, [r3]
 800815a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800815c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008162:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800816c:	643a      	str	r2, [r7, #64]	; 0x40
 800816e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008170:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008172:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008174:	e841 2300 	strex	r3, r2, [r1]
 8008178:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800817a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800817c:	2b00      	cmp	r3, #0
 800817e:	d1e5      	bne.n	800814c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3314      	adds	r3, #20
 8008186:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008188:	6a3b      	ldr	r3, [r7, #32]
 800818a:	e853 3f00 	ldrex	r3, [r3]
 800818e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008190:	69fb      	ldr	r3, [r7, #28]
 8008192:	f023 0301 	bic.w	r3, r3, #1
 8008196:	64bb      	str	r3, [r7, #72]	; 0x48
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	3314      	adds	r3, #20
 800819e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081a8:	e841 2300 	strex	r3, r2, [r1]
 80081ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d1e5      	bne.n	8008180 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b8:	2b01      	cmp	r3, #1
 80081ba:	d119      	bne.n	80081f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	330c      	adds	r3, #12
 80081c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	e853 3f00 	ldrex	r3, [r3]
 80081ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	f023 0310 	bic.w	r3, r3, #16
 80081d2:	647b      	str	r3, [r7, #68]	; 0x44
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	330c      	adds	r3, #12
 80081da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80081dc:	61ba      	str	r2, [r7, #24]
 80081de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e0:	6979      	ldr	r1, [r7, #20]
 80081e2:	69ba      	ldr	r2, [r7, #24]
 80081e4:	e841 2300 	strex	r3, r2, [r1]
 80081e8:	613b      	str	r3, [r7, #16]
   return(result);
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d1e5      	bne.n	80081bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2220      	movs	r2, #32
 80081f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	2200      	movs	r2, #0
 80081fc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80081fe:	bf00      	nop
 8008200:	3754      	adds	r7, #84	; 0x54
 8008202:	46bd      	mov	sp, r7
 8008204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008208:	4770      	bx	lr

0800820a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800820a:	b580      	push	{r7, lr}
 800820c:	b084      	sub	sp, #16
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008216:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	2200      	movs	r2, #0
 8008222:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008224:	68f8      	ldr	r0, [r7, #12]
 8008226:	f7ff fecb 	bl	8007fc0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800822a:	bf00      	nop
 800822c:	3710      	adds	r7, #16
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}

08008232 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008232:	b480      	push	{r7}
 8008234:	b085      	sub	sp, #20
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b21      	cmp	r3, #33	; 0x21
 8008244:	d13e      	bne.n	80082c4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	689b      	ldr	r3, [r3, #8]
 800824a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824e:	d114      	bne.n	800827a <UART_Transmit_IT+0x48>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	2b00      	cmp	r3, #0
 8008256:	d110      	bne.n	800827a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6a1b      	ldr	r3, [r3, #32]
 800825c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	881b      	ldrh	r3, [r3, #0]
 8008262:	461a      	mov	r2, r3
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800826c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	1c9a      	adds	r2, r3, #2
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	621a      	str	r2, [r3, #32]
 8008278:	e008      	b.n	800828c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	1c59      	adds	r1, r3, #1
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6211      	str	r1, [r2, #32]
 8008284:	781a      	ldrb	r2, [r3, #0]
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b01      	subs	r3, #1
 8008294:	b29b      	uxth	r3, r3
 8008296:	687a      	ldr	r2, [r7, #4]
 8008298:	4619      	mov	r1, r3
 800829a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800829c:	2b00      	cmp	r3, #0
 800829e:	d10f      	bne.n	80082c0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	68da      	ldr	r2, [r3, #12]
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082ae:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68da      	ldr	r2, [r3, #12]
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082be:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082c0:	2300      	movs	r3, #0
 80082c2:	e000      	b.n	80082c6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082c4:	2302      	movs	r3, #2
  }
}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3714      	adds	r7, #20
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr

080082d2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68da      	ldr	r2, [r3, #12]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80082e8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fe5a 	bl	8007fac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b08c      	sub	sp, #48	; 0x30
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008310:	b2db      	uxtb	r3, r3
 8008312:	2b22      	cmp	r3, #34	; 0x22
 8008314:	f040 80ab 	bne.w	800846e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008320:	d117      	bne.n	8008352 <UART_Receive_IT+0x50>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	691b      	ldr	r3, [r3, #16]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d113      	bne.n	8008352 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800832a:	2300      	movs	r3, #0
 800832c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008332:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	b29b      	uxth	r3, r3
 800833c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008340:	b29a      	uxth	r2, r3
 8008342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008344:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800834a:	1c9a      	adds	r2, r3, #2
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	629a      	str	r2, [r3, #40]	; 0x28
 8008350:	e026      	b.n	80083a0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	689b      	ldr	r3, [r3, #8]
 8008360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008364:	d007      	beq.n	8008376 <UART_Receive_IT+0x74>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d10a      	bne.n	8008384 <UART_Receive_IT+0x82>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d106      	bne.n	8008384 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	b2da      	uxtb	r2, r3
 800837e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	e008      	b.n	8008396 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	685b      	ldr	r3, [r3, #4]
 800838a:	b2db      	uxtb	r3, r3
 800838c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008390:	b2da      	uxtb	r2, r3
 8008392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008394:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	687a      	ldr	r2, [r7, #4]
 80083ac:	4619      	mov	r1, r3
 80083ae:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d15a      	bne.n	800846a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68da      	ldr	r2, [r3, #12]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f022 0220 	bic.w	r2, r2, #32
 80083c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083d2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	695a      	ldr	r2, [r3, #20]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f022 0201 	bic.w	r2, r2, #1
 80083e2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2220      	movs	r2, #32
 80083e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d135      	bne.n	8008460 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	330c      	adds	r3, #12
 8008400:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	e853 3f00 	ldrex	r3, [r3]
 8008408:	613b      	str	r3, [r7, #16]
   return(result);
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f023 0310 	bic.w	r3, r3, #16
 8008410:	627b      	str	r3, [r7, #36]	; 0x24
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	330c      	adds	r3, #12
 8008418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800841a:	623a      	str	r2, [r7, #32]
 800841c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841e:	69f9      	ldr	r1, [r7, #28]
 8008420:	6a3a      	ldr	r2, [r7, #32]
 8008422:	e841 2300 	strex	r3, r2, [r1]
 8008426:	61bb      	str	r3, [r7, #24]
   return(result);
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d1e5      	bne.n	80083fa <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f003 0310 	and.w	r3, r3, #16
 8008438:	2b10      	cmp	r3, #16
 800843a:	d10a      	bne.n	8008452 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800843c:	2300      	movs	r3, #0
 800843e:	60fb      	str	r3, [r7, #12]
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	60fb      	str	r3, [r7, #12]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	60fb      	str	r3, [r7, #12]
 8008450:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f7ff fdbb 	bl	8007fd4 <HAL_UARTEx_RxEventCallback>
 800845e:	e002      	b.n	8008466 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f7f9 fca9 	bl	8001db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	e002      	b.n	8008470 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	e000      	b.n	8008470 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800846e:	2302      	movs	r3, #2
  }
}
 8008470:	4618      	mov	r0, r3
 8008472:	3730      	adds	r7, #48	; 0x30
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008478:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800847c:	b0c0      	sub	sp, #256	; 0x100
 800847e:	af00      	add	r7, sp, #0
 8008480:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691b      	ldr	r3, [r3, #16]
 800848c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008494:	68d9      	ldr	r1, [r3, #12]
 8008496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	ea40 0301 	orr.w	r3, r0, r1
 80084a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084a6:	689a      	ldr	r2, [r3, #8]
 80084a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084ac:	691b      	ldr	r3, [r3, #16]
 80084ae:	431a      	orrs	r2, r3
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	695b      	ldr	r3, [r3, #20]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084bc:	69db      	ldr	r3, [r3, #28]
 80084be:	4313      	orrs	r3, r2
 80084c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68db      	ldr	r3, [r3, #12]
 80084cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084d0:	f021 010c 	bic.w	r1, r1, #12
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80084de:	430b      	orrs	r3, r1
 80084e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80084e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	695b      	ldr	r3, [r3, #20]
 80084ea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80084ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f2:	6999      	ldr	r1, [r3, #24]
 80084f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f8:	681a      	ldr	r2, [r3, #0]
 80084fa:	ea40 0301 	orr.w	r3, r0, r1
 80084fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	4b8f      	ldr	r3, [pc, #572]	; (8008744 <UART_SetConfig+0x2cc>)
 8008508:	429a      	cmp	r2, r3
 800850a:	d005      	beq.n	8008518 <UART_SetConfig+0xa0>
 800850c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008510:	681a      	ldr	r2, [r3, #0]
 8008512:	4b8d      	ldr	r3, [pc, #564]	; (8008748 <UART_SetConfig+0x2d0>)
 8008514:	429a      	cmp	r2, r3
 8008516:	d104      	bne.n	8008522 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008518:	f7fe f98a 	bl	8006830 <HAL_RCC_GetPCLK2Freq>
 800851c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008520:	e003      	b.n	800852a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008522:	f7fe f971 	bl	8006808 <HAL_RCC_GetPCLK1Freq>
 8008526:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800852a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800852e:	69db      	ldr	r3, [r3, #28]
 8008530:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008534:	f040 810c 	bne.w	8008750 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008538:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800853c:	2200      	movs	r2, #0
 800853e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008542:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008546:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800854a:	4622      	mov	r2, r4
 800854c:	462b      	mov	r3, r5
 800854e:	1891      	adds	r1, r2, r2
 8008550:	65b9      	str	r1, [r7, #88]	; 0x58
 8008552:	415b      	adcs	r3, r3
 8008554:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008556:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800855a:	4621      	mov	r1, r4
 800855c:	eb12 0801 	adds.w	r8, r2, r1
 8008560:	4629      	mov	r1, r5
 8008562:	eb43 0901 	adc.w	r9, r3, r1
 8008566:	f04f 0200 	mov.w	r2, #0
 800856a:	f04f 0300 	mov.w	r3, #0
 800856e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008572:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008576:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800857a:	4690      	mov	r8, r2
 800857c:	4699      	mov	r9, r3
 800857e:	4623      	mov	r3, r4
 8008580:	eb18 0303 	adds.w	r3, r8, r3
 8008584:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008588:	462b      	mov	r3, r5
 800858a:	eb49 0303 	adc.w	r3, r9, r3
 800858e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	2200      	movs	r2, #0
 800859a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800859e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085a6:	460b      	mov	r3, r1
 80085a8:	18db      	adds	r3, r3, r3
 80085aa:	653b      	str	r3, [r7, #80]	; 0x50
 80085ac:	4613      	mov	r3, r2
 80085ae:	eb42 0303 	adc.w	r3, r2, r3
 80085b2:	657b      	str	r3, [r7, #84]	; 0x54
 80085b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085bc:	f7f8 fb64 	bl	8000c88 <__aeabi_uldivmod>
 80085c0:	4602      	mov	r2, r0
 80085c2:	460b      	mov	r3, r1
 80085c4:	4b61      	ldr	r3, [pc, #388]	; (800874c <UART_SetConfig+0x2d4>)
 80085c6:	fba3 2302 	umull	r2, r3, r3, r2
 80085ca:	095b      	lsrs	r3, r3, #5
 80085cc:	011c      	lsls	r4, r3, #4
 80085ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085d2:	2200      	movs	r2, #0
 80085d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085d8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80085dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80085e0:	4642      	mov	r2, r8
 80085e2:	464b      	mov	r3, r9
 80085e4:	1891      	adds	r1, r2, r2
 80085e6:	64b9      	str	r1, [r7, #72]	; 0x48
 80085e8:	415b      	adcs	r3, r3
 80085ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80085f0:	4641      	mov	r1, r8
 80085f2:	eb12 0a01 	adds.w	sl, r2, r1
 80085f6:	4649      	mov	r1, r9
 80085f8:	eb43 0b01 	adc.w	fp, r3, r1
 80085fc:	f04f 0200 	mov.w	r2, #0
 8008600:	f04f 0300 	mov.w	r3, #0
 8008604:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008608:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800860c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008610:	4692      	mov	sl, r2
 8008612:	469b      	mov	fp, r3
 8008614:	4643      	mov	r3, r8
 8008616:	eb1a 0303 	adds.w	r3, sl, r3
 800861a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800861e:	464b      	mov	r3, r9
 8008620:	eb4b 0303 	adc.w	r3, fp, r3
 8008624:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008634:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008638:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800863c:	460b      	mov	r3, r1
 800863e:	18db      	adds	r3, r3, r3
 8008640:	643b      	str	r3, [r7, #64]	; 0x40
 8008642:	4613      	mov	r3, r2
 8008644:	eb42 0303 	adc.w	r3, r2, r3
 8008648:	647b      	str	r3, [r7, #68]	; 0x44
 800864a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800864e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008652:	f7f8 fb19 	bl	8000c88 <__aeabi_uldivmod>
 8008656:	4602      	mov	r2, r0
 8008658:	460b      	mov	r3, r1
 800865a:	4611      	mov	r1, r2
 800865c:	4b3b      	ldr	r3, [pc, #236]	; (800874c <UART_SetConfig+0x2d4>)
 800865e:	fba3 2301 	umull	r2, r3, r3, r1
 8008662:	095b      	lsrs	r3, r3, #5
 8008664:	2264      	movs	r2, #100	; 0x64
 8008666:	fb02 f303 	mul.w	r3, r2, r3
 800866a:	1acb      	subs	r3, r1, r3
 800866c:	00db      	lsls	r3, r3, #3
 800866e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008672:	4b36      	ldr	r3, [pc, #216]	; (800874c <UART_SetConfig+0x2d4>)
 8008674:	fba3 2302 	umull	r2, r3, r3, r2
 8008678:	095b      	lsrs	r3, r3, #5
 800867a:	005b      	lsls	r3, r3, #1
 800867c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008680:	441c      	add	r4, r3
 8008682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008686:	2200      	movs	r2, #0
 8008688:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800868c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008690:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008694:	4642      	mov	r2, r8
 8008696:	464b      	mov	r3, r9
 8008698:	1891      	adds	r1, r2, r2
 800869a:	63b9      	str	r1, [r7, #56]	; 0x38
 800869c:	415b      	adcs	r3, r3
 800869e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086a4:	4641      	mov	r1, r8
 80086a6:	1851      	adds	r1, r2, r1
 80086a8:	6339      	str	r1, [r7, #48]	; 0x30
 80086aa:	4649      	mov	r1, r9
 80086ac:	414b      	adcs	r3, r1
 80086ae:	637b      	str	r3, [r7, #52]	; 0x34
 80086b0:	f04f 0200 	mov.w	r2, #0
 80086b4:	f04f 0300 	mov.w	r3, #0
 80086b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086bc:	4659      	mov	r1, fp
 80086be:	00cb      	lsls	r3, r1, #3
 80086c0:	4651      	mov	r1, sl
 80086c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086c6:	4651      	mov	r1, sl
 80086c8:	00ca      	lsls	r2, r1, #3
 80086ca:	4610      	mov	r0, r2
 80086cc:	4619      	mov	r1, r3
 80086ce:	4603      	mov	r3, r0
 80086d0:	4642      	mov	r2, r8
 80086d2:	189b      	adds	r3, r3, r2
 80086d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80086d8:	464b      	mov	r3, r9
 80086da:	460a      	mov	r2, r1
 80086dc:	eb42 0303 	adc.w	r3, r2, r3
 80086e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80086e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80086f0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80086f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80086f8:	460b      	mov	r3, r1
 80086fa:	18db      	adds	r3, r3, r3
 80086fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80086fe:	4613      	mov	r3, r2
 8008700:	eb42 0303 	adc.w	r3, r2, r3
 8008704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008706:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800870a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800870e:	f7f8 fabb 	bl	8000c88 <__aeabi_uldivmod>
 8008712:	4602      	mov	r2, r0
 8008714:	460b      	mov	r3, r1
 8008716:	4b0d      	ldr	r3, [pc, #52]	; (800874c <UART_SetConfig+0x2d4>)
 8008718:	fba3 1302 	umull	r1, r3, r3, r2
 800871c:	095b      	lsrs	r3, r3, #5
 800871e:	2164      	movs	r1, #100	; 0x64
 8008720:	fb01 f303 	mul.w	r3, r1, r3
 8008724:	1ad3      	subs	r3, r2, r3
 8008726:	00db      	lsls	r3, r3, #3
 8008728:	3332      	adds	r3, #50	; 0x32
 800872a:	4a08      	ldr	r2, [pc, #32]	; (800874c <UART_SetConfig+0x2d4>)
 800872c:	fba2 2303 	umull	r2, r3, r2, r3
 8008730:	095b      	lsrs	r3, r3, #5
 8008732:	f003 0207 	and.w	r2, r3, #7
 8008736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4422      	add	r2, r4
 800873e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008740:	e105      	b.n	800894e <UART_SetConfig+0x4d6>
 8008742:	bf00      	nop
 8008744:	40011000 	.word	0x40011000
 8008748:	40011400 	.word	0x40011400
 800874c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008750:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008754:	2200      	movs	r2, #0
 8008756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800875a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800875e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008762:	4642      	mov	r2, r8
 8008764:	464b      	mov	r3, r9
 8008766:	1891      	adds	r1, r2, r2
 8008768:	6239      	str	r1, [r7, #32]
 800876a:	415b      	adcs	r3, r3
 800876c:	627b      	str	r3, [r7, #36]	; 0x24
 800876e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008772:	4641      	mov	r1, r8
 8008774:	1854      	adds	r4, r2, r1
 8008776:	4649      	mov	r1, r9
 8008778:	eb43 0501 	adc.w	r5, r3, r1
 800877c:	f04f 0200 	mov.w	r2, #0
 8008780:	f04f 0300 	mov.w	r3, #0
 8008784:	00eb      	lsls	r3, r5, #3
 8008786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800878a:	00e2      	lsls	r2, r4, #3
 800878c:	4614      	mov	r4, r2
 800878e:	461d      	mov	r5, r3
 8008790:	4643      	mov	r3, r8
 8008792:	18e3      	adds	r3, r4, r3
 8008794:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008798:	464b      	mov	r3, r9
 800879a:	eb45 0303 	adc.w	r3, r5, r3
 800879e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087b2:	f04f 0200 	mov.w	r2, #0
 80087b6:	f04f 0300 	mov.w	r3, #0
 80087ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087be:	4629      	mov	r1, r5
 80087c0:	008b      	lsls	r3, r1, #2
 80087c2:	4621      	mov	r1, r4
 80087c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087c8:	4621      	mov	r1, r4
 80087ca:	008a      	lsls	r2, r1, #2
 80087cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087d0:	f7f8 fa5a 	bl	8000c88 <__aeabi_uldivmod>
 80087d4:	4602      	mov	r2, r0
 80087d6:	460b      	mov	r3, r1
 80087d8:	4b60      	ldr	r3, [pc, #384]	; (800895c <UART_SetConfig+0x4e4>)
 80087da:	fba3 2302 	umull	r2, r3, r3, r2
 80087de:	095b      	lsrs	r3, r3, #5
 80087e0:	011c      	lsls	r4, r3, #4
 80087e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087e6:	2200      	movs	r2, #0
 80087e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80087ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80087f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80087f4:	4642      	mov	r2, r8
 80087f6:	464b      	mov	r3, r9
 80087f8:	1891      	adds	r1, r2, r2
 80087fa:	61b9      	str	r1, [r7, #24]
 80087fc:	415b      	adcs	r3, r3
 80087fe:	61fb      	str	r3, [r7, #28]
 8008800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008804:	4641      	mov	r1, r8
 8008806:	1851      	adds	r1, r2, r1
 8008808:	6139      	str	r1, [r7, #16]
 800880a:	4649      	mov	r1, r9
 800880c:	414b      	adcs	r3, r1
 800880e:	617b      	str	r3, [r7, #20]
 8008810:	f04f 0200 	mov.w	r2, #0
 8008814:	f04f 0300 	mov.w	r3, #0
 8008818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800881c:	4659      	mov	r1, fp
 800881e:	00cb      	lsls	r3, r1, #3
 8008820:	4651      	mov	r1, sl
 8008822:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008826:	4651      	mov	r1, sl
 8008828:	00ca      	lsls	r2, r1, #3
 800882a:	4610      	mov	r0, r2
 800882c:	4619      	mov	r1, r3
 800882e:	4603      	mov	r3, r0
 8008830:	4642      	mov	r2, r8
 8008832:	189b      	adds	r3, r3, r2
 8008834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008838:	464b      	mov	r3, r9
 800883a:	460a      	mov	r2, r1
 800883c:	eb42 0303 	adc.w	r3, r2, r3
 8008840:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008848:	685b      	ldr	r3, [r3, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	67bb      	str	r3, [r7, #120]	; 0x78
 800884e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008850:	f04f 0200 	mov.w	r2, #0
 8008854:	f04f 0300 	mov.w	r3, #0
 8008858:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800885c:	4649      	mov	r1, r9
 800885e:	008b      	lsls	r3, r1, #2
 8008860:	4641      	mov	r1, r8
 8008862:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008866:	4641      	mov	r1, r8
 8008868:	008a      	lsls	r2, r1, #2
 800886a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800886e:	f7f8 fa0b 	bl	8000c88 <__aeabi_uldivmod>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	4b39      	ldr	r3, [pc, #228]	; (800895c <UART_SetConfig+0x4e4>)
 8008878:	fba3 1302 	umull	r1, r3, r3, r2
 800887c:	095b      	lsrs	r3, r3, #5
 800887e:	2164      	movs	r1, #100	; 0x64
 8008880:	fb01 f303 	mul.w	r3, r1, r3
 8008884:	1ad3      	subs	r3, r2, r3
 8008886:	011b      	lsls	r3, r3, #4
 8008888:	3332      	adds	r3, #50	; 0x32
 800888a:	4a34      	ldr	r2, [pc, #208]	; (800895c <UART_SetConfig+0x4e4>)
 800888c:	fba2 2303 	umull	r2, r3, r2, r3
 8008890:	095b      	lsrs	r3, r3, #5
 8008892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008896:	441c      	add	r4, r3
 8008898:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800889c:	2200      	movs	r2, #0
 800889e:	673b      	str	r3, [r7, #112]	; 0x70
 80088a0:	677a      	str	r2, [r7, #116]	; 0x74
 80088a2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088a6:	4642      	mov	r2, r8
 80088a8:	464b      	mov	r3, r9
 80088aa:	1891      	adds	r1, r2, r2
 80088ac:	60b9      	str	r1, [r7, #8]
 80088ae:	415b      	adcs	r3, r3
 80088b0:	60fb      	str	r3, [r7, #12]
 80088b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088b6:	4641      	mov	r1, r8
 80088b8:	1851      	adds	r1, r2, r1
 80088ba:	6039      	str	r1, [r7, #0]
 80088bc:	4649      	mov	r1, r9
 80088be:	414b      	adcs	r3, r1
 80088c0:	607b      	str	r3, [r7, #4]
 80088c2:	f04f 0200 	mov.w	r2, #0
 80088c6:	f04f 0300 	mov.w	r3, #0
 80088ca:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088ce:	4659      	mov	r1, fp
 80088d0:	00cb      	lsls	r3, r1, #3
 80088d2:	4651      	mov	r1, sl
 80088d4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d8:	4651      	mov	r1, sl
 80088da:	00ca      	lsls	r2, r1, #3
 80088dc:	4610      	mov	r0, r2
 80088de:	4619      	mov	r1, r3
 80088e0:	4603      	mov	r3, r0
 80088e2:	4642      	mov	r2, r8
 80088e4:	189b      	adds	r3, r3, r2
 80088e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80088e8:	464b      	mov	r3, r9
 80088ea:	460a      	mov	r2, r1
 80088ec:	eb42 0303 	adc.w	r3, r2, r3
 80088f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	663b      	str	r3, [r7, #96]	; 0x60
 80088fc:	667a      	str	r2, [r7, #100]	; 0x64
 80088fe:	f04f 0200 	mov.w	r2, #0
 8008902:	f04f 0300 	mov.w	r3, #0
 8008906:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800890a:	4649      	mov	r1, r9
 800890c:	008b      	lsls	r3, r1, #2
 800890e:	4641      	mov	r1, r8
 8008910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008914:	4641      	mov	r1, r8
 8008916:	008a      	lsls	r2, r1, #2
 8008918:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800891c:	f7f8 f9b4 	bl	8000c88 <__aeabi_uldivmod>
 8008920:	4602      	mov	r2, r0
 8008922:	460b      	mov	r3, r1
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <UART_SetConfig+0x4e4>)
 8008926:	fba3 1302 	umull	r1, r3, r3, r2
 800892a:	095b      	lsrs	r3, r3, #5
 800892c:	2164      	movs	r1, #100	; 0x64
 800892e:	fb01 f303 	mul.w	r3, r1, r3
 8008932:	1ad3      	subs	r3, r2, r3
 8008934:	011b      	lsls	r3, r3, #4
 8008936:	3332      	adds	r3, #50	; 0x32
 8008938:	4a08      	ldr	r2, [pc, #32]	; (800895c <UART_SetConfig+0x4e4>)
 800893a:	fba2 2303 	umull	r2, r3, r2, r3
 800893e:	095b      	lsrs	r3, r3, #5
 8008940:	f003 020f 	and.w	r2, r3, #15
 8008944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	4422      	add	r2, r4
 800894c:	609a      	str	r2, [r3, #8]
}
 800894e:	bf00      	nop
 8008950:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008954:	46bd      	mov	sp, r7
 8008956:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800895a:	bf00      	nop
 800895c:	51eb851f 	.word	0x51eb851f

08008960 <__NVIC_SetPriority>:
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	4603      	mov	r3, r0
 8008968:	6039      	str	r1, [r7, #0]
 800896a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800896c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008970:	2b00      	cmp	r3, #0
 8008972:	db0a      	blt.n	800898a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008974:	683b      	ldr	r3, [r7, #0]
 8008976:	b2da      	uxtb	r2, r3
 8008978:	490c      	ldr	r1, [pc, #48]	; (80089ac <__NVIC_SetPriority+0x4c>)
 800897a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800897e:	0112      	lsls	r2, r2, #4
 8008980:	b2d2      	uxtb	r2, r2
 8008982:	440b      	add	r3, r1
 8008984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008988:	e00a      	b.n	80089a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	b2da      	uxtb	r2, r3
 800898e:	4908      	ldr	r1, [pc, #32]	; (80089b0 <__NVIC_SetPriority+0x50>)
 8008990:	79fb      	ldrb	r3, [r7, #7]
 8008992:	f003 030f 	and.w	r3, r3, #15
 8008996:	3b04      	subs	r3, #4
 8008998:	0112      	lsls	r2, r2, #4
 800899a:	b2d2      	uxtb	r2, r2
 800899c:	440b      	add	r3, r1
 800899e:	761a      	strb	r2, [r3, #24]
}
 80089a0:	bf00      	nop
 80089a2:	370c      	adds	r7, #12
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	e000e100 	.word	0xe000e100
 80089b0:	e000ed00 	.word	0xe000ed00

080089b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089b4:	b580      	push	{r7, lr}
 80089b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80089b8:	2100      	movs	r1, #0
 80089ba:	f06f 0004 	mvn.w	r0, #4
 80089be:	f7ff ffcf 	bl	8008960 <__NVIC_SetPriority>
#endif
}
 80089c2:	bf00      	nop
 80089c4:	bd80      	pop	{r7, pc}
	...

080089c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089c8:	b480      	push	{r7}
 80089ca:	b083      	sub	sp, #12
 80089cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089ce:	f3ef 8305 	mrs	r3, IPSR
 80089d2:	603b      	str	r3, [r7, #0]
  return(result);
 80089d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80089da:	f06f 0305 	mvn.w	r3, #5
 80089de:	607b      	str	r3, [r7, #4]
 80089e0:	e00c      	b.n	80089fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089e2:	4b0a      	ldr	r3, [pc, #40]	; (8008a0c <osKernelInitialize+0x44>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d105      	bne.n	80089f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089ea:	4b08      	ldr	r3, [pc, #32]	; (8008a0c <osKernelInitialize+0x44>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089f0:	2300      	movs	r3, #0
 80089f2:	607b      	str	r3, [r7, #4]
 80089f4:	e002      	b.n	80089fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80089f6:	f04f 33ff 	mov.w	r3, #4294967295
 80089fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089fc:	687b      	ldr	r3, [r7, #4]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	370c      	adds	r7, #12
 8008a02:	46bd      	mov	sp, r7
 8008a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a08:	4770      	bx	lr
 8008a0a:	bf00      	nop
 8008a0c:	20000418 	.word	0x20000418

08008a10 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a16:	f3ef 8305 	mrs	r3, IPSR
 8008a1a:	603b      	str	r3, [r7, #0]
  return(result);
 8008a1c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d003      	beq.n	8008a2a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a22:	f06f 0305 	mvn.w	r3, #5
 8008a26:	607b      	str	r3, [r7, #4]
 8008a28:	e010      	b.n	8008a4c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a2a:	4b0b      	ldr	r3, [pc, #44]	; (8008a58 <osKernelStart+0x48>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2b01      	cmp	r3, #1
 8008a30:	d109      	bne.n	8008a46 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a32:	f7ff ffbf 	bl	80089b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a36:	4b08      	ldr	r3, [pc, #32]	; (8008a58 <osKernelStart+0x48>)
 8008a38:	2202      	movs	r2, #2
 8008a3a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a3c:	f001 f866 	bl	8009b0c <vTaskStartScheduler>
      stat = osOK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	607b      	str	r3, [r7, #4]
 8008a44:	e002      	b.n	8008a4c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a46:	f04f 33ff 	mov.w	r3, #4294967295
 8008a4a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a4c:	687b      	ldr	r3, [r7, #4]
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000418 	.word	0x20000418

08008a5c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b08e      	sub	sp, #56	; 0x38
 8008a60:	af04      	add	r7, sp, #16
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a6c:	f3ef 8305 	mrs	r3, IPSR
 8008a70:	617b      	str	r3, [r7, #20]
  return(result);
 8008a72:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d17f      	bne.n	8008b78 <osThreadNew+0x11c>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d07c      	beq.n	8008b78 <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8008a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008a82:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a84:	2318      	movs	r3, #24
 8008a86:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8008a90:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d045      	beq.n	8008b24 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <osThreadNew+0x4a>
        name = attr->name;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	699b      	ldr	r3, [r3, #24]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d002      	beq.n	8008ab4 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	699b      	ldr	r3, [r3, #24]
 8008ab2:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d008      	beq.n	8008acc <osThreadNew+0x70>
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	2b38      	cmp	r3, #56	; 0x38
 8008abe:	d805      	bhi.n	8008acc <osThreadNew+0x70>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	f003 0301 	and.w	r3, r3, #1
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d001      	beq.n	8008ad0 <osThreadNew+0x74>
        return (NULL);
 8008acc:	2300      	movs	r3, #0
 8008ace:	e054      	b.n	8008b7a <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	695b      	ldr	r3, [r3, #20]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d003      	beq.n	8008ae0 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	695b      	ldr	r3, [r3, #20]
 8008adc:	089b      	lsrs	r3, r3, #2
 8008ade:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d00e      	beq.n	8008b06 <osThreadNew+0xaa>
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b5b      	cmp	r3, #91	; 0x5b
 8008aee:	d90a      	bls.n	8008b06 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d006      	beq.n	8008b06 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	695b      	ldr	r3, [r3, #20]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d002      	beq.n	8008b06 <osThreadNew+0xaa>
        mem = 1;
 8008b00:	2301      	movs	r3, #1
 8008b02:	61bb      	str	r3, [r7, #24]
 8008b04:	e010      	b.n	8008b28 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	689b      	ldr	r3, [r3, #8]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d10c      	bne.n	8008b28 <osThreadNew+0xcc>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d108      	bne.n	8008b28 <osThreadNew+0xcc>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	691b      	ldr	r3, [r3, #16]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d104      	bne.n	8008b28 <osThreadNew+0xcc>
          mem = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61bb      	str	r3, [r7, #24]
 8008b22:	e001      	b.n	8008b28 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8008b24:	2300      	movs	r3, #0
 8008b26:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d110      	bne.n	8008b50 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b32:	687a      	ldr	r2, [r7, #4]
 8008b34:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b36:	9202      	str	r2, [sp, #8]
 8008b38:	9301      	str	r3, [sp, #4]
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	9300      	str	r3, [sp, #0]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	6a3a      	ldr	r2, [r7, #32]
 8008b42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b44:	68f8      	ldr	r0, [r7, #12]
 8008b46:	f000 fe0b 	bl	8009760 <xTaskCreateStatic>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	613b      	str	r3, [r7, #16]
 8008b4e:	e013      	b.n	8008b78 <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8008b50:	69bb      	ldr	r3, [r7, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d110      	bne.n	8008b78 <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	b29a      	uxth	r2, r3
 8008b5a:	f107 0310 	add.w	r3, r7, #16
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	f000 fe56 	bl	800981a <xTaskCreate>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d001      	beq.n	8008b78 <osThreadNew+0x11c>
            hTask = NULL;
 8008b74:	2300      	movs	r3, #0
 8008b76:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b78:	693b      	ldr	r3, [r7, #16]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3728      	adds	r7, #40	; 0x28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b084      	sub	sp, #16
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b8a:	f3ef 8305 	mrs	r3, IPSR
 8008b8e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b90:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d003      	beq.n	8008b9e <osDelay+0x1c>
    stat = osErrorISR;
 8008b96:	f06f 0305 	mvn.w	r3, #5
 8008b9a:	60fb      	str	r3, [r7, #12]
 8008b9c:	e007      	b.n	8008bae <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f000 ff7b 	bl	8009aa4 <vTaskDelay>
    }
  }

  return (stat);
 8008bae:	68fb      	ldr	r3, [r7, #12]
}
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}

08008bb8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008bb8:	b480      	push	{r7}
 8008bba:	b085      	sub	sp, #20
 8008bbc:	af00      	add	r7, sp, #0
 8008bbe:	60f8      	str	r0, [r7, #12]
 8008bc0:	60b9      	str	r1, [r7, #8]
 8008bc2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	4a07      	ldr	r2, [pc, #28]	; (8008be4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bc8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bca:	68bb      	ldr	r3, [r7, #8]
 8008bcc:	4a06      	ldr	r2, [pc, #24]	; (8008be8 <vApplicationGetIdleTaskMemory+0x30>)
 8008bce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008bd6:	601a      	str	r2, [r3, #0]
}
 8008bd8:	bf00      	nop
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr
 8008be4:	2000041c 	.word	0x2000041c
 8008be8:	20000478 	.word	0x20000478

08008bec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bec:	b480      	push	{r7}
 8008bee:	b085      	sub	sp, #20
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	60f8      	str	r0, [r7, #12]
 8008bf4:	60b9      	str	r1, [r7, #8]
 8008bf6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4a07      	ldr	r2, [pc, #28]	; (8008c18 <vApplicationGetTimerTaskMemory+0x2c>)
 8008bfc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4a06      	ldr	r2, [pc, #24]	; (8008c1c <vApplicationGetTimerTaskMemory+0x30>)
 8008c02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008c0a:	601a      	str	r2, [r3, #0]
}
 8008c0c:	bf00      	nop
 8008c0e:	3714      	adds	r7, #20
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr
 8008c18:	20000c78 	.word	0x20000c78
 8008c1c:	20000cd4 	.word	0x20000cd4

08008c20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c20:	b480      	push	{r7}
 8008c22:	b083      	sub	sp, #12
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f103 0208 	add.w	r2, r3, #8
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	f04f 32ff 	mov.w	r2, #4294967295
 8008c38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	f103 0208 	add.w	r2, r3, #8
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f103 0208 	add.w	r2, r3, #8
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c6e:	bf00      	nop
 8008c70:	370c      	adds	r7, #12
 8008c72:	46bd      	mov	sp, r7
 8008c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c78:	4770      	bx	lr

08008c7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c7a:	b480      	push	{r7}
 8008c7c:	b085      	sub	sp, #20
 8008c7e:	af00      	add	r7, sp, #0
 8008c80:	6078      	str	r0, [r7, #4]
 8008c82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	68fa      	ldr	r2, [r7, #12]
 8008c8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	683b      	ldr	r3, [r7, #0]
 8008c96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	683a      	ldr	r2, [r7, #0]
 8008c9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	1c5a      	adds	r2, r3, #1
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	601a      	str	r2, [r3, #0]
}
 8008cb6:	bf00      	nop
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b085      	sub	sp, #20
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	6078      	str	r0, [r7, #4]
 8008cca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cd8:	d103      	bne.n	8008ce2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	60fb      	str	r3, [r7, #12]
 8008ce0:	e00c      	b.n	8008cfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3308      	adds	r3, #8
 8008ce6:	60fb      	str	r3, [r7, #12]
 8008ce8:	e002      	b.n	8008cf0 <vListInsert+0x2e>
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	60fb      	str	r3, [r7, #12]
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	68ba      	ldr	r2, [r7, #8]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d2f6      	bcs.n	8008cea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	68fa      	ldr	r2, [r7, #12]
 8008d10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	1c5a      	adds	r2, r3, #1
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	601a      	str	r2, [r3, #0]
}
 8008d28:	bf00      	nop
 8008d2a:	3714      	adds	r7, #20
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	691b      	ldr	r3, [r3, #16]
 8008d40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6892      	ldr	r2, [r2, #8]
 8008d4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	687a      	ldr	r2, [r7, #4]
 8008d52:	6852      	ldr	r2, [r2, #4]
 8008d54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	685b      	ldr	r3, [r3, #4]
 8008d5a:	687a      	ldr	r2, [r7, #4]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d103      	bne.n	8008d68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	689a      	ldr	r2, [r3, #8]
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	1e5a      	subs	r2, r3, #1
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d10a      	bne.n	8008db2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008da0:	f383 8811 	msr	BASEPRI, r3
 8008da4:	f3bf 8f6f 	isb	sy
 8008da8:	f3bf 8f4f 	dsb	sy
 8008dac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dae:	bf00      	nop
 8008db0:	e7fe      	b.n	8008db0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008db2:	f002 f84f 	bl	800ae54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dbe:	68f9      	ldr	r1, [r7, #12]
 8008dc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dc2:	fb01 f303 	mul.w	r3, r1, r3
 8008dc6:	441a      	add	r2, r3
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	681a      	ldr	r2, [r3, #0]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008de2:	3b01      	subs	r3, #1
 8008de4:	68f9      	ldr	r1, [r7, #12]
 8008de6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008de8:	fb01 f303 	mul.w	r3, r1, r3
 8008dec:	441a      	add	r2, r3
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	22ff      	movs	r2, #255	; 0xff
 8008df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	22ff      	movs	r2, #255	; 0xff
 8008dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d114      	bne.n	8008e32 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	691b      	ldr	r3, [r3, #16]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d01a      	beq.n	8008e46 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	3310      	adds	r3, #16
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 f903 	bl	800a020 <xTaskRemoveFromEventList>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d012      	beq.n	8008e46 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e20:	4b0c      	ldr	r3, [pc, #48]	; (8008e54 <xQueueGenericReset+0xcc>)
 8008e22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e26:	601a      	str	r2, [r3, #0]
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	f3bf 8f6f 	isb	sy
 8008e30:	e009      	b.n	8008e46 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	3310      	adds	r3, #16
 8008e36:	4618      	mov	r0, r3
 8008e38:	f7ff fef2 	bl	8008c20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	3324      	adds	r3, #36	; 0x24
 8008e40:	4618      	mov	r0, r3
 8008e42:	f7ff feed 	bl	8008c20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e46:	f002 f835 	bl	800aeb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e4a:	2301      	movs	r3, #1
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}
 8008e54:	e000ed04 	.word	0xe000ed04

08008e58 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b08e      	sub	sp, #56	; 0x38
 8008e5c:	af02      	add	r7, sp, #8
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d10a      	bne.n	8008e82 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e70:	f383 8811 	msr	BASEPRI, r3
 8008e74:	f3bf 8f6f 	isb	sy
 8008e78:	f3bf 8f4f 	dsb	sy
 8008e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e7e:	bf00      	nop
 8008e80:	e7fe      	b.n	8008e80 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10a      	bne.n	8008e9e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e8c:	f383 8811 	msr	BASEPRI, r3
 8008e90:	f3bf 8f6f 	isb	sy
 8008e94:	f3bf 8f4f 	dsb	sy
 8008e98:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e9a:	bf00      	nop
 8008e9c:	e7fe      	b.n	8008e9c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d002      	beq.n	8008eaa <xQueueGenericCreateStatic+0x52>
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d001      	beq.n	8008eae <xQueueGenericCreateStatic+0x56>
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e000      	b.n	8008eb0 <xQueueGenericCreateStatic+0x58>
 8008eae:	2300      	movs	r3, #0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10a      	bne.n	8008eca <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eb8:	f383 8811 	msr	BASEPRI, r3
 8008ebc:	f3bf 8f6f 	isb	sy
 8008ec0:	f3bf 8f4f 	dsb	sy
 8008ec4:	623b      	str	r3, [r7, #32]
}
 8008ec6:	bf00      	nop
 8008ec8:	e7fe      	b.n	8008ec8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d102      	bne.n	8008ed6 <xQueueGenericCreateStatic+0x7e>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d101      	bne.n	8008eda <xQueueGenericCreateStatic+0x82>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	e000      	b.n	8008edc <xQueueGenericCreateStatic+0x84>
 8008eda:	2300      	movs	r3, #0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10a      	bne.n	8008ef6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	61fb      	str	r3, [r7, #28]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008ef6:	2350      	movs	r3, #80	; 0x50
 8008ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	2b50      	cmp	r3, #80	; 0x50
 8008efe:	d00a      	beq.n	8008f16 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	61bb      	str	r3, [r7, #24]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f16:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d00d      	beq.n	8008f3e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	2201      	movs	r2, #1
 8008f26:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f2a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	9300      	str	r3, [sp, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	687a      	ldr	r2, [r7, #4]
 8008f36:	68b9      	ldr	r1, [r7, #8]
 8008f38:	68f8      	ldr	r0, [r7, #12]
 8008f3a:	f000 f805 	bl	8008f48 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3730      	adds	r7, #48	; 0x30
 8008f44:	46bd      	mov	sp, r7
 8008f46:	bd80      	pop	{r7, pc}

08008f48 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b084      	sub	sp, #16
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
 8008f54:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d103      	bne.n	8008f64 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	69ba      	ldr	r2, [r7, #24]
 8008f60:	601a      	str	r2, [r3, #0]
 8008f62:	e002      	b.n	8008f6a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	687a      	ldr	r2, [r7, #4]
 8008f68:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f6a:	69bb      	ldr	r3, [r7, #24]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	68ba      	ldr	r2, [r7, #8]
 8008f74:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f76:	2101      	movs	r1, #1
 8008f78:	69b8      	ldr	r0, [r7, #24]
 8008f7a:	f7ff ff05 	bl	8008d88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	78fa      	ldrb	r2, [r7, #3]
 8008f82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f86:	bf00      	nop
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b08e      	sub	sp, #56	; 0x38
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	60b9      	str	r1, [r7, #8]
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d10a      	bne.n	8008fc2 <xQueueGenericSend+0x32>
	__asm volatile
 8008fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fb0:	f383 8811 	msr	BASEPRI, r3
 8008fb4:	f3bf 8f6f 	isb	sy
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fbe:	bf00      	nop
 8008fc0:	e7fe      	b.n	8008fc0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d103      	bne.n	8008fd0 <xQueueGenericSend+0x40>
 8008fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d101      	bne.n	8008fd4 <xQueueGenericSend+0x44>
 8008fd0:	2301      	movs	r3, #1
 8008fd2:	e000      	b.n	8008fd6 <xQueueGenericSend+0x46>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d10a      	bne.n	8008ff0 <xQueueGenericSend+0x60>
	__asm volatile
 8008fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fde:	f383 8811 	msr	BASEPRI, r3
 8008fe2:	f3bf 8f6f 	isb	sy
 8008fe6:	f3bf 8f4f 	dsb	sy
 8008fea:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fec:	bf00      	nop
 8008fee:	e7fe      	b.n	8008fee <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	2b02      	cmp	r3, #2
 8008ff4:	d103      	bne.n	8008ffe <xQueueGenericSend+0x6e>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ffa:	2b01      	cmp	r3, #1
 8008ffc:	d101      	bne.n	8009002 <xQueueGenericSend+0x72>
 8008ffe:	2301      	movs	r3, #1
 8009000:	e000      	b.n	8009004 <xQueueGenericSend+0x74>
 8009002:	2300      	movs	r3, #0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10a      	bne.n	800901e <xQueueGenericSend+0x8e>
	__asm volatile
 8009008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900c:	f383 8811 	msr	BASEPRI, r3
 8009010:	f3bf 8f6f 	isb	sy
 8009014:	f3bf 8f4f 	dsb	sy
 8009018:	623b      	str	r3, [r7, #32]
}
 800901a:	bf00      	nop
 800901c:	e7fe      	b.n	800901c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800901e:	f001 f9bd 	bl	800a39c <xTaskGetSchedulerState>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d102      	bne.n	800902e <xQueueGenericSend+0x9e>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d101      	bne.n	8009032 <xQueueGenericSend+0xa2>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <xQueueGenericSend+0xa4>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xQueueGenericSend+0xbe>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	61fb      	str	r3, [r7, #28]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800904e:	f001 ff01 	bl	800ae54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800905a:	429a      	cmp	r2, r3
 800905c:	d302      	bcc.n	8009064 <xQueueGenericSend+0xd4>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b02      	cmp	r3, #2
 8009062:	d129      	bne.n	80090b8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009064:	683a      	ldr	r2, [r7, #0]
 8009066:	68b9      	ldr	r1, [r7, #8]
 8009068:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800906a:	f000 fa0b 	bl	8009484 <prvCopyDataToQueue>
 800906e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009074:	2b00      	cmp	r3, #0
 8009076:	d010      	beq.n	800909a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907a:	3324      	adds	r3, #36	; 0x24
 800907c:	4618      	mov	r0, r3
 800907e:	f000 ffcf 	bl	800a020 <xTaskRemoveFromEventList>
 8009082:	4603      	mov	r3, r0
 8009084:	2b00      	cmp	r3, #0
 8009086:	d013      	beq.n	80090b0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009088:	4b3f      	ldr	r3, [pc, #252]	; (8009188 <xQueueGenericSend+0x1f8>)
 800908a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	e00a      	b.n	80090b0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800909a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800909c:	2b00      	cmp	r3, #0
 800909e:	d007      	beq.n	80090b0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090a0:	4b39      	ldr	r3, [pc, #228]	; (8009188 <xQueueGenericSend+0x1f8>)
 80090a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	f3bf 8f4f 	dsb	sy
 80090ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090b0:	f001 ff00 	bl	800aeb4 <vPortExitCritical>
				return pdPASS;
 80090b4:	2301      	movs	r3, #1
 80090b6:	e063      	b.n	8009180 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d103      	bne.n	80090c6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090be:	f001 fef9 	bl	800aeb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090c2:	2300      	movs	r3, #0
 80090c4:	e05c      	b.n	8009180 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d106      	bne.n	80090da <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090cc:	f107 0314 	add.w	r3, r7, #20
 80090d0:	4618      	mov	r0, r3
 80090d2:	f001 f809 	bl	800a0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090d6:	2301      	movs	r3, #1
 80090d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090da:	f001 feeb 	bl	800aeb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090de:	f000 fd7b 	bl	8009bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090e2:	f001 feb7 	bl	800ae54 <vPortEnterCritical>
 80090e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090ec:	b25b      	sxtb	r3, r3
 80090ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090f2:	d103      	bne.n	80090fc <xQueueGenericSend+0x16c>
 80090f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f6:	2200      	movs	r2, #0
 80090f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009102:	b25b      	sxtb	r3, r3
 8009104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009108:	d103      	bne.n	8009112 <xQueueGenericSend+0x182>
 800910a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910c:	2200      	movs	r2, #0
 800910e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009112:	f001 fecf 	bl	800aeb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009116:	1d3a      	adds	r2, r7, #4
 8009118:	f107 0314 	add.w	r3, r7, #20
 800911c:	4611      	mov	r1, r2
 800911e:	4618      	mov	r0, r3
 8009120:	f000 fff8 	bl	800a114 <xTaskCheckForTimeOut>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d124      	bne.n	8009174 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800912a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800912c:	f000 faa2 	bl	8009674 <prvIsQueueFull>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d018      	beq.n	8009168 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009138:	3310      	adds	r3, #16
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	4611      	mov	r1, r2
 800913e:	4618      	mov	r0, r3
 8009140:	f000 ff1e 	bl	8009f80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009144:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009146:	f000 fa2d 	bl	80095a4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800914a:	f000 fd53 	bl	8009bf4 <xTaskResumeAll>
 800914e:	4603      	mov	r3, r0
 8009150:	2b00      	cmp	r3, #0
 8009152:	f47f af7c 	bne.w	800904e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009156:	4b0c      	ldr	r3, [pc, #48]	; (8009188 <xQueueGenericSend+0x1f8>)
 8009158:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	f3bf 8f6f 	isb	sy
 8009166:	e772      	b.n	800904e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916a:	f000 fa1b 	bl	80095a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800916e:	f000 fd41 	bl	8009bf4 <xTaskResumeAll>
 8009172:	e76c      	b.n	800904e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009176:	f000 fa15 	bl	80095a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800917a:	f000 fd3b 	bl	8009bf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800917e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009180:	4618      	mov	r0, r3
 8009182:	3738      	adds	r7, #56	; 0x38
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	e000ed04 	.word	0xe000ed04

0800918c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b090      	sub	sp, #64	; 0x40
 8009190:	af00      	add	r7, sp, #0
 8009192:	60f8      	str	r0, [r7, #12]
 8009194:	60b9      	str	r1, [r7, #8]
 8009196:	607a      	str	r2, [r7, #4]
 8009198:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800919e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d10a      	bne.n	80091ba <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a8:	f383 8811 	msr	BASEPRI, r3
 80091ac:	f3bf 8f6f 	isb	sy
 80091b0:	f3bf 8f4f 	dsb	sy
 80091b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091b6:	bf00      	nop
 80091b8:	e7fe      	b.n	80091b8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ba:	68bb      	ldr	r3, [r7, #8]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d103      	bne.n	80091c8 <xQueueGenericSendFromISR+0x3c>
 80091c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d101      	bne.n	80091cc <xQueueGenericSendFromISR+0x40>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e000      	b.n	80091ce <xQueueGenericSendFromISR+0x42>
 80091cc:	2300      	movs	r3, #0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d10a      	bne.n	80091e8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80091d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091d6:	f383 8811 	msr	BASEPRI, r3
 80091da:	f3bf 8f6f 	isb	sy
 80091de:	f3bf 8f4f 	dsb	sy
 80091e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091e4:	bf00      	nop
 80091e6:	e7fe      	b.n	80091e6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	2b02      	cmp	r3, #2
 80091ec:	d103      	bne.n	80091f6 <xQueueGenericSendFromISR+0x6a>
 80091ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f2:	2b01      	cmp	r3, #1
 80091f4:	d101      	bne.n	80091fa <xQueueGenericSendFromISR+0x6e>
 80091f6:	2301      	movs	r3, #1
 80091f8:	e000      	b.n	80091fc <xQueueGenericSendFromISR+0x70>
 80091fa:	2300      	movs	r3, #0
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10a      	bne.n	8009216 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	623b      	str	r3, [r7, #32]
}
 8009212:	bf00      	nop
 8009214:	e7fe      	b.n	8009214 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009216:	f001 feff 	bl	800b018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800921a:	f3ef 8211 	mrs	r2, BASEPRI
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	61fa      	str	r2, [r7, #28]
 8009230:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009232:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009234:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009238:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	429a      	cmp	r2, r3
 8009240:	d302      	bcc.n	8009248 <xQueueGenericSendFromISR+0xbc>
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	2b02      	cmp	r3, #2
 8009246:	d12f      	bne.n	80092a8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800924a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800924e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009256:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009258:	683a      	ldr	r2, [r7, #0]
 800925a:	68b9      	ldr	r1, [r7, #8]
 800925c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800925e:	f000 f911 	bl	8009484 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009262:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800926a:	d112      	bne.n	8009292 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800926c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	d016      	beq.n	80092a2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009276:	3324      	adds	r3, #36	; 0x24
 8009278:	4618      	mov	r0, r3
 800927a:	f000 fed1 	bl	800a020 <xTaskRemoveFromEventList>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d00e      	beq.n	80092a2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00b      	beq.n	80092a2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2201      	movs	r2, #1
 800928e:	601a      	str	r2, [r3, #0]
 8009290:	e007      	b.n	80092a2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009292:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009296:	3301      	adds	r3, #1
 8009298:	b2db      	uxtb	r3, r3
 800929a:	b25a      	sxtb	r2, r3
 800929c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092a2:	2301      	movs	r3, #1
 80092a4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092a6:	e001      	b.n	80092ac <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092a8:	2300      	movs	r3, #0
 80092aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ae:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3740      	adds	r7, #64	; 0x40
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
	...

080092c4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b08c      	sub	sp, #48	; 0x30
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	60f8      	str	r0, [r7, #12]
 80092cc:	60b9      	str	r1, [r7, #8]
 80092ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092d0:	2300      	movs	r3, #0
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <xQueueReceive+0x30>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	623b      	str	r3, [r7, #32]
}
 80092f0:	bf00      	nop
 80092f2:	e7fe      	b.n	80092f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d103      	bne.n	8009302 <xQueueReceive+0x3e>
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d101      	bne.n	8009306 <xQueueReceive+0x42>
 8009302:	2301      	movs	r3, #1
 8009304:	e000      	b.n	8009308 <xQueueReceive+0x44>
 8009306:	2300      	movs	r3, #0
 8009308:	2b00      	cmp	r3, #0
 800930a:	d10a      	bne.n	8009322 <xQueueReceive+0x5e>
	__asm volatile
 800930c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009310:	f383 8811 	msr	BASEPRI, r3
 8009314:	f3bf 8f6f 	isb	sy
 8009318:	f3bf 8f4f 	dsb	sy
 800931c:	61fb      	str	r3, [r7, #28]
}
 800931e:	bf00      	nop
 8009320:	e7fe      	b.n	8009320 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009322:	f001 f83b 	bl	800a39c <xTaskGetSchedulerState>
 8009326:	4603      	mov	r3, r0
 8009328:	2b00      	cmp	r3, #0
 800932a:	d102      	bne.n	8009332 <xQueueReceive+0x6e>
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d101      	bne.n	8009336 <xQueueReceive+0x72>
 8009332:	2301      	movs	r3, #1
 8009334:	e000      	b.n	8009338 <xQueueReceive+0x74>
 8009336:	2300      	movs	r3, #0
 8009338:	2b00      	cmp	r3, #0
 800933a:	d10a      	bne.n	8009352 <xQueueReceive+0x8e>
	__asm volatile
 800933c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009340:	f383 8811 	msr	BASEPRI, r3
 8009344:	f3bf 8f6f 	isb	sy
 8009348:	f3bf 8f4f 	dsb	sy
 800934c:	61bb      	str	r3, [r7, #24]
}
 800934e:	bf00      	nop
 8009350:	e7fe      	b.n	8009350 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009352:	f001 fd7f 	bl	800ae54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800935a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800935c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800935e:	2b00      	cmp	r3, #0
 8009360:	d01f      	beq.n	80093a2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009362:	68b9      	ldr	r1, [r7, #8]
 8009364:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009366:	f000 f8f7 	bl	8009558 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	1e5a      	subs	r2, r3, #1
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009374:	691b      	ldr	r3, [r3, #16]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00f      	beq.n	800939a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	3310      	adds	r3, #16
 800937e:	4618      	mov	r0, r3
 8009380:	f000 fe4e 	bl	800a020 <xTaskRemoveFromEventList>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d007      	beq.n	800939a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800938a:	4b3d      	ldr	r3, [pc, #244]	; (8009480 <xQueueReceive+0x1bc>)
 800938c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009390:	601a      	str	r2, [r3, #0]
 8009392:	f3bf 8f4f 	dsb	sy
 8009396:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800939a:	f001 fd8b 	bl	800aeb4 <vPortExitCritical>
				return pdPASS;
 800939e:	2301      	movs	r3, #1
 80093a0:	e069      	b.n	8009476 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d103      	bne.n	80093b0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093a8:	f001 fd84 	bl	800aeb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093ac:	2300      	movs	r3, #0
 80093ae:	e062      	b.n	8009476 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d106      	bne.n	80093c4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093b6:	f107 0310 	add.w	r3, r7, #16
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fe94 	bl	800a0e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093c0:	2301      	movs	r3, #1
 80093c2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093c4:	f001 fd76 	bl	800aeb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093c8:	f000 fc06 	bl	8009bd8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093cc:	f001 fd42 	bl	800ae54 <vPortEnterCritical>
 80093d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093d6:	b25b      	sxtb	r3, r3
 80093d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093dc:	d103      	bne.n	80093e6 <xQueueReceive+0x122>
 80093de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e0:	2200      	movs	r2, #0
 80093e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ec:	b25b      	sxtb	r3, r3
 80093ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093f2:	d103      	bne.n	80093fc <xQueueReceive+0x138>
 80093f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f6:	2200      	movs	r2, #0
 80093f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093fc:	f001 fd5a 	bl	800aeb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009400:	1d3a      	adds	r2, r7, #4
 8009402:	f107 0310 	add.w	r3, r7, #16
 8009406:	4611      	mov	r1, r2
 8009408:	4618      	mov	r0, r3
 800940a:	f000 fe83 	bl	800a114 <xTaskCheckForTimeOut>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d123      	bne.n	800945c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009414:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009416:	f000 f917 	bl	8009648 <prvIsQueueEmpty>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d017      	beq.n	8009450 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009422:	3324      	adds	r3, #36	; 0x24
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	4611      	mov	r1, r2
 8009428:	4618      	mov	r0, r3
 800942a:	f000 fda9 	bl	8009f80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800942e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009430:	f000 f8b8 	bl	80095a4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009434:	f000 fbde 	bl	8009bf4 <xTaskResumeAll>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d189      	bne.n	8009352 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800943e:	4b10      	ldr	r3, [pc, #64]	; (8009480 <xQueueReceive+0x1bc>)
 8009440:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009444:	601a      	str	r2, [r3, #0]
 8009446:	f3bf 8f4f 	dsb	sy
 800944a:	f3bf 8f6f 	isb	sy
 800944e:	e780      	b.n	8009352 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009452:	f000 f8a7 	bl	80095a4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009456:	f000 fbcd 	bl	8009bf4 <xTaskResumeAll>
 800945a:	e77a      	b.n	8009352 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800945c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945e:	f000 f8a1 	bl	80095a4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009462:	f000 fbc7 	bl	8009bf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009466:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009468:	f000 f8ee 	bl	8009648 <prvIsQueueEmpty>
 800946c:	4603      	mov	r3, r0
 800946e:	2b00      	cmp	r3, #0
 8009470:	f43f af6f 	beq.w	8009352 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009474:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009476:	4618      	mov	r0, r3
 8009478:	3730      	adds	r7, #48	; 0x30
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}
 800947e:	bf00      	nop
 8009480:	e000ed04 	.word	0xe000ed04

08009484 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b086      	sub	sp, #24
 8009488:	af00      	add	r7, sp, #0
 800948a:	60f8      	str	r0, [r7, #12]
 800948c:	60b9      	str	r1, [r7, #8]
 800948e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009490:	2300      	movs	r3, #0
 8009492:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d10d      	bne.n	80094be <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d14d      	bne.n	8009546 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	4618      	mov	r0, r3
 80094b0:	f000 ff92 	bl	800a3d8 <xTaskPriorityDisinherit>
 80094b4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	609a      	str	r2, [r3, #8]
 80094bc:	e043      	b.n	8009546 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d119      	bne.n	80094f8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	6858      	ldr	r0, [r3, #4]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094cc:	461a      	mov	r2, r3
 80094ce:	68b9      	ldr	r1, [r7, #8]
 80094d0:	f002 fb1a 	bl	800bb08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	685a      	ldr	r2, [r3, #4]
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094dc:	441a      	add	r2, r3
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	689b      	ldr	r3, [r3, #8]
 80094ea:	429a      	cmp	r2, r3
 80094ec:	d32b      	bcc.n	8009546 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	605a      	str	r2, [r3, #4]
 80094f6:	e026      	b.n	8009546 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	68d8      	ldr	r0, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009500:	461a      	mov	r2, r3
 8009502:	68b9      	ldr	r1, [r7, #8]
 8009504:	f002 fb00 	bl	800bb08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	68da      	ldr	r2, [r3, #12]
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009510:	425b      	negs	r3, r3
 8009512:	441a      	add	r2, r3
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	68da      	ldr	r2, [r3, #12]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	429a      	cmp	r2, r3
 8009522:	d207      	bcs.n	8009534 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	689a      	ldr	r2, [r3, #8]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800952c:	425b      	negs	r3, r3
 800952e:	441a      	add	r2, r3
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	2b02      	cmp	r3, #2
 8009538:	d105      	bne.n	8009546 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009540:	693b      	ldr	r3, [r7, #16]
 8009542:	3b01      	subs	r3, #1
 8009544:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	1c5a      	adds	r2, r3, #1
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800954e:	697b      	ldr	r3, [r7, #20]
}
 8009550:	4618      	mov	r0, r3
 8009552:	3718      	adds	r7, #24
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	2b00      	cmp	r3, #0
 8009568:	d018      	beq.n	800959c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68da      	ldr	r2, [r3, #12]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	441a      	add	r2, r3
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	68da      	ldr	r2, [r3, #12]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	429a      	cmp	r2, r3
 8009582:	d303      	bcc.n	800958c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	68d9      	ldr	r1, [r3, #12]
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009594:	461a      	mov	r2, r3
 8009596:	6838      	ldr	r0, [r7, #0]
 8009598:	f002 fab6 	bl	800bb08 <memcpy>
	}
}
 800959c:	bf00      	nop
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b084      	sub	sp, #16
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095ac:	f001 fc52 	bl	800ae54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095b6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095b8:	e011      	b.n	80095de <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d012      	beq.n	80095e8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	3324      	adds	r3, #36	; 0x24
 80095c6:	4618      	mov	r0, r3
 80095c8:	f000 fd2a 	bl	800a020 <xTaskRemoveFromEventList>
 80095cc:	4603      	mov	r3, r0
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d001      	beq.n	80095d6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095d2:	f000 fe01 	bl	800a1d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095d6:	7bfb      	ldrb	r3, [r7, #15]
 80095d8:	3b01      	subs	r3, #1
 80095da:	b2db      	uxtb	r3, r3
 80095dc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	dce9      	bgt.n	80095ba <prvUnlockQueue+0x16>
 80095e6:	e000      	b.n	80095ea <prvUnlockQueue+0x46>
					break;
 80095e8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	22ff      	movs	r2, #255	; 0xff
 80095ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095f2:	f001 fc5f 	bl	800aeb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095f6:	f001 fc2d 	bl	800ae54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009600:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009602:	e011      	b.n	8009628 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	691b      	ldr	r3, [r3, #16]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d012      	beq.n	8009632 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	3310      	adds	r3, #16
 8009610:	4618      	mov	r0, r3
 8009612:	f000 fd05 	bl	800a020 <xTaskRemoveFromEventList>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d001      	beq.n	8009620 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800961c:	f000 fddc 	bl	800a1d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009620:	7bbb      	ldrb	r3, [r7, #14]
 8009622:	3b01      	subs	r3, #1
 8009624:	b2db      	uxtb	r3, r3
 8009626:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009628:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800962c:	2b00      	cmp	r3, #0
 800962e:	dce9      	bgt.n	8009604 <prvUnlockQueue+0x60>
 8009630:	e000      	b.n	8009634 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009632:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	22ff      	movs	r2, #255	; 0xff
 8009638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800963c:	f001 fc3a 	bl	800aeb4 <vPortExitCritical>
}
 8009640:	bf00      	nop
 8009642:	3710      	adds	r7, #16
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009650:	f001 fc00 	bl	800ae54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009658:	2b00      	cmp	r3, #0
 800965a:	d102      	bne.n	8009662 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	60fb      	str	r3, [r7, #12]
 8009660:	e001      	b.n	8009666 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009662:	2300      	movs	r3, #0
 8009664:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009666:	f001 fc25 	bl	800aeb4 <vPortExitCritical>

	return xReturn;
 800966a:	68fb      	ldr	r3, [r7, #12]
}
 800966c:	4618      	mov	r0, r3
 800966e:	3710      	adds	r7, #16
 8009670:	46bd      	mov	sp, r7
 8009672:	bd80      	pop	{r7, pc}

08009674 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b084      	sub	sp, #16
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800967c:	f001 fbea 	bl	800ae54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009688:	429a      	cmp	r2, r3
 800968a:	d102      	bne.n	8009692 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800968c:	2301      	movs	r3, #1
 800968e:	60fb      	str	r3, [r7, #12]
 8009690:	e001      	b.n	8009696 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009692:	2300      	movs	r3, #0
 8009694:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009696:	f001 fc0d 	bl	800aeb4 <vPortExitCritical>

	return xReturn;
 800969a:	68fb      	ldr	r3, [r7, #12]
}
 800969c:	4618      	mov	r0, r3
 800969e:	3710      	adds	r7, #16
 80096a0:	46bd      	mov	sp, r7
 80096a2:	bd80      	pop	{r7, pc}

080096a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096a4:	b480      	push	{r7}
 80096a6:	b085      	sub	sp, #20
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	6078      	str	r0, [r7, #4]
 80096ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
 80096b2:	e014      	b.n	80096de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096b4:	4a0f      	ldr	r2, [pc, #60]	; (80096f4 <vQueueAddToRegistry+0x50>)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d10b      	bne.n	80096d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096c0:	490c      	ldr	r1, [pc, #48]	; (80096f4 <vQueueAddToRegistry+0x50>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	683a      	ldr	r2, [r7, #0]
 80096c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096ca:	4a0a      	ldr	r2, [pc, #40]	; (80096f4 <vQueueAddToRegistry+0x50>)
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	00db      	lsls	r3, r3, #3
 80096d0:	4413      	add	r3, r2
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096d6:	e006      	b.n	80096e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	3301      	adds	r3, #1
 80096dc:	60fb      	str	r3, [r7, #12]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2b07      	cmp	r3, #7
 80096e2:	d9e7      	bls.n	80096b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	3714      	adds	r7, #20
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20001cd4 	.word	0x20001cd4

080096f8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b086      	sub	sp, #24
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	60f8      	str	r0, [r7, #12]
 8009700:	60b9      	str	r1, [r7, #8]
 8009702:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009708:	f001 fba4 	bl	800ae54 <vPortEnterCritical>
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009712:	b25b      	sxtb	r3, r3
 8009714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009718:	d103      	bne.n	8009722 <vQueueWaitForMessageRestricted+0x2a>
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	2200      	movs	r2, #0
 800971e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009722:	697b      	ldr	r3, [r7, #20]
 8009724:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009728:	b25b      	sxtb	r3, r3
 800972a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800972e:	d103      	bne.n	8009738 <vQueueWaitForMessageRestricted+0x40>
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	2200      	movs	r2, #0
 8009734:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009738:	f001 fbbc 	bl	800aeb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009740:	2b00      	cmp	r3, #0
 8009742:	d106      	bne.n	8009752 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	3324      	adds	r3, #36	; 0x24
 8009748:	687a      	ldr	r2, [r7, #4]
 800974a:	68b9      	ldr	r1, [r7, #8]
 800974c:	4618      	mov	r0, r3
 800974e:	f000 fc3b 	bl	8009fc8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009752:	6978      	ldr	r0, [r7, #20]
 8009754:	f7ff ff26 	bl	80095a4 <prvUnlockQueue>
	}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009760:	b580      	push	{r7, lr}
 8009762:	b08e      	sub	sp, #56	; 0x38
 8009764:	af04      	add	r7, sp, #16
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800976e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009770:	2b00      	cmp	r3, #0
 8009772:	d10a      	bne.n	800978a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009778:	f383 8811 	msr	BASEPRI, r3
 800977c:	f3bf 8f6f 	isb	sy
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	623b      	str	r3, [r7, #32]
}
 8009786:	bf00      	nop
 8009788:	e7fe      	b.n	8009788 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800978a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10a      	bne.n	80097a6 <xTaskCreateStatic+0x46>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	61fb      	str	r3, [r7, #28]
}
 80097a2:	bf00      	nop
 80097a4:	e7fe      	b.n	80097a4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097a6:	235c      	movs	r3, #92	; 0x5c
 80097a8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097aa:	693b      	ldr	r3, [r7, #16]
 80097ac:	2b5c      	cmp	r3, #92	; 0x5c
 80097ae:	d00a      	beq.n	80097c6 <xTaskCreateStatic+0x66>
	__asm volatile
 80097b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b4:	f383 8811 	msr	BASEPRI, r3
 80097b8:	f3bf 8f6f 	isb	sy
 80097bc:	f3bf 8f4f 	dsb	sy
 80097c0:	61bb      	str	r3, [r7, #24]
}
 80097c2:	bf00      	nop
 80097c4:	e7fe      	b.n	80097c4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d01e      	beq.n	800980c <xTaskCreateStatic+0xac>
 80097ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d01b      	beq.n	800980c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	2202      	movs	r2, #2
 80097e2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097e6:	2300      	movs	r3, #0
 80097e8:	9303      	str	r3, [sp, #12]
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	9302      	str	r3, [sp, #8]
 80097ee:	f107 0314 	add.w	r3, r7, #20
 80097f2:	9301      	str	r3, [sp, #4]
 80097f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f6:	9300      	str	r3, [sp, #0]
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	68b9      	ldr	r1, [r7, #8]
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f000 f850 	bl	80098a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009806:	f000 f8dd 	bl	80099c4 <prvAddNewTaskToReadyList>
 800980a:	e001      	b.n	8009810 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800980c:	2300      	movs	r3, #0
 800980e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009810:	697b      	ldr	r3, [r7, #20]
	}
 8009812:	4618      	mov	r0, r3
 8009814:	3728      	adds	r7, #40	; 0x28
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800981a:	b580      	push	{r7, lr}
 800981c:	b08c      	sub	sp, #48	; 0x30
 800981e:	af04      	add	r7, sp, #16
 8009820:	60f8      	str	r0, [r7, #12]
 8009822:	60b9      	str	r1, [r7, #8]
 8009824:	603b      	str	r3, [r7, #0]
 8009826:	4613      	mov	r3, r2
 8009828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800982a:	88fb      	ldrh	r3, [r7, #6]
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	4618      	mov	r0, r3
 8009830:	f001 fc32 	bl	800b098 <pvPortMalloc>
 8009834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00e      	beq.n	800985a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800983c:	205c      	movs	r0, #92	; 0x5c
 800983e:	f001 fc2b 	bl	800b098 <pvPortMalloc>
 8009842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800984a:	69fb      	ldr	r3, [r7, #28]
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	631a      	str	r2, [r3, #48]	; 0x30
 8009850:	e005      	b.n	800985e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009852:	6978      	ldr	r0, [r7, #20]
 8009854:	f001 fcec 	bl	800b230 <vPortFree>
 8009858:	e001      	b.n	800985e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800985a:	2300      	movs	r3, #0
 800985c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d017      	beq.n	8009894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	2200      	movs	r2, #0
 8009868:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	2300      	movs	r3, #0
 8009870:	9303      	str	r3, [sp, #12]
 8009872:	69fb      	ldr	r3, [r7, #28]
 8009874:	9302      	str	r3, [sp, #8]
 8009876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009878:	9301      	str	r3, [sp, #4]
 800987a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800987c:	9300      	str	r3, [sp, #0]
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	68b9      	ldr	r1, [r7, #8]
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 f80e 	bl	80098a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009888:	69f8      	ldr	r0, [r7, #28]
 800988a:	f000 f89b 	bl	80099c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800988e:	2301      	movs	r3, #1
 8009890:	61bb      	str	r3, [r7, #24]
 8009892:	e002      	b.n	800989a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009894:	f04f 33ff 	mov.w	r3, #4294967295
 8009898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800989a:	69bb      	ldr	r3, [r7, #24]
	}
 800989c:	4618      	mov	r0, r3
 800989e:	3720      	adds	r7, #32
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}

080098a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b088      	sub	sp, #32
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	60f8      	str	r0, [r7, #12]
 80098ac:	60b9      	str	r1, [r7, #8]
 80098ae:	607a      	str	r2, [r7, #4]
 80098b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	461a      	mov	r2, r3
 80098bc:	21a5      	movs	r1, #165	; 0xa5
 80098be:	f002 f931 	bl	800bb24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098cc:	3b01      	subs	r3, #1
 80098ce:	009b      	lsls	r3, r3, #2
 80098d0:	4413      	add	r3, r2
 80098d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	f023 0307 	bic.w	r3, r3, #7
 80098da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	f003 0307 	and.w	r3, r3, #7
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <prvInitialiseNewTask+0x58>
	__asm volatile
 80098e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ea:	f383 8811 	msr	BASEPRI, r3
 80098ee:	f3bf 8f6f 	isb	sy
 80098f2:	f3bf 8f4f 	dsb	sy
 80098f6:	617b      	str	r3, [r7, #20]
}
 80098f8:	bf00      	nop
 80098fa:	e7fe      	b.n	80098fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d01f      	beq.n	8009942 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009902:	2300      	movs	r3, #0
 8009904:	61fb      	str	r3, [r7, #28]
 8009906:	e012      	b.n	800992e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	69fb      	ldr	r3, [r7, #28]
 800990c:	4413      	add	r3, r2
 800990e:	7819      	ldrb	r1, [r3, #0]
 8009910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	4413      	add	r3, r2
 8009916:	3334      	adds	r3, #52	; 0x34
 8009918:	460a      	mov	r2, r1
 800991a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800991c:	68ba      	ldr	r2, [r7, #8]
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	4413      	add	r3, r2
 8009922:	781b      	ldrb	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d006      	beq.n	8009936 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	3301      	adds	r3, #1
 800992c:	61fb      	str	r3, [r7, #28]
 800992e:	69fb      	ldr	r3, [r7, #28]
 8009930:	2b0f      	cmp	r3, #15
 8009932:	d9e9      	bls.n	8009908 <prvInitialiseNewTask+0x64>
 8009934:	e000      	b.n	8009938 <prvInitialiseNewTask+0x94>
			{
				break;
 8009936:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	2200      	movs	r2, #0
 800993c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009940:	e003      	b.n	800994a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	2200      	movs	r2, #0
 8009946:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800994a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994c:	2b37      	cmp	r3, #55	; 0x37
 800994e:	d901      	bls.n	8009954 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009950:	2337      	movs	r3, #55	; 0x37
 8009952:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009958:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800995e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	2200      	movs	r2, #0
 8009964:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	3304      	adds	r3, #4
 800996a:	4618      	mov	r0, r3
 800996c:	f7ff f978 	bl	8008c60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	3318      	adds	r3, #24
 8009974:	4618      	mov	r0, r3
 8009976:	f7ff f973 	bl	8008c60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800997e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009982:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800998a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009992:	2200      	movs	r2, #0
 8009994:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800999e:	683a      	ldr	r2, [r7, #0]
 80099a0:	68f9      	ldr	r1, [r7, #12]
 80099a2:	69b8      	ldr	r0, [r7, #24]
 80099a4:	f001 f928 	bl	800abf8 <pxPortInitialiseStack>
 80099a8:	4602      	mov	r2, r0
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d002      	beq.n	80099ba <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099ba:	bf00      	nop
 80099bc:	3720      	adds	r7, #32
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
	...

080099c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b082      	sub	sp, #8
 80099c8:	af00      	add	r7, sp, #0
 80099ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099cc:	f001 fa42 	bl	800ae54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099d0:	4b2d      	ldr	r3, [pc, #180]	; (8009a88 <prvAddNewTaskToReadyList+0xc4>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	3301      	adds	r3, #1
 80099d6:	4a2c      	ldr	r2, [pc, #176]	; (8009a88 <prvAddNewTaskToReadyList+0xc4>)
 80099d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099da:	4b2c      	ldr	r3, [pc, #176]	; (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d109      	bne.n	80099f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099e2:	4a2a      	ldr	r2, [pc, #168]	; (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099e8:	4b27      	ldr	r3, [pc, #156]	; (8009a88 <prvAddNewTaskToReadyList+0xc4>)
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d110      	bne.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099f0:	f000 fc16 	bl	800a220 <prvInitialiseTaskLists>
 80099f4:	e00d      	b.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80099f6:	4b26      	ldr	r3, [pc, #152]	; (8009a90 <prvAddNewTaskToReadyList+0xcc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d109      	bne.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80099fe:	4b23      	ldr	r3, [pc, #140]	; (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d802      	bhi.n	8009a12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a0c:	4a1f      	ldr	r2, [pc, #124]	; (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a12:	4b20      	ldr	r3, [pc, #128]	; (8009a94 <prvAddNewTaskToReadyList+0xd0>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	3301      	adds	r3, #1
 8009a18:	4a1e      	ldr	r2, [pc, #120]	; (8009a94 <prvAddNewTaskToReadyList+0xd0>)
 8009a1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a1c:	4b1d      	ldr	r3, [pc, #116]	; (8009a94 <prvAddNewTaskToReadyList+0xd0>)
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a28:	4b1b      	ldr	r3, [pc, #108]	; (8009a98 <prvAddNewTaskToReadyList+0xd4>)
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d903      	bls.n	8009a38 <prvAddNewTaskToReadyList+0x74>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a34:	4a18      	ldr	r2, [pc, #96]	; (8009a98 <prvAddNewTaskToReadyList+0xd4>)
 8009a36:	6013      	str	r3, [r2, #0]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4413      	add	r3, r2
 8009a42:	009b      	lsls	r3, r3, #2
 8009a44:	4a15      	ldr	r2, [pc, #84]	; (8009a9c <prvAddNewTaskToReadyList+0xd8>)
 8009a46:	441a      	add	r2, r3
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3304      	adds	r3, #4
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	4610      	mov	r0, r2
 8009a50:	f7ff f913 	bl	8008c7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a54:	f001 fa2e 	bl	800aeb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a58:	4b0d      	ldr	r3, [pc, #52]	; (8009a90 <prvAddNewTaskToReadyList+0xcc>)
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d00e      	beq.n	8009a7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a60:	4b0a      	ldr	r3, [pc, #40]	; (8009a8c <prvAddNewTaskToReadyList+0xc8>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	d207      	bcs.n	8009a7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a6e:	4b0c      	ldr	r3, [pc, #48]	; (8009aa0 <prvAddNewTaskToReadyList+0xdc>)
 8009a70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	f3bf 8f4f 	dsb	sy
 8009a7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	200021e8 	.word	0x200021e8
 8009a8c:	20001d14 	.word	0x20001d14
 8009a90:	200021f4 	.word	0x200021f4
 8009a94:	20002204 	.word	0x20002204
 8009a98:	200021f0 	.word	0x200021f0
 8009a9c:	20001d18 	.word	0x20001d18
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b084      	sub	sp, #16
 8009aa8:	af00      	add	r7, sp, #0
 8009aaa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d017      	beq.n	8009ae6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009ab6:	4b13      	ldr	r3, [pc, #76]	; (8009b04 <vTaskDelay+0x60>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d00a      	beq.n	8009ad4 <vTaskDelay+0x30>
	__asm volatile
 8009abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac2:	f383 8811 	msr	BASEPRI, r3
 8009ac6:	f3bf 8f6f 	isb	sy
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	60bb      	str	r3, [r7, #8]
}
 8009ad0:	bf00      	nop
 8009ad2:	e7fe      	b.n	8009ad2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009ad4:	f000 f880 	bl	8009bd8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009ad8:	2100      	movs	r1, #0
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fcea 	bl	800a4b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009ae0:	f000 f888 	bl	8009bf4 <xTaskResumeAll>
 8009ae4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d107      	bne.n	8009afc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009aec:	4b06      	ldr	r3, [pc, #24]	; (8009b08 <vTaskDelay+0x64>)
 8009aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009af2:	601a      	str	r2, [r3, #0]
 8009af4:	f3bf 8f4f 	dsb	sy
 8009af8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009afc:	bf00      	nop
 8009afe:	3710      	adds	r7, #16
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bd80      	pop	{r7, pc}
 8009b04:	20002210 	.word	0x20002210
 8009b08:	e000ed04 	.word	0xe000ed04

08009b0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b08a      	sub	sp, #40	; 0x28
 8009b10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b12:	2300      	movs	r3, #0
 8009b14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b16:	2300      	movs	r3, #0
 8009b18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b1a:	463a      	mov	r2, r7
 8009b1c:	1d39      	adds	r1, r7, #4
 8009b1e:	f107 0308 	add.w	r3, r7, #8
 8009b22:	4618      	mov	r0, r3
 8009b24:	f7ff f848 	bl	8008bb8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b28:	6839      	ldr	r1, [r7, #0]
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	68ba      	ldr	r2, [r7, #8]
 8009b2e:	9202      	str	r2, [sp, #8]
 8009b30:	9301      	str	r3, [sp, #4]
 8009b32:	2300      	movs	r3, #0
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	2300      	movs	r3, #0
 8009b38:	460a      	mov	r2, r1
 8009b3a:	4921      	ldr	r1, [pc, #132]	; (8009bc0 <vTaskStartScheduler+0xb4>)
 8009b3c:	4821      	ldr	r0, [pc, #132]	; (8009bc4 <vTaskStartScheduler+0xb8>)
 8009b3e:	f7ff fe0f 	bl	8009760 <xTaskCreateStatic>
 8009b42:	4603      	mov	r3, r0
 8009b44:	4a20      	ldr	r2, [pc, #128]	; (8009bc8 <vTaskStartScheduler+0xbc>)
 8009b46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b48:	4b1f      	ldr	r3, [pc, #124]	; (8009bc8 <vTaskStartScheduler+0xbc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d002      	beq.n	8009b56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b50:	2301      	movs	r3, #1
 8009b52:	617b      	str	r3, [r7, #20]
 8009b54:	e001      	b.n	8009b5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b56:	2300      	movs	r3, #0
 8009b58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d102      	bne.n	8009b66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b60:	f000 fcfc 	bl	800a55c <xTimerCreateTimerTask>
 8009b64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b66:	697b      	ldr	r3, [r7, #20]
 8009b68:	2b01      	cmp	r3, #1
 8009b6a:	d116      	bne.n	8009b9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8009b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b70:	f383 8811 	msr	BASEPRI, r3
 8009b74:	f3bf 8f6f 	isb	sy
 8009b78:	f3bf 8f4f 	dsb	sy
 8009b7c:	613b      	str	r3, [r7, #16]
}
 8009b7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009b80:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <vTaskStartScheduler+0xc0>)
 8009b82:	f04f 32ff 	mov.w	r2, #4294967295
 8009b86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009b88:	4b11      	ldr	r3, [pc, #68]	; (8009bd0 <vTaskStartScheduler+0xc4>)
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009b8e:	4b11      	ldr	r3, [pc, #68]	; (8009bd4 <vTaskStartScheduler+0xc8>)
 8009b90:	2200      	movs	r2, #0
 8009b92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009b94:	f001 f8bc 	bl	800ad10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b98:	e00e      	b.n	8009bb8 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ba0:	d10a      	bne.n	8009bb8 <vTaskStartScheduler+0xac>
	__asm volatile
 8009ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba6:	f383 8811 	msr	BASEPRI, r3
 8009baa:	f3bf 8f6f 	isb	sy
 8009bae:	f3bf 8f4f 	dsb	sy
 8009bb2:	60fb      	str	r3, [r7, #12]
}
 8009bb4:	bf00      	nop
 8009bb6:	e7fe      	b.n	8009bb6 <vTaskStartScheduler+0xaa>
}
 8009bb8:	bf00      	nop
 8009bba:	3718      	adds	r7, #24
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	080105b0 	.word	0x080105b0
 8009bc4:	0800a1f1 	.word	0x0800a1f1
 8009bc8:	2000220c 	.word	0x2000220c
 8009bcc:	20002208 	.word	0x20002208
 8009bd0:	200021f4 	.word	0x200021f4
 8009bd4:	200021ec 	.word	0x200021ec

08009bd8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009bd8:	b480      	push	{r7}
 8009bda:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009bdc:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <vTaskSuspendAll+0x18>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	3301      	adds	r3, #1
 8009be2:	4a03      	ldr	r2, [pc, #12]	; (8009bf0 <vTaskSuspendAll+0x18>)
 8009be4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009be6:	bf00      	nop
 8009be8:	46bd      	mov	sp, r7
 8009bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bee:	4770      	bx	lr
 8009bf0:	20002210 	.word	0x20002210

08009bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009bfe:	2300      	movs	r3, #0
 8009c00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c02:	4b42      	ldr	r3, [pc, #264]	; (8009d0c <xTaskResumeAll+0x118>)
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <xTaskResumeAll+0x2c>
	__asm volatile
 8009c0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0e:	f383 8811 	msr	BASEPRI, r3
 8009c12:	f3bf 8f6f 	isb	sy
 8009c16:	f3bf 8f4f 	dsb	sy
 8009c1a:	603b      	str	r3, [r7, #0]
}
 8009c1c:	bf00      	nop
 8009c1e:	e7fe      	b.n	8009c1e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c20:	f001 f918 	bl	800ae54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c24:	4b39      	ldr	r3, [pc, #228]	; (8009d0c <xTaskResumeAll+0x118>)
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	3b01      	subs	r3, #1
 8009c2a:	4a38      	ldr	r2, [pc, #224]	; (8009d0c <xTaskResumeAll+0x118>)
 8009c2c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c2e:	4b37      	ldr	r3, [pc, #220]	; (8009d0c <xTaskResumeAll+0x118>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d162      	bne.n	8009cfc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c36:	4b36      	ldr	r3, [pc, #216]	; (8009d10 <xTaskResumeAll+0x11c>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d05e      	beq.n	8009cfc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c3e:	e02f      	b.n	8009ca0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c40:	4b34      	ldr	r3, [pc, #208]	; (8009d14 <xTaskResumeAll+0x120>)
 8009c42:	68db      	ldr	r3, [r3, #12]
 8009c44:	68db      	ldr	r3, [r3, #12]
 8009c46:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	3318      	adds	r3, #24
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f7ff f871 	bl	8008d34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	3304      	adds	r3, #4
 8009c56:	4618      	mov	r0, r3
 8009c58:	f7ff f86c 	bl	8008d34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c60:	4b2d      	ldr	r3, [pc, #180]	; (8009d18 <xTaskResumeAll+0x124>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	429a      	cmp	r2, r3
 8009c66:	d903      	bls.n	8009c70 <xTaskResumeAll+0x7c>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c6c:	4a2a      	ldr	r2, [pc, #168]	; (8009d18 <xTaskResumeAll+0x124>)
 8009c6e:	6013      	str	r3, [r2, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c74:	4613      	mov	r3, r2
 8009c76:	009b      	lsls	r3, r3, #2
 8009c78:	4413      	add	r3, r2
 8009c7a:	009b      	lsls	r3, r3, #2
 8009c7c:	4a27      	ldr	r2, [pc, #156]	; (8009d1c <xTaskResumeAll+0x128>)
 8009c7e:	441a      	add	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	3304      	adds	r3, #4
 8009c84:	4619      	mov	r1, r3
 8009c86:	4610      	mov	r0, r2
 8009c88:	f7fe fff7 	bl	8008c7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c90:	4b23      	ldr	r3, [pc, #140]	; (8009d20 <xTaskResumeAll+0x12c>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c96:	429a      	cmp	r2, r3
 8009c98:	d302      	bcc.n	8009ca0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c9a:	4b22      	ldr	r3, [pc, #136]	; (8009d24 <xTaskResumeAll+0x130>)
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009ca0:	4b1c      	ldr	r3, [pc, #112]	; (8009d14 <xTaskResumeAll+0x120>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1cb      	bne.n	8009c40 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d001      	beq.n	8009cb2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cae:	f000 fb55 	bl	800a35c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009cb2:	4b1d      	ldr	r3, [pc, #116]	; (8009d28 <xTaskResumeAll+0x134>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d010      	beq.n	8009ce0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009cbe:	f000 f847 	bl	8009d50 <xTaskIncrementTick>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	d002      	beq.n	8009cce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009cc8:	4b16      	ldr	r3, [pc, #88]	; (8009d24 <xTaskResumeAll+0x130>)
 8009cca:	2201      	movs	r2, #1
 8009ccc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	3b01      	subs	r3, #1
 8009cd2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1f1      	bne.n	8009cbe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009cda:	4b13      	ldr	r3, [pc, #76]	; (8009d28 <xTaskResumeAll+0x134>)
 8009cdc:	2200      	movs	r2, #0
 8009cde:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009ce0:	4b10      	ldr	r3, [pc, #64]	; (8009d24 <xTaskResumeAll+0x130>)
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d009      	beq.n	8009cfc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009ce8:	2301      	movs	r3, #1
 8009cea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009cec:	4b0f      	ldr	r3, [pc, #60]	; (8009d2c <xTaskResumeAll+0x138>)
 8009cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cf2:	601a      	str	r2, [r3, #0]
 8009cf4:	f3bf 8f4f 	dsb	sy
 8009cf8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009cfc:	f001 f8da 	bl	800aeb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009d00:	68bb      	ldr	r3, [r7, #8]
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3710      	adds	r7, #16
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	20002210 	.word	0x20002210
 8009d10:	200021e8 	.word	0x200021e8
 8009d14:	200021a8 	.word	0x200021a8
 8009d18:	200021f0 	.word	0x200021f0
 8009d1c:	20001d18 	.word	0x20001d18
 8009d20:	20001d14 	.word	0x20001d14
 8009d24:	200021fc 	.word	0x200021fc
 8009d28:	200021f8 	.word	0x200021f8
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d30:	b480      	push	{r7}
 8009d32:	b083      	sub	sp, #12
 8009d34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d36:	4b05      	ldr	r3, [pc, #20]	; (8009d4c <xTaskGetTickCount+0x1c>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d3c:	687b      	ldr	r3, [r7, #4]
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	370c      	adds	r7, #12
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr
 8009d4a:	bf00      	nop
 8009d4c:	200021ec 	.word	0x200021ec

08009d50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b086      	sub	sp, #24
 8009d54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009d56:	2300      	movs	r3, #0
 8009d58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d5a:	4b4f      	ldr	r3, [pc, #316]	; (8009e98 <xTaskIncrementTick+0x148>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f040 808f 	bne.w	8009e82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009d64:	4b4d      	ldr	r3, [pc, #308]	; (8009e9c <xTaskIncrementTick+0x14c>)
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	3301      	adds	r3, #1
 8009d6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009d6c:	4a4b      	ldr	r2, [pc, #300]	; (8009e9c <xTaskIncrementTick+0x14c>)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009d72:	693b      	ldr	r3, [r7, #16]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d120      	bne.n	8009dba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009d78:	4b49      	ldr	r3, [pc, #292]	; (8009ea0 <xTaskIncrementTick+0x150>)
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d00a      	beq.n	8009d98 <xTaskIncrementTick+0x48>
	__asm volatile
 8009d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d86:	f383 8811 	msr	BASEPRI, r3
 8009d8a:	f3bf 8f6f 	isb	sy
 8009d8e:	f3bf 8f4f 	dsb	sy
 8009d92:	603b      	str	r3, [r7, #0]
}
 8009d94:	bf00      	nop
 8009d96:	e7fe      	b.n	8009d96 <xTaskIncrementTick+0x46>
 8009d98:	4b41      	ldr	r3, [pc, #260]	; (8009ea0 <xTaskIncrementTick+0x150>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	60fb      	str	r3, [r7, #12]
 8009d9e:	4b41      	ldr	r3, [pc, #260]	; (8009ea4 <xTaskIncrementTick+0x154>)
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a3f      	ldr	r2, [pc, #252]	; (8009ea0 <xTaskIncrementTick+0x150>)
 8009da4:	6013      	str	r3, [r2, #0]
 8009da6:	4a3f      	ldr	r2, [pc, #252]	; (8009ea4 <xTaskIncrementTick+0x154>)
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	6013      	str	r3, [r2, #0]
 8009dac:	4b3e      	ldr	r3, [pc, #248]	; (8009ea8 <xTaskIncrementTick+0x158>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	3301      	adds	r3, #1
 8009db2:	4a3d      	ldr	r2, [pc, #244]	; (8009ea8 <xTaskIncrementTick+0x158>)
 8009db4:	6013      	str	r3, [r2, #0]
 8009db6:	f000 fad1 	bl	800a35c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009dba:	4b3c      	ldr	r3, [pc, #240]	; (8009eac <xTaskIncrementTick+0x15c>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	693a      	ldr	r2, [r7, #16]
 8009dc0:	429a      	cmp	r2, r3
 8009dc2:	d349      	bcc.n	8009e58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dc4:	4b36      	ldr	r3, [pc, #216]	; (8009ea0 <xTaskIncrementTick+0x150>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d104      	bne.n	8009dd8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dce:	4b37      	ldr	r3, [pc, #220]	; (8009eac <xTaskIncrementTick+0x15c>)
 8009dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8009dd4:	601a      	str	r2, [r3, #0]
					break;
 8009dd6:	e03f      	b.n	8009e58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009dd8:	4b31      	ldr	r3, [pc, #196]	; (8009ea0 <xTaskIncrementTick+0x150>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	68db      	ldr	r3, [r3, #12]
 8009dde:	68db      	ldr	r3, [r3, #12]
 8009de0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009de8:	693a      	ldr	r2, [r7, #16]
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	429a      	cmp	r2, r3
 8009dee:	d203      	bcs.n	8009df8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009df0:	4a2e      	ldr	r2, [pc, #184]	; (8009eac <xTaskIncrementTick+0x15c>)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009df6:	e02f      	b.n	8009e58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009df8:	68bb      	ldr	r3, [r7, #8]
 8009dfa:	3304      	adds	r3, #4
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f7fe ff99 	bl	8008d34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d004      	beq.n	8009e14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e0a:	68bb      	ldr	r3, [r7, #8]
 8009e0c:	3318      	adds	r3, #24
 8009e0e:	4618      	mov	r0, r3
 8009e10:	f7fe ff90 	bl	8008d34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e18:	4b25      	ldr	r3, [pc, #148]	; (8009eb0 <xTaskIncrementTick+0x160>)
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	429a      	cmp	r2, r3
 8009e1e:	d903      	bls.n	8009e28 <xTaskIncrementTick+0xd8>
 8009e20:	68bb      	ldr	r3, [r7, #8]
 8009e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e24:	4a22      	ldr	r2, [pc, #136]	; (8009eb0 <xTaskIncrementTick+0x160>)
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	68bb      	ldr	r3, [r7, #8]
 8009e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e2c:	4613      	mov	r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	4413      	add	r3, r2
 8009e32:	009b      	lsls	r3, r3, #2
 8009e34:	4a1f      	ldr	r2, [pc, #124]	; (8009eb4 <xTaskIncrementTick+0x164>)
 8009e36:	441a      	add	r2, r3
 8009e38:	68bb      	ldr	r3, [r7, #8]
 8009e3a:	3304      	adds	r3, #4
 8009e3c:	4619      	mov	r1, r3
 8009e3e:	4610      	mov	r0, r2
 8009e40:	f7fe ff1b 	bl	8008c7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e48:	4b1b      	ldr	r3, [pc, #108]	; (8009eb8 <xTaskIncrementTick+0x168>)
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d3b8      	bcc.n	8009dc4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e52:	2301      	movs	r3, #1
 8009e54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e56:	e7b5      	b.n	8009dc4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009e58:	4b17      	ldr	r3, [pc, #92]	; (8009eb8 <xTaskIncrementTick+0x168>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e5e:	4915      	ldr	r1, [pc, #84]	; (8009eb4 <xTaskIncrementTick+0x164>)
 8009e60:	4613      	mov	r3, r2
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	4413      	add	r3, r2
 8009e66:	009b      	lsls	r3, r3, #2
 8009e68:	440b      	add	r3, r1
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	2b01      	cmp	r3, #1
 8009e6e:	d901      	bls.n	8009e74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009e70:	2301      	movs	r3, #1
 8009e72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009e74:	4b11      	ldr	r3, [pc, #68]	; (8009ebc <xTaskIncrementTick+0x16c>)
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d007      	beq.n	8009e8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	617b      	str	r3, [r7, #20]
 8009e80:	e004      	b.n	8009e8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009e82:	4b0f      	ldr	r3, [pc, #60]	; (8009ec0 <xTaskIncrementTick+0x170>)
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	3301      	adds	r3, #1
 8009e88:	4a0d      	ldr	r2, [pc, #52]	; (8009ec0 <xTaskIncrementTick+0x170>)
 8009e8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e8c:	697b      	ldr	r3, [r7, #20]
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3718      	adds	r7, #24
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}
 8009e96:	bf00      	nop
 8009e98:	20002210 	.word	0x20002210
 8009e9c:	200021ec 	.word	0x200021ec
 8009ea0:	200021a0 	.word	0x200021a0
 8009ea4:	200021a4 	.word	0x200021a4
 8009ea8:	20002200 	.word	0x20002200
 8009eac:	20002208 	.word	0x20002208
 8009eb0:	200021f0 	.word	0x200021f0
 8009eb4:	20001d18 	.word	0x20001d18
 8009eb8:	20001d14 	.word	0x20001d14
 8009ebc:	200021fc 	.word	0x200021fc
 8009ec0:	200021f8 	.word	0x200021f8

08009ec4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b085      	sub	sp, #20
 8009ec8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009eca:	4b28      	ldr	r3, [pc, #160]	; (8009f6c <vTaskSwitchContext+0xa8>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d003      	beq.n	8009eda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009ed2:	4b27      	ldr	r3, [pc, #156]	; (8009f70 <vTaskSwitchContext+0xac>)
 8009ed4:	2201      	movs	r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009ed8:	e041      	b.n	8009f5e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009eda:	4b25      	ldr	r3, [pc, #148]	; (8009f70 <vTaskSwitchContext+0xac>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee0:	4b24      	ldr	r3, [pc, #144]	; (8009f74 <vTaskSwitchContext+0xb0>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	60fb      	str	r3, [r7, #12]
 8009ee6:	e010      	b.n	8009f0a <vTaskSwitchContext+0x46>
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d10a      	bne.n	8009f04 <vTaskSwitchContext+0x40>
	__asm volatile
 8009eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ef2:	f383 8811 	msr	BASEPRI, r3
 8009ef6:	f3bf 8f6f 	isb	sy
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	607b      	str	r3, [r7, #4]
}
 8009f00:	bf00      	nop
 8009f02:	e7fe      	b.n	8009f02 <vTaskSwitchContext+0x3e>
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	3b01      	subs	r3, #1
 8009f08:	60fb      	str	r3, [r7, #12]
 8009f0a:	491b      	ldr	r1, [pc, #108]	; (8009f78 <vTaskSwitchContext+0xb4>)
 8009f0c:	68fa      	ldr	r2, [r7, #12]
 8009f0e:	4613      	mov	r3, r2
 8009f10:	009b      	lsls	r3, r3, #2
 8009f12:	4413      	add	r3, r2
 8009f14:	009b      	lsls	r3, r3, #2
 8009f16:	440b      	add	r3, r1
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0e4      	beq.n	8009ee8 <vTaskSwitchContext+0x24>
 8009f1e:	68fa      	ldr	r2, [r7, #12]
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	4a13      	ldr	r2, [pc, #76]	; (8009f78 <vTaskSwitchContext+0xb4>)
 8009f2a:	4413      	add	r3, r2
 8009f2c:	60bb      	str	r3, [r7, #8]
 8009f2e:	68bb      	ldr	r3, [r7, #8]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	685a      	ldr	r2, [r3, #4]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	605a      	str	r2, [r3, #4]
 8009f38:	68bb      	ldr	r3, [r7, #8]
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	3308      	adds	r3, #8
 8009f40:	429a      	cmp	r2, r3
 8009f42:	d104      	bne.n	8009f4e <vTaskSwitchContext+0x8a>
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	685a      	ldr	r2, [r3, #4]
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	605a      	str	r2, [r3, #4]
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	685b      	ldr	r3, [r3, #4]
 8009f52:	68db      	ldr	r3, [r3, #12]
 8009f54:	4a09      	ldr	r2, [pc, #36]	; (8009f7c <vTaskSwitchContext+0xb8>)
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	4a06      	ldr	r2, [pc, #24]	; (8009f74 <vTaskSwitchContext+0xb0>)
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	6013      	str	r3, [r2, #0]
}
 8009f5e:	bf00      	nop
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr
 8009f6a:	bf00      	nop
 8009f6c:	20002210 	.word	0x20002210
 8009f70:	200021fc 	.word	0x200021fc
 8009f74:	200021f0 	.word	0x200021f0
 8009f78:	20001d18 	.word	0x20001d18
 8009f7c:	20001d14 	.word	0x20001d14

08009f80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b084      	sub	sp, #16
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10a      	bne.n	8009fa6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f94:	f383 8811 	msr	BASEPRI, r3
 8009f98:	f3bf 8f6f 	isb	sy
 8009f9c:	f3bf 8f4f 	dsb	sy
 8009fa0:	60fb      	str	r3, [r7, #12]
}
 8009fa2:	bf00      	nop
 8009fa4:	e7fe      	b.n	8009fa4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009fa6:	4b07      	ldr	r3, [pc, #28]	; (8009fc4 <vTaskPlaceOnEventList+0x44>)
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	3318      	adds	r3, #24
 8009fac:	4619      	mov	r1, r3
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f7fe fe87 	bl	8008cc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009fb4:	2101      	movs	r1, #1
 8009fb6:	6838      	ldr	r0, [r7, #0]
 8009fb8:	f000 fa7c 	bl	800a4b4 <prvAddCurrentTaskToDelayedList>
}
 8009fbc:	bf00      	nop
 8009fbe:	3710      	adds	r7, #16
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}
 8009fc4:	20001d14 	.word	0x20001d14

08009fc8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b086      	sub	sp, #24
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d10a      	bne.n	8009ff0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009fda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fde:	f383 8811 	msr	BASEPRI, r3
 8009fe2:	f3bf 8f6f 	isb	sy
 8009fe6:	f3bf 8f4f 	dsb	sy
 8009fea:	617b      	str	r3, [r7, #20]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ff0:	4b0a      	ldr	r3, [pc, #40]	; (800a01c <vTaskPlaceOnEventListRestricted+0x54>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	3318      	adds	r3, #24
 8009ff6:	4619      	mov	r1, r3
 8009ff8:	68f8      	ldr	r0, [r7, #12]
 8009ffa:	f7fe fe3e 	bl	8008c7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d002      	beq.n	800a00a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a004:	f04f 33ff 	mov.w	r3, #4294967295
 800a008:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a00a:	6879      	ldr	r1, [r7, #4]
 800a00c:	68b8      	ldr	r0, [r7, #8]
 800a00e:	f000 fa51 	bl	800a4b4 <prvAddCurrentTaskToDelayedList>
	}
 800a012:	bf00      	nop
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	20001d14 	.word	0x20001d14

0800a020 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	68db      	ldr	r3, [r3, #12]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a030:	693b      	ldr	r3, [r7, #16]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d10a      	bne.n	800a04c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a03a:	f383 8811 	msr	BASEPRI, r3
 800a03e:	f3bf 8f6f 	isb	sy
 800a042:	f3bf 8f4f 	dsb	sy
 800a046:	60fb      	str	r3, [r7, #12]
}
 800a048:	bf00      	nop
 800a04a:	e7fe      	b.n	800a04a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	3318      	adds	r3, #24
 800a050:	4618      	mov	r0, r3
 800a052:	f7fe fe6f 	bl	8008d34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a056:	4b1e      	ldr	r3, [pc, #120]	; (800a0d0 <xTaskRemoveFromEventList+0xb0>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d11d      	bne.n	800a09a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a05e:	693b      	ldr	r3, [r7, #16]
 800a060:	3304      	adds	r3, #4
 800a062:	4618      	mov	r0, r3
 800a064:	f7fe fe66 	bl	8008d34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a06c:	4b19      	ldr	r3, [pc, #100]	; (800a0d4 <xTaskRemoveFromEventList+0xb4>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d903      	bls.n	800a07c <xTaskRemoveFromEventList+0x5c>
 800a074:	693b      	ldr	r3, [r7, #16]
 800a076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a078:	4a16      	ldr	r2, [pc, #88]	; (800a0d4 <xTaskRemoveFromEventList+0xb4>)
 800a07a:	6013      	str	r3, [r2, #0]
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a080:	4613      	mov	r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	009b      	lsls	r3, r3, #2
 800a088:	4a13      	ldr	r2, [pc, #76]	; (800a0d8 <xTaskRemoveFromEventList+0xb8>)
 800a08a:	441a      	add	r2, r3
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f7fe fdf1 	bl	8008c7a <vListInsertEnd>
 800a098:	e005      	b.n	800a0a6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	3318      	adds	r3, #24
 800a09e:	4619      	mov	r1, r3
 800a0a0:	480e      	ldr	r0, [pc, #56]	; (800a0dc <xTaskRemoveFromEventList+0xbc>)
 800a0a2:	f7fe fdea 	bl	8008c7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0aa:	4b0d      	ldr	r3, [pc, #52]	; (800a0e0 <xTaskRemoveFromEventList+0xc0>)
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d905      	bls.n	800a0c0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a0b8:	4b0a      	ldr	r3, [pc, #40]	; (800a0e4 <xTaskRemoveFromEventList+0xc4>)
 800a0ba:	2201      	movs	r2, #1
 800a0bc:	601a      	str	r2, [r3, #0]
 800a0be:	e001      	b.n	800a0c4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a0c4:	697b      	ldr	r3, [r7, #20]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3718      	adds	r7, #24
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
 800a0ce:	bf00      	nop
 800a0d0:	20002210 	.word	0x20002210
 800a0d4:	200021f0 	.word	0x200021f0
 800a0d8:	20001d18 	.word	0x20001d18
 800a0dc:	200021a8 	.word	0x200021a8
 800a0e0:	20001d14 	.word	0x20001d14
 800a0e4:	200021fc 	.word	0x200021fc

0800a0e8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	b083      	sub	sp, #12
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a0f0:	4b06      	ldr	r3, [pc, #24]	; (800a10c <vTaskInternalSetTimeOutState+0x24>)
 800a0f2:	681a      	ldr	r2, [r3, #0]
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a0f8:	4b05      	ldr	r3, [pc, #20]	; (800a110 <vTaskInternalSetTimeOutState+0x28>)
 800a0fa:	681a      	ldr	r2, [r3, #0]
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	605a      	str	r2, [r3, #4]
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr
 800a10c:	20002200 	.word	0x20002200
 800a110:	200021ec 	.word	0x200021ec

0800a114 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b088      	sub	sp, #32
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	613b      	str	r3, [r7, #16]
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d10a      	bne.n	800a156 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a144:	f383 8811 	msr	BASEPRI, r3
 800a148:	f3bf 8f6f 	isb	sy
 800a14c:	f3bf 8f4f 	dsb	sy
 800a150:	60fb      	str	r3, [r7, #12]
}
 800a152:	bf00      	nop
 800a154:	e7fe      	b.n	800a154 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a156:	f000 fe7d 	bl	800ae54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a15a:	4b1d      	ldr	r3, [pc, #116]	; (800a1d0 <xTaskCheckForTimeOut+0xbc>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	685b      	ldr	r3, [r3, #4]
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	1ad3      	subs	r3, r2, r3
 800a168:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a172:	d102      	bne.n	800a17a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a174:	2300      	movs	r3, #0
 800a176:	61fb      	str	r3, [r7, #28]
 800a178:	e023      	b.n	800a1c2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	4b15      	ldr	r3, [pc, #84]	; (800a1d4 <xTaskCheckForTimeOut+0xc0>)
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	429a      	cmp	r2, r3
 800a184:	d007      	beq.n	800a196 <xTaskCheckForTimeOut+0x82>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	69ba      	ldr	r2, [r7, #24]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d302      	bcc.n	800a196 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a190:	2301      	movs	r3, #1
 800a192:	61fb      	str	r3, [r7, #28]
 800a194:	e015      	b.n	800a1c2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	697a      	ldr	r2, [r7, #20]
 800a19c:	429a      	cmp	r2, r3
 800a19e:	d20b      	bcs.n	800a1b8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	681a      	ldr	r2, [r3, #0]
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	683b      	ldr	r3, [r7, #0]
 800a1aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a1ac:	6878      	ldr	r0, [r7, #4]
 800a1ae:	f7ff ff9b 	bl	800a0e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	61fb      	str	r3, [r7, #28]
 800a1b6:	e004      	b.n	800a1c2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	2200      	movs	r2, #0
 800a1bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a1be:	2301      	movs	r3, #1
 800a1c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a1c2:	f000 fe77 	bl	800aeb4 <vPortExitCritical>

	return xReturn;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3720      	adds	r7, #32
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	200021ec 	.word	0x200021ec
 800a1d4:	20002200 	.word	0x20002200

0800a1d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a1d8:	b480      	push	{r7}
 800a1da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a1dc:	4b03      	ldr	r3, [pc, #12]	; (800a1ec <vTaskMissedYield+0x14>)
 800a1de:	2201      	movs	r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
}
 800a1e2:	bf00      	nop
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ea:	4770      	bx	lr
 800a1ec:	200021fc 	.word	0x200021fc

0800a1f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b082      	sub	sp, #8
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a1f8:	f000 f852 	bl	800a2a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a1fc:	4b06      	ldr	r3, [pc, #24]	; (800a218 <prvIdleTask+0x28>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2b01      	cmp	r3, #1
 800a202:	d9f9      	bls.n	800a1f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a204:	4b05      	ldr	r3, [pc, #20]	; (800a21c <prvIdleTask+0x2c>)
 800a206:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a20a:	601a      	str	r2, [r3, #0]
 800a20c:	f3bf 8f4f 	dsb	sy
 800a210:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a214:	e7f0      	b.n	800a1f8 <prvIdleTask+0x8>
 800a216:	bf00      	nop
 800a218:	20001d18 	.word	0x20001d18
 800a21c:	e000ed04 	.word	0xe000ed04

0800a220 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a226:	2300      	movs	r3, #0
 800a228:	607b      	str	r3, [r7, #4]
 800a22a:	e00c      	b.n	800a246 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a22c:	687a      	ldr	r2, [r7, #4]
 800a22e:	4613      	mov	r3, r2
 800a230:	009b      	lsls	r3, r3, #2
 800a232:	4413      	add	r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	4a12      	ldr	r2, [pc, #72]	; (800a280 <prvInitialiseTaskLists+0x60>)
 800a238:	4413      	add	r3, r2
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fcf0 	bl	8008c20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	3301      	adds	r3, #1
 800a244:	607b      	str	r3, [r7, #4]
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b37      	cmp	r3, #55	; 0x37
 800a24a:	d9ef      	bls.n	800a22c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a24c:	480d      	ldr	r0, [pc, #52]	; (800a284 <prvInitialiseTaskLists+0x64>)
 800a24e:	f7fe fce7 	bl	8008c20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a252:	480d      	ldr	r0, [pc, #52]	; (800a288 <prvInitialiseTaskLists+0x68>)
 800a254:	f7fe fce4 	bl	8008c20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a258:	480c      	ldr	r0, [pc, #48]	; (800a28c <prvInitialiseTaskLists+0x6c>)
 800a25a:	f7fe fce1 	bl	8008c20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a25e:	480c      	ldr	r0, [pc, #48]	; (800a290 <prvInitialiseTaskLists+0x70>)
 800a260:	f7fe fcde 	bl	8008c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a264:	480b      	ldr	r0, [pc, #44]	; (800a294 <prvInitialiseTaskLists+0x74>)
 800a266:	f7fe fcdb 	bl	8008c20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a26a:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <prvInitialiseTaskLists+0x78>)
 800a26c:	4a05      	ldr	r2, [pc, #20]	; (800a284 <prvInitialiseTaskLists+0x64>)
 800a26e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a270:	4b0a      	ldr	r3, [pc, #40]	; (800a29c <prvInitialiseTaskLists+0x7c>)
 800a272:	4a05      	ldr	r2, [pc, #20]	; (800a288 <prvInitialiseTaskLists+0x68>)
 800a274:	601a      	str	r2, [r3, #0]
}
 800a276:	bf00      	nop
 800a278:	3708      	adds	r7, #8
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd80      	pop	{r7, pc}
 800a27e:	bf00      	nop
 800a280:	20001d18 	.word	0x20001d18
 800a284:	20002178 	.word	0x20002178
 800a288:	2000218c 	.word	0x2000218c
 800a28c:	200021a8 	.word	0x200021a8
 800a290:	200021bc 	.word	0x200021bc
 800a294:	200021d4 	.word	0x200021d4
 800a298:	200021a0 	.word	0x200021a0
 800a29c:	200021a4 	.word	0x200021a4

0800a2a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b082      	sub	sp, #8
 800a2a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2a6:	e019      	b.n	800a2dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a2a8:	f000 fdd4 	bl	800ae54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2ac:	4b10      	ldr	r3, [pc, #64]	; (800a2f0 <prvCheckTasksWaitingTermination+0x50>)
 800a2ae:	68db      	ldr	r3, [r3, #12]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	3304      	adds	r3, #4
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f7fe fd3b 	bl	8008d34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a2be:	4b0d      	ldr	r3, [pc, #52]	; (800a2f4 <prvCheckTasksWaitingTermination+0x54>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	3b01      	subs	r3, #1
 800a2c4:	4a0b      	ldr	r2, [pc, #44]	; (800a2f4 <prvCheckTasksWaitingTermination+0x54>)
 800a2c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a2c8:	4b0b      	ldr	r3, [pc, #44]	; (800a2f8 <prvCheckTasksWaitingTermination+0x58>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	3b01      	subs	r3, #1
 800a2ce:	4a0a      	ldr	r2, [pc, #40]	; (800a2f8 <prvCheckTasksWaitingTermination+0x58>)
 800a2d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a2d2:	f000 fdef 	bl	800aeb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 f810 	bl	800a2fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2dc:	4b06      	ldr	r3, [pc, #24]	; (800a2f8 <prvCheckTasksWaitingTermination+0x58>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1e1      	bne.n	800a2a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a2e4:	bf00      	nop
 800a2e6:	bf00      	nop
 800a2e8:	3708      	adds	r7, #8
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	200021bc 	.word	0x200021bc
 800a2f4:	200021e8 	.word	0x200021e8
 800a2f8:	200021d0 	.word	0x200021d0

0800a2fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a2fc:	b580      	push	{r7, lr}
 800a2fe:	b084      	sub	sp, #16
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d108      	bne.n	800a320 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a312:	4618      	mov	r0, r3
 800a314:	f000 ff8c 	bl	800b230 <vPortFree>
				vPortFree( pxTCB );
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 ff89 	bl	800b230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a31e:	e018      	b.n	800a352 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a326:	2b01      	cmp	r3, #1
 800a328:	d103      	bne.n	800a332 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 ff80 	bl	800b230 <vPortFree>
	}
 800a330:	e00f      	b.n	800a352 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a338:	2b02      	cmp	r3, #2
 800a33a:	d00a      	beq.n	800a352 <prvDeleteTCB+0x56>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	60fb      	str	r3, [r7, #12]
}
 800a34e:	bf00      	nop
 800a350:	e7fe      	b.n	800a350 <prvDeleteTCB+0x54>
	}
 800a352:	bf00      	nop
 800a354:	3710      	adds	r7, #16
 800a356:	46bd      	mov	sp, r7
 800a358:	bd80      	pop	{r7, pc}
	...

0800a35c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a35c:	b480      	push	{r7}
 800a35e:	b083      	sub	sp, #12
 800a360:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a362:	4b0c      	ldr	r3, [pc, #48]	; (800a394 <prvResetNextTaskUnblockTime+0x38>)
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d104      	bne.n	800a376 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a36c:	4b0a      	ldr	r3, [pc, #40]	; (800a398 <prvResetNextTaskUnblockTime+0x3c>)
 800a36e:	f04f 32ff 	mov.w	r2, #4294967295
 800a372:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a374:	e008      	b.n	800a388 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a376:	4b07      	ldr	r3, [pc, #28]	; (800a394 <prvResetNextTaskUnblockTime+0x38>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	4a04      	ldr	r2, [pc, #16]	; (800a398 <prvResetNextTaskUnblockTime+0x3c>)
 800a386:	6013      	str	r3, [r2, #0]
}
 800a388:	bf00      	nop
 800a38a:	370c      	adds	r7, #12
 800a38c:	46bd      	mov	sp, r7
 800a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a392:	4770      	bx	lr
 800a394:	200021a0 	.word	0x200021a0
 800a398:	20002208 	.word	0x20002208

0800a39c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a39c:	b480      	push	{r7}
 800a39e:	b083      	sub	sp, #12
 800a3a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a3a2:	4b0b      	ldr	r3, [pc, #44]	; (800a3d0 <xTaskGetSchedulerState+0x34>)
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d102      	bne.n	800a3b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a3aa:	2301      	movs	r3, #1
 800a3ac:	607b      	str	r3, [r7, #4]
 800a3ae:	e008      	b.n	800a3c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a3b0:	4b08      	ldr	r3, [pc, #32]	; (800a3d4 <xTaskGetSchedulerState+0x38>)
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d102      	bne.n	800a3be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	607b      	str	r3, [r7, #4]
 800a3bc:	e001      	b.n	800a3c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a3c2:	687b      	ldr	r3, [r7, #4]
	}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr
 800a3d0:	200021f4 	.word	0x200021f4
 800a3d4:	20002210 	.word	0x20002210

0800a3d8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a3d8:	b580      	push	{r7, lr}
 800a3da:	b086      	sub	sp, #24
 800a3dc:	af00      	add	r7, sp, #0
 800a3de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a3e4:	2300      	movs	r3, #0
 800a3e6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d056      	beq.n	800a49c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a3ee:	4b2e      	ldr	r3, [pc, #184]	; (800a4a8 <xTaskPriorityDisinherit+0xd0>)
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	693a      	ldr	r2, [r7, #16]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d00a      	beq.n	800a40e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a3f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3fc:	f383 8811 	msr	BASEPRI, r3
 800a400:	f3bf 8f6f 	isb	sy
 800a404:	f3bf 8f4f 	dsb	sy
 800a408:	60fb      	str	r3, [r7, #12]
}
 800a40a:	bf00      	nop
 800a40c:	e7fe      	b.n	800a40c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a412:	2b00      	cmp	r3, #0
 800a414:	d10a      	bne.n	800a42c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a41a:	f383 8811 	msr	BASEPRI, r3
 800a41e:	f3bf 8f6f 	isb	sy
 800a422:	f3bf 8f4f 	dsb	sy
 800a426:	60bb      	str	r3, [r7, #8]
}
 800a428:	bf00      	nop
 800a42a:	e7fe      	b.n	800a42a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a42c:	693b      	ldr	r3, [r7, #16]
 800a42e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	693b      	ldr	r3, [r7, #16]
 800a434:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a436:	693b      	ldr	r3, [r7, #16]
 800a438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a43a:	693b      	ldr	r3, [r7, #16]
 800a43c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a43e:	429a      	cmp	r2, r3
 800a440:	d02c      	beq.n	800a49c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a442:	693b      	ldr	r3, [r7, #16]
 800a444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a446:	2b00      	cmp	r3, #0
 800a448:	d128      	bne.n	800a49c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a44a:	693b      	ldr	r3, [r7, #16]
 800a44c:	3304      	adds	r3, #4
 800a44e:	4618      	mov	r0, r3
 800a450:	f7fe fc70 	bl	8008d34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a454:	693b      	ldr	r3, [r7, #16]
 800a456:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a458:	693b      	ldr	r3, [r7, #16]
 800a45a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a460:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46c:	4b0f      	ldr	r3, [pc, #60]	; (800a4ac <xTaskPriorityDisinherit+0xd4>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	429a      	cmp	r2, r3
 800a472:	d903      	bls.n	800a47c <xTaskPriorityDisinherit+0xa4>
 800a474:	693b      	ldr	r3, [r7, #16]
 800a476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a478:	4a0c      	ldr	r2, [pc, #48]	; (800a4ac <xTaskPriorityDisinherit+0xd4>)
 800a47a:	6013      	str	r3, [r2, #0]
 800a47c:	693b      	ldr	r3, [r7, #16]
 800a47e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a480:	4613      	mov	r3, r2
 800a482:	009b      	lsls	r3, r3, #2
 800a484:	4413      	add	r3, r2
 800a486:	009b      	lsls	r3, r3, #2
 800a488:	4a09      	ldr	r2, [pc, #36]	; (800a4b0 <xTaskPriorityDisinherit+0xd8>)
 800a48a:	441a      	add	r2, r3
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	3304      	adds	r3, #4
 800a490:	4619      	mov	r1, r3
 800a492:	4610      	mov	r0, r2
 800a494:	f7fe fbf1 	bl	8008c7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a498:	2301      	movs	r3, #1
 800a49a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a49c:	697b      	ldr	r3, [r7, #20]
	}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3718      	adds	r7, #24
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}
 800a4a6:	bf00      	nop
 800a4a8:	20001d14 	.word	0x20001d14
 800a4ac:	200021f0 	.word	0x200021f0
 800a4b0:	20001d18 	.word	0x20001d18

0800a4b4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4b4:	b580      	push	{r7, lr}
 800a4b6:	b084      	sub	sp, #16
 800a4b8:	af00      	add	r7, sp, #0
 800a4ba:	6078      	str	r0, [r7, #4]
 800a4bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4be:	4b21      	ldr	r3, [pc, #132]	; (800a544 <prvAddCurrentTaskToDelayedList+0x90>)
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4c4:	4b20      	ldr	r3, [pc, #128]	; (800a548 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	3304      	adds	r3, #4
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	f7fe fc32 	bl	8008d34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d6:	d10a      	bne.n	800a4ee <prvAddCurrentTaskToDelayedList+0x3a>
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d007      	beq.n	800a4ee <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4de:	4b1a      	ldr	r3, [pc, #104]	; (800a548 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	4619      	mov	r1, r3
 800a4e6:	4819      	ldr	r0, [pc, #100]	; (800a54c <prvAddCurrentTaskToDelayedList+0x98>)
 800a4e8:	f7fe fbc7 	bl	8008c7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a4ec:	e026      	b.n	800a53c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a4ee:	68fa      	ldr	r2, [r7, #12]
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	4413      	add	r3, r2
 800a4f4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a4f6:	4b14      	ldr	r3, [pc, #80]	; (800a548 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	68ba      	ldr	r2, [r7, #8]
 800a4fc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	429a      	cmp	r2, r3
 800a504:	d209      	bcs.n	800a51a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a506:	4b12      	ldr	r3, [pc, #72]	; (800a550 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	4b0f      	ldr	r3, [pc, #60]	; (800a548 <prvAddCurrentTaskToDelayedList+0x94>)
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	3304      	adds	r3, #4
 800a510:	4619      	mov	r1, r3
 800a512:	4610      	mov	r0, r2
 800a514:	f7fe fbd5 	bl	8008cc2 <vListInsert>
}
 800a518:	e010      	b.n	800a53c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a51a:	4b0e      	ldr	r3, [pc, #56]	; (800a554 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	4b0a      	ldr	r3, [pc, #40]	; (800a548 <prvAddCurrentTaskToDelayedList+0x94>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	3304      	adds	r3, #4
 800a524:	4619      	mov	r1, r3
 800a526:	4610      	mov	r0, r2
 800a528:	f7fe fbcb 	bl	8008cc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a52c:	4b0a      	ldr	r3, [pc, #40]	; (800a558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	429a      	cmp	r2, r3
 800a534:	d202      	bcs.n	800a53c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a536:	4a08      	ldr	r2, [pc, #32]	; (800a558 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	6013      	str	r3, [r2, #0]
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}
 800a544:	200021ec 	.word	0x200021ec
 800a548:	20001d14 	.word	0x20001d14
 800a54c:	200021d4 	.word	0x200021d4
 800a550:	200021a4 	.word	0x200021a4
 800a554:	200021a0 	.word	0x200021a0
 800a558:	20002208 	.word	0x20002208

0800a55c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b08a      	sub	sp, #40	; 0x28
 800a560:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a562:	2300      	movs	r3, #0
 800a564:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a566:	f000 fb07 	bl	800ab78 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a56a:	4b1c      	ldr	r3, [pc, #112]	; (800a5dc <xTimerCreateTimerTask+0x80>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d021      	beq.n	800a5b6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a572:	2300      	movs	r3, #0
 800a574:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a576:	2300      	movs	r3, #0
 800a578:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a57a:	1d3a      	adds	r2, r7, #4
 800a57c:	f107 0108 	add.w	r1, r7, #8
 800a580:	f107 030c 	add.w	r3, r7, #12
 800a584:	4618      	mov	r0, r3
 800a586:	f7fe fb31 	bl	8008bec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a58a:	6879      	ldr	r1, [r7, #4]
 800a58c:	68bb      	ldr	r3, [r7, #8]
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	9202      	str	r2, [sp, #8]
 800a592:	9301      	str	r3, [sp, #4]
 800a594:	2302      	movs	r3, #2
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	2300      	movs	r3, #0
 800a59a:	460a      	mov	r2, r1
 800a59c:	4910      	ldr	r1, [pc, #64]	; (800a5e0 <xTimerCreateTimerTask+0x84>)
 800a59e:	4811      	ldr	r0, [pc, #68]	; (800a5e4 <xTimerCreateTimerTask+0x88>)
 800a5a0:	f7ff f8de 	bl	8009760 <xTaskCreateStatic>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	4a10      	ldr	r2, [pc, #64]	; (800a5e8 <xTimerCreateTimerTask+0x8c>)
 800a5a8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <xTimerCreateTimerTask+0x8c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d001      	beq.n	800a5b6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	613b      	str	r3, [r7, #16]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a5d2:	697b      	ldr	r3, [r7, #20]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3718      	adds	r7, #24
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}
 800a5dc:	20002244 	.word	0x20002244
 800a5e0:	080105b8 	.word	0x080105b8
 800a5e4:	0800a721 	.word	0x0800a721
 800a5e8:	20002248 	.word	0x20002248

0800a5ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b08a      	sub	sp, #40	; 0x28
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	60f8      	str	r0, [r7, #12]
 800a5f4:	60b9      	str	r1, [r7, #8]
 800a5f6:	607a      	str	r2, [r7, #4]
 800a5f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d10a      	bne.n	800a61a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a608:	f383 8811 	msr	BASEPRI, r3
 800a60c:	f3bf 8f6f 	isb	sy
 800a610:	f3bf 8f4f 	dsb	sy
 800a614:	623b      	str	r3, [r7, #32]
}
 800a616:	bf00      	nop
 800a618:	e7fe      	b.n	800a618 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a61a:	4b1a      	ldr	r3, [pc, #104]	; (800a684 <xTimerGenericCommand+0x98>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d02a      	beq.n	800a678 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	2b05      	cmp	r3, #5
 800a632:	dc18      	bgt.n	800a666 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a634:	f7ff feb2 	bl	800a39c <xTaskGetSchedulerState>
 800a638:	4603      	mov	r3, r0
 800a63a:	2b02      	cmp	r3, #2
 800a63c:	d109      	bne.n	800a652 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a63e:	4b11      	ldr	r3, [pc, #68]	; (800a684 <xTimerGenericCommand+0x98>)
 800a640:	6818      	ldr	r0, [r3, #0]
 800a642:	f107 0110 	add.w	r1, r7, #16
 800a646:	2300      	movs	r3, #0
 800a648:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a64a:	f7fe fca1 	bl	8008f90 <xQueueGenericSend>
 800a64e:	6278      	str	r0, [r7, #36]	; 0x24
 800a650:	e012      	b.n	800a678 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a652:	4b0c      	ldr	r3, [pc, #48]	; (800a684 <xTimerGenericCommand+0x98>)
 800a654:	6818      	ldr	r0, [r3, #0]
 800a656:	f107 0110 	add.w	r1, r7, #16
 800a65a:	2300      	movs	r3, #0
 800a65c:	2200      	movs	r2, #0
 800a65e:	f7fe fc97 	bl	8008f90 <xQueueGenericSend>
 800a662:	6278      	str	r0, [r7, #36]	; 0x24
 800a664:	e008      	b.n	800a678 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a666:	4b07      	ldr	r3, [pc, #28]	; (800a684 <xTimerGenericCommand+0x98>)
 800a668:	6818      	ldr	r0, [r3, #0]
 800a66a:	f107 0110 	add.w	r1, r7, #16
 800a66e:	2300      	movs	r3, #0
 800a670:	683a      	ldr	r2, [r7, #0]
 800a672:	f7fe fd8b 	bl	800918c <xQueueGenericSendFromISR>
 800a676:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3728      	adds	r7, #40	; 0x28
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	20002244 	.word	0x20002244

0800a688 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b088      	sub	sp, #32
 800a68c:	af02      	add	r7, sp, #8
 800a68e:	6078      	str	r0, [r7, #4]
 800a690:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a692:	4b22      	ldr	r3, [pc, #136]	; (800a71c <prvProcessExpiredTimer+0x94>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	68db      	ldr	r3, [r3, #12]
 800a698:	68db      	ldr	r3, [r3, #12]
 800a69a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	3304      	adds	r3, #4
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7fe fb47 	bl	8008d34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a6ac:	f003 0304 	and.w	r3, r3, #4
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d022      	beq.n	800a6fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	699a      	ldr	r2, [r3, #24]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	18d1      	adds	r1, r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	683a      	ldr	r2, [r7, #0]
 800a6c0:	6978      	ldr	r0, [r7, #20]
 800a6c2:	f000 f8d1 	bl	800a868 <prvInsertTimerInActiveList>
 800a6c6:	4603      	mov	r3, r0
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d01f      	beq.n	800a70c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	9300      	str	r3, [sp, #0]
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	2100      	movs	r1, #0
 800a6d6:	6978      	ldr	r0, [r7, #20]
 800a6d8:	f7ff ff88 	bl	800a5ec <xTimerGenericCommand>
 800a6dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d113      	bne.n	800a70c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6e8:	f383 8811 	msr	BASEPRI, r3
 800a6ec:	f3bf 8f6f 	isb	sy
 800a6f0:	f3bf 8f4f 	dsb	sy
 800a6f4:	60fb      	str	r3, [r7, #12]
}
 800a6f6:	bf00      	nop
 800a6f8:	e7fe      	b.n	800a6f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a700:	f023 0301 	bic.w	r3, r3, #1
 800a704:	b2da      	uxtb	r2, r3
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	6a1b      	ldr	r3, [r3, #32]
 800a710:	6978      	ldr	r0, [r7, #20]
 800a712:	4798      	blx	r3
}
 800a714:	bf00      	nop
 800a716:	3718      	adds	r7, #24
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	2000223c 	.word	0x2000223c

0800a720 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a728:	f107 0308 	add.w	r3, r7, #8
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 f857 	bl	800a7e0 <prvGetNextExpireTime>
 800a732:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	4619      	mov	r1, r3
 800a738:	68f8      	ldr	r0, [r7, #12]
 800a73a:	f000 f803 	bl	800a744 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a73e:	f000 f8d5 	bl	800a8ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a742:	e7f1      	b.n	800a728 <prvTimerTask+0x8>

0800a744 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b084      	sub	sp, #16
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a74e:	f7ff fa43 	bl	8009bd8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a752:	f107 0308 	add.w	r3, r7, #8
 800a756:	4618      	mov	r0, r3
 800a758:	f000 f866 	bl	800a828 <prvSampleTimeNow>
 800a75c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d130      	bne.n	800a7c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10a      	bne.n	800a780 <prvProcessTimerOrBlockTask+0x3c>
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	429a      	cmp	r2, r3
 800a770:	d806      	bhi.n	800a780 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a772:	f7ff fa3f 	bl	8009bf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a776:	68f9      	ldr	r1, [r7, #12]
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff ff85 	bl	800a688 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a77e:	e024      	b.n	800a7ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	2b00      	cmp	r3, #0
 800a784:	d008      	beq.n	800a798 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a786:	4b13      	ldr	r3, [pc, #76]	; (800a7d4 <prvProcessTimerOrBlockTask+0x90>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d101      	bne.n	800a794 <prvProcessTimerOrBlockTask+0x50>
 800a790:	2301      	movs	r3, #1
 800a792:	e000      	b.n	800a796 <prvProcessTimerOrBlockTask+0x52>
 800a794:	2300      	movs	r3, #0
 800a796:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a798:	4b0f      	ldr	r3, [pc, #60]	; (800a7d8 <prvProcessTimerOrBlockTask+0x94>)
 800a79a:	6818      	ldr	r0, [r3, #0]
 800a79c:	687a      	ldr	r2, [r7, #4]
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	1ad3      	subs	r3, r2, r3
 800a7a2:	683a      	ldr	r2, [r7, #0]
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	f7fe ffa7 	bl	80096f8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a7aa:	f7ff fa23 	bl	8009bf4 <xTaskResumeAll>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d10a      	bne.n	800a7ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a7b4:	4b09      	ldr	r3, [pc, #36]	; (800a7dc <prvProcessTimerOrBlockTask+0x98>)
 800a7b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7ba:	601a      	str	r2, [r3, #0]
 800a7bc:	f3bf 8f4f 	dsb	sy
 800a7c0:	f3bf 8f6f 	isb	sy
}
 800a7c4:	e001      	b.n	800a7ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a7c6:	f7ff fa15 	bl	8009bf4 <xTaskResumeAll>
}
 800a7ca:	bf00      	nop
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	bf00      	nop
 800a7d4:	20002240 	.word	0x20002240
 800a7d8:	20002244 	.word	0x20002244
 800a7dc:	e000ed04 	.word	0xe000ed04

0800a7e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b085      	sub	sp, #20
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a7e8:	4b0e      	ldr	r3, [pc, #56]	; (800a824 <prvGetNextExpireTime+0x44>)
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d101      	bne.n	800a7f6 <prvGetNextExpireTime+0x16>
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	e000      	b.n	800a7f8 <prvGetNextExpireTime+0x18>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d105      	bne.n	800a810 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a804:	4b07      	ldr	r3, [pc, #28]	; (800a824 <prvGetNextExpireTime+0x44>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	68db      	ldr	r3, [r3, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	60fb      	str	r3, [r7, #12]
 800a80e:	e001      	b.n	800a814 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a810:	2300      	movs	r3, #0
 800a812:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a814:	68fb      	ldr	r3, [r7, #12]
}
 800a816:	4618      	mov	r0, r3
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a820:	4770      	bx	lr
 800a822:	bf00      	nop
 800a824:	2000223c 	.word	0x2000223c

0800a828 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a830:	f7ff fa7e 	bl	8009d30 <xTaskGetTickCount>
 800a834:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <prvSampleTimeNow+0x3c>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	68fa      	ldr	r2, [r7, #12]
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d205      	bcs.n	800a84c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a840:	f000 f936 	bl	800aab0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	e002      	b.n	800a852 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2200      	movs	r2, #0
 800a850:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a852:	4a04      	ldr	r2, [pc, #16]	; (800a864 <prvSampleTimeNow+0x3c>)
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a858:	68fb      	ldr	r3, [r7, #12]
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3710      	adds	r7, #16
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	2000224c 	.word	0x2000224c

0800a868 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b086      	sub	sp, #24
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	60f8      	str	r0, [r7, #12]
 800a870:	60b9      	str	r1, [r7, #8]
 800a872:	607a      	str	r2, [r7, #4]
 800a874:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a876:	2300      	movs	r3, #0
 800a878:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a886:	68ba      	ldr	r2, [r7, #8]
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d812      	bhi.n	800a8b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a88e:	687a      	ldr	r2, [r7, #4]
 800a890:	683b      	ldr	r3, [r7, #0]
 800a892:	1ad2      	subs	r2, r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	699b      	ldr	r3, [r3, #24]
 800a898:	429a      	cmp	r2, r3
 800a89a:	d302      	bcc.n	800a8a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a89c:	2301      	movs	r3, #1
 800a89e:	617b      	str	r3, [r7, #20]
 800a8a0:	e01b      	b.n	800a8da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a8a2:	4b10      	ldr	r3, [pc, #64]	; (800a8e4 <prvInsertTimerInActiveList+0x7c>)
 800a8a4:	681a      	ldr	r2, [r3, #0]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3304      	adds	r3, #4
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	4610      	mov	r0, r2
 800a8ae:	f7fe fa08 	bl	8008cc2 <vListInsert>
 800a8b2:	e012      	b.n	800a8da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a8b4:	687a      	ldr	r2, [r7, #4]
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	429a      	cmp	r2, r3
 800a8ba:	d206      	bcs.n	800a8ca <prvInsertTimerInActiveList+0x62>
 800a8bc:	68ba      	ldr	r2, [r7, #8]
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	429a      	cmp	r2, r3
 800a8c2:	d302      	bcc.n	800a8ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a8c4:	2301      	movs	r3, #1
 800a8c6:	617b      	str	r3, [r7, #20]
 800a8c8:	e007      	b.n	800a8da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a8ca:	4b07      	ldr	r3, [pc, #28]	; (800a8e8 <prvInsertTimerInActiveList+0x80>)
 800a8cc:	681a      	ldr	r2, [r3, #0]
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3304      	adds	r3, #4
 800a8d2:	4619      	mov	r1, r3
 800a8d4:	4610      	mov	r0, r2
 800a8d6:	f7fe f9f4 	bl	8008cc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a8da:	697b      	ldr	r3, [r7, #20]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}
 800a8e4:	20002240 	.word	0x20002240
 800a8e8:	2000223c 	.word	0x2000223c

0800a8ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	; 0x38
 800a8f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a8f2:	e0ca      	b.n	800aa8a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	da18      	bge.n	800a92c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a8fa:	1d3b      	adds	r3, r7, #4
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	2b00      	cmp	r3, #0
 800a904:	d10a      	bne.n	800a91c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90a:	f383 8811 	msr	BASEPRI, r3
 800a90e:	f3bf 8f6f 	isb	sy
 800a912:	f3bf 8f4f 	dsb	sy
 800a916:	61fb      	str	r3, [r7, #28]
}
 800a918:	bf00      	nop
 800a91a:	e7fe      	b.n	800a91a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a922:	6850      	ldr	r0, [r2, #4]
 800a924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a926:	6892      	ldr	r2, [r2, #8]
 800a928:	4611      	mov	r1, r2
 800a92a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	f2c0 80aa 	blt.w	800aa88 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a93a:	695b      	ldr	r3, [r3, #20]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d004      	beq.n	800a94a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a942:	3304      	adds	r3, #4
 800a944:	4618      	mov	r0, r3
 800a946:	f7fe f9f5 	bl	8008d34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a94a:	463b      	mov	r3, r7
 800a94c:	4618      	mov	r0, r3
 800a94e:	f7ff ff6b 	bl	800a828 <prvSampleTimeNow>
 800a952:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b09      	cmp	r3, #9
 800a958:	f200 8097 	bhi.w	800aa8a <prvProcessReceivedCommands+0x19e>
 800a95c:	a201      	add	r2, pc, #4	; (adr r2, 800a964 <prvProcessReceivedCommands+0x78>)
 800a95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a962:	bf00      	nop
 800a964:	0800a98d 	.word	0x0800a98d
 800a968:	0800a98d 	.word	0x0800a98d
 800a96c:	0800a98d 	.word	0x0800a98d
 800a970:	0800aa01 	.word	0x0800aa01
 800a974:	0800aa15 	.word	0x0800aa15
 800a978:	0800aa5f 	.word	0x0800aa5f
 800a97c:	0800a98d 	.word	0x0800a98d
 800a980:	0800a98d 	.word	0x0800a98d
 800a984:	0800aa01 	.word	0x0800aa01
 800a988:	0800aa15 	.word	0x0800aa15
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a992:	f043 0301 	orr.w	r3, r3, #1
 800a996:	b2da      	uxtb	r2, r3
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a99e:	68ba      	ldr	r2, [r7, #8]
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	699b      	ldr	r3, [r3, #24]
 800a9a4:	18d1      	adds	r1, r2, r3
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9ac:	f7ff ff5c 	bl	800a868 <prvInsertTimerInActiveList>
 800a9b0:	4603      	mov	r3, r0
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d069      	beq.n	800aa8a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a9b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a9be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9c4:	f003 0304 	and.w	r3, r3, #4
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d05e      	beq.n	800aa8a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a9cc:	68ba      	ldr	r2, [r7, #8]
 800a9ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d0:	699b      	ldr	r3, [r3, #24]
 800a9d2:	441a      	add	r2, r3
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	2300      	movs	r3, #0
 800a9da:	2100      	movs	r1, #0
 800a9dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9de:	f7ff fe05 	bl	800a5ec <xTimerGenericCommand>
 800a9e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a9e4:	6a3b      	ldr	r3, [r7, #32]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d14f      	bne.n	800aa8a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9ee:	f383 8811 	msr	BASEPRI, r3
 800a9f2:	f3bf 8f6f 	isb	sy
 800a9f6:	f3bf 8f4f 	dsb	sy
 800a9fa:	61bb      	str	r3, [r7, #24]
}
 800a9fc:	bf00      	nop
 800a9fe:	e7fe      	b.n	800a9fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa06:	f023 0301 	bic.w	r3, r3, #1
 800aa0a:	b2da      	uxtb	r2, r3
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa12:	e03a      	b.n	800aa8a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa1a:	f043 0301 	orr.w	r3, r3, #1
 800aa1e:	b2da      	uxtb	r2, r3
 800aa20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa26:	68ba      	ldr	r2, [r7, #8]
 800aa28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	699b      	ldr	r3, [r3, #24]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d10a      	bne.n	800aa4a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	617b      	str	r3, [r7, #20]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4c:	699a      	ldr	r2, [r3, #24]
 800aa4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa50:	18d1      	adds	r1, r2, r3
 800aa52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa58:	f7ff ff06 	bl	800a868 <prvInsertTimerInActiveList>
					break;
 800aa5c:	e015      	b.n	800aa8a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa64:	f003 0302 	and.w	r3, r3, #2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d103      	bne.n	800aa74 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aa6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa6e:	f000 fbdf 	bl	800b230 <vPortFree>
 800aa72:	e00a      	b.n	800aa8a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa7a:	f023 0301 	bic.w	r3, r3, #1
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa86:	e000      	b.n	800aa8a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa88:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa8a:	4b08      	ldr	r3, [pc, #32]	; (800aaac <prvProcessReceivedCommands+0x1c0>)
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	1d39      	adds	r1, r7, #4
 800aa90:	2200      	movs	r2, #0
 800aa92:	4618      	mov	r0, r3
 800aa94:	f7fe fc16 	bl	80092c4 <xQueueReceive>
 800aa98:	4603      	mov	r3, r0
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	f47f af2a 	bne.w	800a8f4 <prvProcessReceivedCommands+0x8>
	}
}
 800aaa0:	bf00      	nop
 800aaa2:	bf00      	nop
 800aaa4:	3730      	adds	r7, #48	; 0x30
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20002244 	.word	0x20002244

0800aab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b088      	sub	sp, #32
 800aab4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aab6:	e048      	b.n	800ab4a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aab8:	4b2d      	ldr	r3, [pc, #180]	; (800ab70 <prvSwitchTimerLists+0xc0>)
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aac2:	4b2b      	ldr	r3, [pc, #172]	; (800ab70 <prvSwitchTimerLists+0xc0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	68db      	ldr	r3, [r3, #12]
 800aaca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	3304      	adds	r3, #4
 800aad0:	4618      	mov	r0, r3
 800aad2:	f7fe f92f 	bl	8008d34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	6a1b      	ldr	r3, [r3, #32]
 800aada:	68f8      	ldr	r0, [r7, #12]
 800aadc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aae4:	f003 0304 	and.w	r3, r3, #4
 800aae8:	2b00      	cmp	r3, #0
 800aaea:	d02e      	beq.n	800ab4a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	693a      	ldr	r2, [r7, #16]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d90e      	bls.n	800ab1c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	68ba      	ldr	r2, [r7, #8]
 800ab02:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab0a:	4b19      	ldr	r3, [pc, #100]	; (800ab70 <prvSwitchTimerLists+0xc0>)
 800ab0c:	681a      	ldr	r2, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	3304      	adds	r3, #4
 800ab12:	4619      	mov	r1, r3
 800ab14:	4610      	mov	r0, r2
 800ab16:	f7fe f8d4 	bl	8008cc2 <vListInsert>
 800ab1a:	e016      	b.n	800ab4a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	9300      	str	r3, [sp, #0]
 800ab20:	2300      	movs	r3, #0
 800ab22:	693a      	ldr	r2, [r7, #16]
 800ab24:	2100      	movs	r1, #0
 800ab26:	68f8      	ldr	r0, [r7, #12]
 800ab28:	f7ff fd60 	bl	800a5ec <xTimerGenericCommand>
 800ab2c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	603b      	str	r3, [r7, #0]
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab4a:	4b09      	ldr	r3, [pc, #36]	; (800ab70 <prvSwitchTimerLists+0xc0>)
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d1b1      	bne.n	800aab8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ab54:	4b06      	ldr	r3, [pc, #24]	; (800ab70 <prvSwitchTimerLists+0xc0>)
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ab5a:	4b06      	ldr	r3, [pc, #24]	; (800ab74 <prvSwitchTimerLists+0xc4>)
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a04      	ldr	r2, [pc, #16]	; (800ab70 <prvSwitchTimerLists+0xc0>)
 800ab60:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ab62:	4a04      	ldr	r2, [pc, #16]	; (800ab74 <prvSwitchTimerLists+0xc4>)
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	6013      	str	r3, [r2, #0]
}
 800ab68:	bf00      	nop
 800ab6a:	3718      	adds	r7, #24
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	2000223c 	.word	0x2000223c
 800ab74:	20002240 	.word	0x20002240

0800ab78 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab78:	b580      	push	{r7, lr}
 800ab7a:	b082      	sub	sp, #8
 800ab7c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab7e:	f000 f969 	bl	800ae54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab82:	4b15      	ldr	r3, [pc, #84]	; (800abd8 <prvCheckForValidListAndQueue+0x60>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d120      	bne.n	800abcc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab8a:	4814      	ldr	r0, [pc, #80]	; (800abdc <prvCheckForValidListAndQueue+0x64>)
 800ab8c:	f7fe f848 	bl	8008c20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab90:	4813      	ldr	r0, [pc, #76]	; (800abe0 <prvCheckForValidListAndQueue+0x68>)
 800ab92:	f7fe f845 	bl	8008c20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab96:	4b13      	ldr	r3, [pc, #76]	; (800abe4 <prvCheckForValidListAndQueue+0x6c>)
 800ab98:	4a10      	ldr	r2, [pc, #64]	; (800abdc <prvCheckForValidListAndQueue+0x64>)
 800ab9a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab9c:	4b12      	ldr	r3, [pc, #72]	; (800abe8 <prvCheckForValidListAndQueue+0x70>)
 800ab9e:	4a10      	ldr	r2, [pc, #64]	; (800abe0 <prvCheckForValidListAndQueue+0x68>)
 800aba0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800aba2:	2300      	movs	r3, #0
 800aba4:	9300      	str	r3, [sp, #0]
 800aba6:	4b11      	ldr	r3, [pc, #68]	; (800abec <prvCheckForValidListAndQueue+0x74>)
 800aba8:	4a11      	ldr	r2, [pc, #68]	; (800abf0 <prvCheckForValidListAndQueue+0x78>)
 800abaa:	2110      	movs	r1, #16
 800abac:	200a      	movs	r0, #10
 800abae:	f7fe f953 	bl	8008e58 <xQueueGenericCreateStatic>
 800abb2:	4603      	mov	r3, r0
 800abb4:	4a08      	ldr	r2, [pc, #32]	; (800abd8 <prvCheckForValidListAndQueue+0x60>)
 800abb6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800abb8:	4b07      	ldr	r3, [pc, #28]	; (800abd8 <prvCheckForValidListAndQueue+0x60>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d005      	beq.n	800abcc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800abc0:	4b05      	ldr	r3, [pc, #20]	; (800abd8 <prvCheckForValidListAndQueue+0x60>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	490b      	ldr	r1, [pc, #44]	; (800abf4 <prvCheckForValidListAndQueue+0x7c>)
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7fe fd6c 	bl	80096a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abcc:	f000 f972 	bl	800aeb4 <vPortExitCritical>
}
 800abd0:	bf00      	nop
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	20002244 	.word	0x20002244
 800abdc:	20002214 	.word	0x20002214
 800abe0:	20002228 	.word	0x20002228
 800abe4:	2000223c 	.word	0x2000223c
 800abe8:	20002240 	.word	0x20002240
 800abec:	200022f0 	.word	0x200022f0
 800abf0:	20002250 	.word	0x20002250
 800abf4:	080105c0 	.word	0x080105c0

0800abf8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800abf8:	b480      	push	{r7}
 800abfa:	b085      	sub	sp, #20
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	60f8      	str	r0, [r7, #12]
 800ac00:	60b9      	str	r1, [r7, #8]
 800ac02:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	3b04      	subs	r3, #4
 800ac08:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3b04      	subs	r3, #4
 800ac16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac18:	68bb      	ldr	r3, [r7, #8]
 800ac1a:	f023 0201 	bic.w	r2, r3, #1
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	3b04      	subs	r3, #4
 800ac26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac28:	4a0c      	ldr	r2, [pc, #48]	; (800ac5c <pxPortInitialiseStack+0x64>)
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	3b14      	subs	r3, #20
 800ac32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac34:	687a      	ldr	r2, [r7, #4]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	3b04      	subs	r3, #4
 800ac3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f06f 0202 	mvn.w	r2, #2
 800ac46:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	3b20      	subs	r3, #32
 800ac4c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	3714      	adds	r7, #20
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr
 800ac5c:	0800ac61 	.word	0x0800ac61

0800ac60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ac60:	b480      	push	{r7}
 800ac62:	b085      	sub	sp, #20
 800ac64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ac6a:	4b12      	ldr	r3, [pc, #72]	; (800acb4 <prvTaskExitError+0x54>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac72:	d00a      	beq.n	800ac8a <prvTaskExitError+0x2a>
	__asm volatile
 800ac74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac78:	f383 8811 	msr	BASEPRI, r3
 800ac7c:	f3bf 8f6f 	isb	sy
 800ac80:	f3bf 8f4f 	dsb	sy
 800ac84:	60fb      	str	r3, [r7, #12]
}
 800ac86:	bf00      	nop
 800ac88:	e7fe      	b.n	800ac88 <prvTaskExitError+0x28>
	__asm volatile
 800ac8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac8e:	f383 8811 	msr	BASEPRI, r3
 800ac92:	f3bf 8f6f 	isb	sy
 800ac96:	f3bf 8f4f 	dsb	sy
 800ac9a:	60bb      	str	r3, [r7, #8]
}
 800ac9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac9e:	bf00      	nop
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0fc      	beq.n	800aca0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800aca6:	bf00      	nop
 800aca8:	bf00      	nop
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb2:	4770      	bx	lr
 800acb4:	2000000c 	.word	0x2000000c
	...

0800acc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800acc0:	4b07      	ldr	r3, [pc, #28]	; (800ace0 <pxCurrentTCBConst2>)
 800acc2:	6819      	ldr	r1, [r3, #0]
 800acc4:	6808      	ldr	r0, [r1, #0]
 800acc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acca:	f380 8809 	msr	PSP, r0
 800acce:	f3bf 8f6f 	isb	sy
 800acd2:	f04f 0000 	mov.w	r0, #0
 800acd6:	f380 8811 	msr	BASEPRI, r0
 800acda:	4770      	bx	lr
 800acdc:	f3af 8000 	nop.w

0800ace0 <pxCurrentTCBConst2>:
 800ace0:	20001d14 	.word	0x20001d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ace4:	bf00      	nop
 800ace6:	bf00      	nop

0800ace8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ace8:	4808      	ldr	r0, [pc, #32]	; (800ad0c <prvPortStartFirstTask+0x24>)
 800acea:	6800      	ldr	r0, [r0, #0]
 800acec:	6800      	ldr	r0, [r0, #0]
 800acee:	f380 8808 	msr	MSP, r0
 800acf2:	f04f 0000 	mov.w	r0, #0
 800acf6:	f380 8814 	msr	CONTROL, r0
 800acfa:	b662      	cpsie	i
 800acfc:	b661      	cpsie	f
 800acfe:	f3bf 8f4f 	dsb	sy
 800ad02:	f3bf 8f6f 	isb	sy
 800ad06:	df00      	svc	0
 800ad08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad0a:	bf00      	nop
 800ad0c:	e000ed08 	.word	0xe000ed08

0800ad10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad10:	b580      	push	{r7, lr}
 800ad12:	b086      	sub	sp, #24
 800ad14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad16:	4b46      	ldr	r3, [pc, #280]	; (800ae30 <xPortStartScheduler+0x120>)
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a46      	ldr	r2, [pc, #280]	; (800ae34 <xPortStartScheduler+0x124>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d10a      	bne.n	800ad36 <xPortStartScheduler+0x26>
	__asm volatile
 800ad20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad24:	f383 8811 	msr	BASEPRI, r3
 800ad28:	f3bf 8f6f 	isb	sy
 800ad2c:	f3bf 8f4f 	dsb	sy
 800ad30:	613b      	str	r3, [r7, #16]
}
 800ad32:	bf00      	nop
 800ad34:	e7fe      	b.n	800ad34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad36:	4b3e      	ldr	r3, [pc, #248]	; (800ae30 <xPortStartScheduler+0x120>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4a3f      	ldr	r2, [pc, #252]	; (800ae38 <xPortStartScheduler+0x128>)
 800ad3c:	4293      	cmp	r3, r2
 800ad3e:	d10a      	bne.n	800ad56 <xPortStartScheduler+0x46>
	__asm volatile
 800ad40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad44:	f383 8811 	msr	BASEPRI, r3
 800ad48:	f3bf 8f6f 	isb	sy
 800ad4c:	f3bf 8f4f 	dsb	sy
 800ad50:	60fb      	str	r3, [r7, #12]
}
 800ad52:	bf00      	nop
 800ad54:	e7fe      	b.n	800ad54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ad56:	4b39      	ldr	r3, [pc, #228]	; (800ae3c <xPortStartScheduler+0x12c>)
 800ad58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	781b      	ldrb	r3, [r3, #0]
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	22ff      	movs	r2, #255	; 0xff
 800ad66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ad68:	697b      	ldr	r3, [r7, #20]
 800ad6a:	781b      	ldrb	r3, [r3, #0]
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ad70:	78fb      	ldrb	r3, [r7, #3]
 800ad72:	b2db      	uxtb	r3, r3
 800ad74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	4b31      	ldr	r3, [pc, #196]	; (800ae40 <xPortStartScheduler+0x130>)
 800ad7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ad7e:	4b31      	ldr	r3, [pc, #196]	; (800ae44 <xPortStartScheduler+0x134>)
 800ad80:	2207      	movs	r2, #7
 800ad82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad84:	e009      	b.n	800ad9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad86:	4b2f      	ldr	r3, [pc, #188]	; (800ae44 <xPortStartScheduler+0x134>)
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	3b01      	subs	r3, #1
 800ad8c:	4a2d      	ldr	r2, [pc, #180]	; (800ae44 <xPortStartScheduler+0x134>)
 800ad8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad90:	78fb      	ldrb	r3, [r7, #3]
 800ad92:	b2db      	uxtb	r3, r3
 800ad94:	005b      	lsls	r3, r3, #1
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad9a:	78fb      	ldrb	r3, [r7, #3]
 800ad9c:	b2db      	uxtb	r3, r3
 800ad9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada2:	2b80      	cmp	r3, #128	; 0x80
 800ada4:	d0ef      	beq.n	800ad86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ada6:	4b27      	ldr	r3, [pc, #156]	; (800ae44 <xPortStartScheduler+0x134>)
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	f1c3 0307 	rsb	r3, r3, #7
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d00a      	beq.n	800adc8 <xPortStartScheduler+0xb8>
	__asm volatile
 800adb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adb6:	f383 8811 	msr	BASEPRI, r3
 800adba:	f3bf 8f6f 	isb	sy
 800adbe:	f3bf 8f4f 	dsb	sy
 800adc2:	60bb      	str	r3, [r7, #8]
}
 800adc4:	bf00      	nop
 800adc6:	e7fe      	b.n	800adc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800adc8:	4b1e      	ldr	r3, [pc, #120]	; (800ae44 <xPortStartScheduler+0x134>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	021b      	lsls	r3, r3, #8
 800adce:	4a1d      	ldr	r2, [pc, #116]	; (800ae44 <xPortStartScheduler+0x134>)
 800add0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800add2:	4b1c      	ldr	r3, [pc, #112]	; (800ae44 <xPortStartScheduler+0x134>)
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800adda:	4a1a      	ldr	r2, [pc, #104]	; (800ae44 <xPortStartScheduler+0x134>)
 800addc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	b2da      	uxtb	r2, r3
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ade6:	4b18      	ldr	r3, [pc, #96]	; (800ae48 <xPortStartScheduler+0x138>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a17      	ldr	r2, [pc, #92]	; (800ae48 <xPortStartScheduler+0x138>)
 800adec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800adf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800adf2:	4b15      	ldr	r3, [pc, #84]	; (800ae48 <xPortStartScheduler+0x138>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	4a14      	ldr	r2, [pc, #80]	; (800ae48 <xPortStartScheduler+0x138>)
 800adf8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800adfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800adfe:	f000 f8dd 	bl	800afbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae02:	4b12      	ldr	r3, [pc, #72]	; (800ae4c <xPortStartScheduler+0x13c>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae08:	f000 f8fc 	bl	800b004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae0c:	4b10      	ldr	r3, [pc, #64]	; (800ae50 <xPortStartScheduler+0x140>)
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a0f      	ldr	r2, [pc, #60]	; (800ae50 <xPortStartScheduler+0x140>)
 800ae12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae18:	f7ff ff66 	bl	800ace8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae1c:	f7ff f852 	bl	8009ec4 <vTaskSwitchContext>
	prvTaskExitError();
 800ae20:	f7ff ff1e 	bl	800ac60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3718      	adds	r7, #24
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	e000ed00 	.word	0xe000ed00
 800ae34:	410fc271 	.word	0x410fc271
 800ae38:	410fc270 	.word	0x410fc270
 800ae3c:	e000e400 	.word	0xe000e400
 800ae40:	20002340 	.word	0x20002340
 800ae44:	20002344 	.word	0x20002344
 800ae48:	e000ed20 	.word	0xe000ed20
 800ae4c:	2000000c 	.word	0x2000000c
 800ae50:	e000ef34 	.word	0xe000ef34

0800ae54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ae54:	b480      	push	{r7}
 800ae56:	b083      	sub	sp, #12
 800ae58:	af00      	add	r7, sp, #0
	__asm volatile
 800ae5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae5e:	f383 8811 	msr	BASEPRI, r3
 800ae62:	f3bf 8f6f 	isb	sy
 800ae66:	f3bf 8f4f 	dsb	sy
 800ae6a:	607b      	str	r3, [r7, #4]
}
 800ae6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ae6e:	4b0f      	ldr	r3, [pc, #60]	; (800aeac <vPortEnterCritical+0x58>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	3301      	adds	r3, #1
 800ae74:	4a0d      	ldr	r2, [pc, #52]	; (800aeac <vPortEnterCritical+0x58>)
 800ae76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ae78:	4b0c      	ldr	r3, [pc, #48]	; (800aeac <vPortEnterCritical+0x58>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b01      	cmp	r3, #1
 800ae7e:	d10f      	bne.n	800aea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae80:	4b0b      	ldr	r3, [pc, #44]	; (800aeb0 <vPortEnterCritical+0x5c>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d00a      	beq.n	800aea0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae8e:	f383 8811 	msr	BASEPRI, r3
 800ae92:	f3bf 8f6f 	isb	sy
 800ae96:	f3bf 8f4f 	dsb	sy
 800ae9a:	603b      	str	r3, [r7, #0]
}
 800ae9c:	bf00      	nop
 800ae9e:	e7fe      	b.n	800ae9e <vPortEnterCritical+0x4a>
	}
}
 800aea0:	bf00      	nop
 800aea2:	370c      	adds	r7, #12
 800aea4:	46bd      	mov	sp, r7
 800aea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeaa:	4770      	bx	lr
 800aeac:	2000000c 	.word	0x2000000c
 800aeb0:	e000ed04 	.word	0xe000ed04

0800aeb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800aeba:	4b12      	ldr	r3, [pc, #72]	; (800af04 <vPortExitCritical+0x50>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10a      	bne.n	800aed8 <vPortExitCritical+0x24>
	__asm volatile
 800aec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aec6:	f383 8811 	msr	BASEPRI, r3
 800aeca:	f3bf 8f6f 	isb	sy
 800aece:	f3bf 8f4f 	dsb	sy
 800aed2:	607b      	str	r3, [r7, #4]
}
 800aed4:	bf00      	nop
 800aed6:	e7fe      	b.n	800aed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800aed8:	4b0a      	ldr	r3, [pc, #40]	; (800af04 <vPortExitCritical+0x50>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	3b01      	subs	r3, #1
 800aede:	4a09      	ldr	r2, [pc, #36]	; (800af04 <vPortExitCritical+0x50>)
 800aee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800aee2:	4b08      	ldr	r3, [pc, #32]	; (800af04 <vPortExitCritical+0x50>)
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d105      	bne.n	800aef6 <vPortExitCritical+0x42>
 800aeea:	2300      	movs	r3, #0
 800aeec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aeee:	683b      	ldr	r3, [r7, #0]
 800aef0:	f383 8811 	msr	BASEPRI, r3
}
 800aef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aef6:	bf00      	nop
 800aef8:	370c      	adds	r7, #12
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	2000000c 	.word	0x2000000c
	...

0800af10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af10:	f3ef 8009 	mrs	r0, PSP
 800af14:	f3bf 8f6f 	isb	sy
 800af18:	4b15      	ldr	r3, [pc, #84]	; (800af70 <pxCurrentTCBConst>)
 800af1a:	681a      	ldr	r2, [r3, #0]
 800af1c:	f01e 0f10 	tst.w	lr, #16
 800af20:	bf08      	it	eq
 800af22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2a:	6010      	str	r0, [r2, #0]
 800af2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af30:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af34:	f380 8811 	msr	BASEPRI, r0
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	f3bf 8f6f 	isb	sy
 800af40:	f7fe ffc0 	bl	8009ec4 <vTaskSwitchContext>
 800af44:	f04f 0000 	mov.w	r0, #0
 800af48:	f380 8811 	msr	BASEPRI, r0
 800af4c:	bc09      	pop	{r0, r3}
 800af4e:	6819      	ldr	r1, [r3, #0]
 800af50:	6808      	ldr	r0, [r1, #0]
 800af52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af56:	f01e 0f10 	tst.w	lr, #16
 800af5a:	bf08      	it	eq
 800af5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800af60:	f380 8809 	msr	PSP, r0
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	4770      	bx	lr
 800af6a:	bf00      	nop
 800af6c:	f3af 8000 	nop.w

0800af70 <pxCurrentTCBConst>:
 800af70:	20001d14 	.word	0x20001d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800af74:	bf00      	nop
 800af76:	bf00      	nop

0800af78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b082      	sub	sp, #8
 800af7c:	af00      	add	r7, sp, #0
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	607b      	str	r3, [r7, #4]
}
 800af90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af92:	f7fe fedd 	bl	8009d50 <xTaskIncrementTick>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d003      	beq.n	800afa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af9c:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <xPortSysTickHandler+0x40>)
 800af9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afa2:	601a      	str	r2, [r3, #0]
 800afa4:	2300      	movs	r3, #0
 800afa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	f383 8811 	msr	BASEPRI, r3
}
 800afae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800afb0:	bf00      	nop
 800afb2:	3708      	adds	r7, #8
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}
 800afb8:	e000ed04 	.word	0xe000ed04

0800afbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800afbc:	b480      	push	{r7}
 800afbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800afc0:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <vPortSetupTimerInterrupt+0x34>)
 800afc2:	2200      	movs	r2, #0
 800afc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800afc6:	4b0b      	ldr	r3, [pc, #44]	; (800aff4 <vPortSetupTimerInterrupt+0x38>)
 800afc8:	2200      	movs	r2, #0
 800afca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800afcc:	4b0a      	ldr	r3, [pc, #40]	; (800aff8 <vPortSetupTimerInterrupt+0x3c>)
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	4a0a      	ldr	r2, [pc, #40]	; (800affc <vPortSetupTimerInterrupt+0x40>)
 800afd2:	fba2 2303 	umull	r2, r3, r2, r3
 800afd6:	099b      	lsrs	r3, r3, #6
 800afd8:	4a09      	ldr	r2, [pc, #36]	; (800b000 <vPortSetupTimerInterrupt+0x44>)
 800afda:	3b01      	subs	r3, #1
 800afdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800afde:	4b04      	ldr	r3, [pc, #16]	; (800aff0 <vPortSetupTimerInterrupt+0x34>)
 800afe0:	2207      	movs	r2, #7
 800afe2:	601a      	str	r2, [r3, #0]
}
 800afe4:	bf00      	nop
 800afe6:	46bd      	mov	sp, r7
 800afe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afec:	4770      	bx	lr
 800afee:	bf00      	nop
 800aff0:	e000e010 	.word	0xe000e010
 800aff4:	e000e018 	.word	0xe000e018
 800aff8:	20000000 	.word	0x20000000
 800affc:	10624dd3 	.word	0x10624dd3
 800b000:	e000e014 	.word	0xe000e014

0800b004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b014 <vPortEnableVFP+0x10>
 800b008:	6801      	ldr	r1, [r0, #0]
 800b00a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b00e:	6001      	str	r1, [r0, #0]
 800b010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b012:	bf00      	nop
 800b014:	e000ed88 	.word	0xe000ed88

0800b018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b018:	b480      	push	{r7}
 800b01a:	b085      	sub	sp, #20
 800b01c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b01e:	f3ef 8305 	mrs	r3, IPSR
 800b022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2b0f      	cmp	r3, #15
 800b028:	d914      	bls.n	800b054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b02a:	4a17      	ldr	r2, [pc, #92]	; (800b088 <vPortValidateInterruptPriority+0x70>)
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	4413      	add	r3, r2
 800b030:	781b      	ldrb	r3, [r3, #0]
 800b032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b034:	4b15      	ldr	r3, [pc, #84]	; (800b08c <vPortValidateInterruptPriority+0x74>)
 800b036:	781b      	ldrb	r3, [r3, #0]
 800b038:	7afa      	ldrb	r2, [r7, #11]
 800b03a:	429a      	cmp	r2, r3
 800b03c:	d20a      	bcs.n	800b054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b03e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b042:	f383 8811 	msr	BASEPRI, r3
 800b046:	f3bf 8f6f 	isb	sy
 800b04a:	f3bf 8f4f 	dsb	sy
 800b04e:	607b      	str	r3, [r7, #4]
}
 800b050:	bf00      	nop
 800b052:	e7fe      	b.n	800b052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b054:	4b0e      	ldr	r3, [pc, #56]	; (800b090 <vPortValidateInterruptPriority+0x78>)
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b05c:	4b0d      	ldr	r3, [pc, #52]	; (800b094 <vPortValidateInterruptPriority+0x7c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	429a      	cmp	r2, r3
 800b062:	d90a      	bls.n	800b07a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b064:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b068:	f383 8811 	msr	BASEPRI, r3
 800b06c:	f3bf 8f6f 	isb	sy
 800b070:	f3bf 8f4f 	dsb	sy
 800b074:	603b      	str	r3, [r7, #0]
}
 800b076:	bf00      	nop
 800b078:	e7fe      	b.n	800b078 <vPortValidateInterruptPriority+0x60>
	}
 800b07a:	bf00      	nop
 800b07c:	3714      	adds	r7, #20
 800b07e:	46bd      	mov	sp, r7
 800b080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b084:	4770      	bx	lr
 800b086:	bf00      	nop
 800b088:	e000e3f0 	.word	0xe000e3f0
 800b08c:	20002340 	.word	0x20002340
 800b090:	e000ed0c 	.word	0xe000ed0c
 800b094:	20002344 	.word	0x20002344

0800b098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b08a      	sub	sp, #40	; 0x28
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b0a4:	f7fe fd98 	bl	8009bd8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b0a8:	4b5b      	ldr	r3, [pc, #364]	; (800b218 <pvPortMalloc+0x180>)
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d101      	bne.n	800b0b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b0b0:	f000 f920 	bl	800b2f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b0b4:	4b59      	ldr	r3, [pc, #356]	; (800b21c <pvPortMalloc+0x184>)
 800b0b6:	681a      	ldr	r2, [r3, #0]
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	4013      	ands	r3, r2
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f040 8093 	bne.w	800b1e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d01d      	beq.n	800b104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b0c8:	2208      	movs	r2, #8
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f003 0307 	and.w	r3, r3, #7
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d014      	beq.n	800b104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f023 0307 	bic.w	r3, r3, #7
 800b0e0:	3308      	adds	r3, #8
 800b0e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f003 0307 	and.w	r3, r3, #7
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d00a      	beq.n	800b104 <pvPortMalloc+0x6c>
	__asm volatile
 800b0ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f2:	f383 8811 	msr	BASEPRI, r3
 800b0f6:	f3bf 8f6f 	isb	sy
 800b0fa:	f3bf 8f4f 	dsb	sy
 800b0fe:	617b      	str	r3, [r7, #20]
}
 800b100:	bf00      	nop
 800b102:	e7fe      	b.n	800b102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d06e      	beq.n	800b1e8 <pvPortMalloc+0x150>
 800b10a:	4b45      	ldr	r3, [pc, #276]	; (800b220 <pvPortMalloc+0x188>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	429a      	cmp	r2, r3
 800b112:	d869      	bhi.n	800b1e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b114:	4b43      	ldr	r3, [pc, #268]	; (800b224 <pvPortMalloc+0x18c>)
 800b116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b118:	4b42      	ldr	r3, [pc, #264]	; (800b224 <pvPortMalloc+0x18c>)
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b11e:	e004      	b.n	800b12a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b12a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12c:	685b      	ldr	r3, [r3, #4]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	429a      	cmp	r2, r3
 800b132:	d903      	bls.n	800b13c <pvPortMalloc+0xa4>
 800b134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1f1      	bne.n	800b120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b13c:	4b36      	ldr	r3, [pc, #216]	; (800b218 <pvPortMalloc+0x180>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b142:	429a      	cmp	r2, r3
 800b144:	d050      	beq.n	800b1e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b146:	6a3b      	ldr	r3, [r7, #32]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	2208      	movs	r2, #8
 800b14c:	4413      	add	r3, r2
 800b14e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	685a      	ldr	r2, [r3, #4]
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	1ad2      	subs	r2, r2, r3
 800b160:	2308      	movs	r3, #8
 800b162:	005b      	lsls	r3, r3, #1
 800b164:	429a      	cmp	r2, r3
 800b166:	d91f      	bls.n	800b1a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b170:	69bb      	ldr	r3, [r7, #24]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00a      	beq.n	800b190 <pvPortMalloc+0xf8>
	__asm volatile
 800b17a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17e:	f383 8811 	msr	BASEPRI, r3
 800b182:	f3bf 8f6f 	isb	sy
 800b186:	f3bf 8f4f 	dsb	sy
 800b18a:	613b      	str	r3, [r7, #16]
}
 800b18c:	bf00      	nop
 800b18e:	e7fe      	b.n	800b18e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	685a      	ldr	r2, [r3, #4]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	1ad2      	subs	r2, r2, r3
 800b198:	69bb      	ldr	r3, [r7, #24]
 800b19a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b19c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b19e:	687a      	ldr	r2, [r7, #4]
 800b1a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b1a2:	69b8      	ldr	r0, [r7, #24]
 800b1a4:	f000 f908 	bl	800b3b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b1a8:	4b1d      	ldr	r3, [pc, #116]	; (800b220 <pvPortMalloc+0x188>)
 800b1aa:	681a      	ldr	r2, [r3, #0]
 800b1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ae:	685b      	ldr	r3, [r3, #4]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	4a1b      	ldr	r2, [pc, #108]	; (800b220 <pvPortMalloc+0x188>)
 800b1b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b1b6:	4b1a      	ldr	r3, [pc, #104]	; (800b220 <pvPortMalloc+0x188>)
 800b1b8:	681a      	ldr	r2, [r3, #0]
 800b1ba:	4b1b      	ldr	r3, [pc, #108]	; (800b228 <pvPortMalloc+0x190>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	429a      	cmp	r2, r3
 800b1c0:	d203      	bcs.n	800b1ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b1c2:	4b17      	ldr	r3, [pc, #92]	; (800b220 <pvPortMalloc+0x188>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	4a18      	ldr	r2, [pc, #96]	; (800b228 <pvPortMalloc+0x190>)
 800b1c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	685a      	ldr	r2, [r3, #4]
 800b1ce:	4b13      	ldr	r3, [pc, #76]	; (800b21c <pvPortMalloc+0x184>)
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	431a      	orrs	r2, r3
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	2200      	movs	r2, #0
 800b1dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b1de:	4b13      	ldr	r3, [pc, #76]	; (800b22c <pvPortMalloc+0x194>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	3301      	adds	r3, #1
 800b1e4:	4a11      	ldr	r2, [pc, #68]	; (800b22c <pvPortMalloc+0x194>)
 800b1e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b1e8:	f7fe fd04 	bl	8009bf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1ec:	69fb      	ldr	r3, [r7, #28]
 800b1ee:	f003 0307 	and.w	r3, r3, #7
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d00a      	beq.n	800b20c <pvPortMalloc+0x174>
	__asm volatile
 800b1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1fa:	f383 8811 	msr	BASEPRI, r3
 800b1fe:	f3bf 8f6f 	isb	sy
 800b202:	f3bf 8f4f 	dsb	sy
 800b206:	60fb      	str	r3, [r7, #12]
}
 800b208:	bf00      	nop
 800b20a:	e7fe      	b.n	800b20a <pvPortMalloc+0x172>
	return pvReturn;
 800b20c:	69fb      	ldr	r3, [r7, #28]
}
 800b20e:	4618      	mov	r0, r3
 800b210:	3728      	adds	r7, #40	; 0x28
 800b212:	46bd      	mov	sp, r7
 800b214:	bd80      	pop	{r7, pc}
 800b216:	bf00      	nop
 800b218:	20005f50 	.word	0x20005f50
 800b21c:	20005f64 	.word	0x20005f64
 800b220:	20005f54 	.word	0x20005f54
 800b224:	20005f48 	.word	0x20005f48
 800b228:	20005f58 	.word	0x20005f58
 800b22c:	20005f5c 	.word	0x20005f5c

0800b230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b086      	sub	sp, #24
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d04d      	beq.n	800b2de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b242:	2308      	movs	r3, #8
 800b244:	425b      	negs	r3, r3
 800b246:	697a      	ldr	r2, [r7, #20]
 800b248:	4413      	add	r3, r2
 800b24a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b250:	693b      	ldr	r3, [r7, #16]
 800b252:	685a      	ldr	r2, [r3, #4]
 800b254:	4b24      	ldr	r3, [pc, #144]	; (800b2e8 <vPortFree+0xb8>)
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	4013      	ands	r3, r2
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <vPortFree+0x44>
	__asm volatile
 800b25e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b262:	f383 8811 	msr	BASEPRI, r3
 800b266:	f3bf 8f6f 	isb	sy
 800b26a:	f3bf 8f4f 	dsb	sy
 800b26e:	60fb      	str	r3, [r7, #12]
}
 800b270:	bf00      	nop
 800b272:	e7fe      	b.n	800b272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b274:	693b      	ldr	r3, [r7, #16]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00a      	beq.n	800b292 <vPortFree+0x62>
	__asm volatile
 800b27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b280:	f383 8811 	msr	BASEPRI, r3
 800b284:	f3bf 8f6f 	isb	sy
 800b288:	f3bf 8f4f 	dsb	sy
 800b28c:	60bb      	str	r3, [r7, #8]
}
 800b28e:	bf00      	nop
 800b290:	e7fe      	b.n	800b290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	685a      	ldr	r2, [r3, #4]
 800b296:	4b14      	ldr	r3, [pc, #80]	; (800b2e8 <vPortFree+0xb8>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4013      	ands	r3, r2
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01e      	beq.n	800b2de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d11a      	bne.n	800b2de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	4b0e      	ldr	r3, [pc, #56]	; (800b2e8 <vPortFree+0xb8>)
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	43db      	mvns	r3, r3
 800b2b2:	401a      	ands	r2, r3
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b2b8:	f7fe fc8e 	bl	8009bd8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <vPortFree+0xbc>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	4413      	add	r3, r2
 800b2c6:	4a09      	ldr	r2, [pc, #36]	; (800b2ec <vPortFree+0xbc>)
 800b2c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b2ca:	6938      	ldr	r0, [r7, #16]
 800b2cc:	f000 f874 	bl	800b3b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b2d0:	4b07      	ldr	r3, [pc, #28]	; (800b2f0 <vPortFree+0xc0>)
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	3301      	adds	r3, #1
 800b2d6:	4a06      	ldr	r2, [pc, #24]	; (800b2f0 <vPortFree+0xc0>)
 800b2d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b2da:	f7fe fc8b 	bl	8009bf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b2de:	bf00      	nop
 800b2e0:	3718      	adds	r7, #24
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20005f64 	.word	0x20005f64
 800b2ec:	20005f54 	.word	0x20005f54
 800b2f0:	20005f60 	.word	0x20005f60

0800b2f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	b085      	sub	sp, #20
 800b2f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b2fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b2fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b300:	4b27      	ldr	r3, [pc, #156]	; (800b3a0 <prvHeapInit+0xac>)
 800b302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d00c      	beq.n	800b328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	3307      	adds	r3, #7
 800b312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f023 0307 	bic.w	r3, r3, #7
 800b31a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	1ad3      	subs	r3, r2, r3
 800b322:	4a1f      	ldr	r2, [pc, #124]	; (800b3a0 <prvHeapInit+0xac>)
 800b324:	4413      	add	r3, r2
 800b326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b32c:	4a1d      	ldr	r2, [pc, #116]	; (800b3a4 <prvHeapInit+0xb0>)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b332:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <prvHeapInit+0xb0>)
 800b334:	2200      	movs	r2, #0
 800b336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	4413      	add	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b340:	2208      	movs	r2, #8
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	1a9b      	subs	r3, r3, r2
 800b346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f023 0307 	bic.w	r3, r3, #7
 800b34e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	4a15      	ldr	r2, [pc, #84]	; (800b3a8 <prvHeapInit+0xb4>)
 800b354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b356:	4b14      	ldr	r3, [pc, #80]	; (800b3a8 <prvHeapInit+0xb4>)
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2200      	movs	r2, #0
 800b35c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b35e:	4b12      	ldr	r3, [pc, #72]	; (800b3a8 <prvHeapInit+0xb4>)
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	2200      	movs	r2, #0
 800b364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b36a:	683b      	ldr	r3, [r7, #0]
 800b36c:	68fa      	ldr	r2, [r7, #12]
 800b36e:	1ad2      	subs	r2, r2, r3
 800b370:	683b      	ldr	r3, [r7, #0]
 800b372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b374:	4b0c      	ldr	r3, [pc, #48]	; (800b3a8 <prvHeapInit+0xb4>)
 800b376:	681a      	ldr	r2, [r3, #0]
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b37c:	683b      	ldr	r3, [r7, #0]
 800b37e:	685b      	ldr	r3, [r3, #4]
 800b380:	4a0a      	ldr	r2, [pc, #40]	; (800b3ac <prvHeapInit+0xb8>)
 800b382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	4a09      	ldr	r2, [pc, #36]	; (800b3b0 <prvHeapInit+0xbc>)
 800b38a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b38c:	4b09      	ldr	r3, [pc, #36]	; (800b3b4 <prvHeapInit+0xc0>)
 800b38e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b392:	601a      	str	r2, [r3, #0]
}
 800b394:	bf00      	nop
 800b396:	3714      	adds	r7, #20
 800b398:	46bd      	mov	sp, r7
 800b39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39e:	4770      	bx	lr
 800b3a0:	20002348 	.word	0x20002348
 800b3a4:	20005f48 	.word	0x20005f48
 800b3a8:	20005f50 	.word	0x20005f50
 800b3ac:	20005f58 	.word	0x20005f58
 800b3b0:	20005f54 	.word	0x20005f54
 800b3b4:	20005f64 	.word	0x20005f64

0800b3b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b085      	sub	sp, #20
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b3c0:	4b28      	ldr	r3, [pc, #160]	; (800b464 <prvInsertBlockIntoFreeList+0xac>)
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	e002      	b.n	800b3cc <prvInsertBlockIntoFreeList+0x14>
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	60fb      	str	r3, [r7, #12]
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	429a      	cmp	r2, r3
 800b3d4:	d8f7      	bhi.n	800b3c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	68ba      	ldr	r2, [r7, #8]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	687a      	ldr	r2, [r7, #4]
 800b3e4:	429a      	cmp	r2, r3
 800b3e6:	d108      	bne.n	800b3fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	441a      	add	r2, r3
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	685b      	ldr	r3, [r3, #4]
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	441a      	add	r2, r3
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	429a      	cmp	r2, r3
 800b40c:	d118      	bne.n	800b440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	4b15      	ldr	r3, [pc, #84]	; (800b468 <prvInsertBlockIntoFreeList+0xb0>)
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	429a      	cmp	r2, r3
 800b418:	d00d      	beq.n	800b436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685a      	ldr	r2, [r3, #4]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	441a      	add	r2, r3
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	601a      	str	r2, [r3, #0]
 800b434:	e008      	b.n	800b448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b436:	4b0c      	ldr	r3, [pc, #48]	; (800b468 <prvInsertBlockIntoFreeList+0xb0>)
 800b438:	681a      	ldr	r2, [r3, #0]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	601a      	str	r2, [r3, #0]
 800b43e:	e003      	b.n	800b448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681a      	ldr	r2, [r3, #0]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	429a      	cmp	r2, r3
 800b44e:	d002      	beq.n	800b456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	687a      	ldr	r2, [r7, #4]
 800b454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b456:	bf00      	nop
 800b458:	3714      	adds	r7, #20
 800b45a:	46bd      	mov	sp, r7
 800b45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b460:	4770      	bx	lr
 800b462:	bf00      	nop
 800b464:	20005f48 	.word	0x20005f48
 800b468:	20005f50 	.word	0x20005f50

0800b46c <PIDController_Init>:
#include "pid.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 800b46c:	b480      	push	{r7}
 800b46e:	b083      	sub	sp, #12
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]

	/* Clear controller variables */
	pid->integrator = 0;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	2200      	movs	r2, #0
 800b478:	615a      	str	r2, [r3, #20]
	pid->prevError  = 0.0f;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	f04f 0200 	mov.w	r2, #0
 800b480:	619a      	str	r2, [r3, #24]
	pid->prevMeasurement = 0.0f;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f04f 0200 	mov.w	r2, #0
 800b488:	61da      	str	r2, [r3, #28]
	pid->out = 0;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2200      	movs	r2, #0
 800b48e:	621a      	str	r2, [r3, #32]

}
 800b490:	bf00      	nop
 800b492:	370c      	adds	r7, #12
 800b494:	46bd      	mov	sp, r7
 800b496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49a:	4770      	bx	lr

0800b49c <PIDController_Update>:

int PIDController_Update(PIDController *pid, float setpoint, float measurement, int currentpwm) {
 800b49c:	b480      	push	{r7}
 800b49e:	b089      	sub	sp, #36	; 0x24
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	60f8      	str	r0, [r7, #12]
 800b4a4:	ed87 0a02 	vstr	s0, [r7, #8]
 800b4a8:	edc7 0a01 	vstr	s1, [r7, #4]
 800b4ac:	6039      	str	r1, [r7, #0]

	/*
	* Error signal
	*/
    float error = setpoint - measurement;
 800b4ae:	ed97 7a02 	vldr	s14, [r7, #8]
 800b4b2:	edd7 7a01 	vldr	s15, [r7, #4]
 800b4b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b4ba:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 800b4be:	ed97 7a07 	vldr	s14, [r7, #28]
 800b4c2:	edd7 7a07 	vldr	s15, [r7, #28]
 800b4c6:	eeb4 7a67 	vcmp.f32	s14, s15
 800b4ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4ce:	d702      	bvc.n	800b4d6 <PIDController_Update+0x3a>
 800b4d0:	f04f 0300 	mov.w	r3, #0
 800b4d4:	61fb      	str	r3, [r7, #28]
	// Proportional
    //int proportional = pid->Kp * error * currentpwm;

    // velocity implementation (instead of distance)
    int proportional;
    if (error >= 0) // positive error, need to increase pwm
 800b4d6:	edd7 7a07 	vldr	s15, [r7, #28]
 800b4da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b4de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b4e2:	db1b      	blt.n	800b51c <PIDController_Update+0x80>
    {
    	 proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	ed93 7a00 	vldr	s14, [r3]
 800b4ea:	ed97 6a07 	vldr	s12, [r7, #28]
 800b4ee:	edd7 6a02 	vldr	s13, [r7, #8]
 800b4f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b4f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b4fe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	ee07 3a90 	vmov	s15, r3
 800b508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b50c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b510:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b514:	ee17 3a90 	vmov	r3, s15
 800b518:	61bb      	str	r3, [r7, #24]
 800b51a:	e01a      	b.n	800b552 <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	ed93 7a00 	vldr	s14, [r3]
 800b522:	ed97 6a07 	vldr	s12, [r7, #28]
 800b526:	edd7 6a01 	vldr	s13, [r7, #4]
 800b52a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800b52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b532:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b536:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b53a:	683b      	ldr	r3, [r7, #0]
 800b53c:	ee07 3a90 	vmov	s15, r3
 800b540:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b548:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b54c:	ee17 3a90 	vmov	r3, s15
 800b550:	61bb      	str	r3, [r7, #24]
    }

	// Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	695b      	ldr	r3, [r3, #20]
 800b556:	ee07 3a90 	vmov	s15, r3
 800b55a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	edd3 7a01 	vldr	s15, [r3, #4]
 800b564:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b568:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	edd3 7a04 	vldr	s15, [r3, #16]
 800b572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	ed93 6a06 	vldr	s12, [r3, #24]
 800b57c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b580:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b584:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	ee07 3a90 	vmov	s15, r3
 800b58e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b592:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800b596:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b59a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b59e:	ee17 2a90 	vmov	r2, s15
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	615a      	str	r2, [r3, #20]

	// Anti-wind-up via dynamic integrator clamping
	int limMinInt, limMaxInt;

	// Compute integrator limits
	if (pid->limMax > proportional) {
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	68db      	ldr	r3, [r3, #12]
 800b5aa:	69ba      	ldr	r2, [r7, #24]
 800b5ac:	429a      	cmp	r2, r3
 800b5ae:	da05      	bge.n	800b5bc <PIDController_Update+0x120>

		limMaxInt = pid->limMax - proportional;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	68da      	ldr	r2, [r3, #12]
 800b5b4:	69bb      	ldr	r3, [r7, #24]
 800b5b6:	1ad3      	subs	r3, r2, r3
 800b5b8:	613b      	str	r3, [r7, #16]
 800b5ba:	e001      	b.n	800b5c0 <PIDController_Update+0x124>

	} else {

		limMaxInt = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	613b      	str	r3, [r7, #16]

	}

	if (pid->limMin < proportional) {
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	689b      	ldr	r3, [r3, #8]
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	dd05      	ble.n	800b5d6 <PIDController_Update+0x13a>

		limMinInt = pid->limMin - proportional;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	69bb      	ldr	r3, [r7, #24]
 800b5d0:	1ad3      	subs	r3, r2, r3
 800b5d2:	617b      	str	r3, [r7, #20]
 800b5d4:	e001      	b.n	800b5da <PIDController_Update+0x13e>

	} else {

		limMinInt = 0;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	617b      	str	r3, [r7, #20]

	}

	// Clamp integrator
    if (pid->integrator > limMaxInt) {
 800b5da:	68fb      	ldr	r3, [r7, #12]
 800b5dc:	695b      	ldr	r3, [r3, #20]
 800b5de:	693a      	ldr	r2, [r7, #16]
 800b5e0:	429a      	cmp	r2, r3
 800b5e2:	da03      	bge.n	800b5ec <PIDController_Update+0x150>

        pid->integrator = limMaxInt;
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	693a      	ldr	r2, [r7, #16]
 800b5e8:	615a      	str	r2, [r3, #20]
 800b5ea:	e007      	b.n	800b5fc <PIDController_Update+0x160>

    } else if (pid->integrator < limMinInt) {
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	695b      	ldr	r3, [r3, #20]
 800b5f0:	697a      	ldr	r2, [r7, #20]
 800b5f2:	429a      	cmp	r2, r3
 800b5f4:	dd02      	ble.n	800b5fc <PIDController_Update+0x160>

        pid->integrator = limMinInt;
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	697a      	ldr	r2, [r7, #20]
 800b5fa:	615a      	str	r2, [r3, #20]

	/*
	* Compute output and apply limits
	*/

    pid->out = proportional + pid->integrator;
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	695a      	ldr	r2, [r3, #20]
 800b600:	69bb      	ldr	r3, [r7, #24]
 800b602:	441a      	add	r2, r3
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	621a      	str	r2, [r3, #32]

    if (pid->out > pid->limMax) {
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	6a1a      	ldr	r2, [r3, #32]
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	68db      	ldr	r3, [r3, #12]
 800b610:	429a      	cmp	r2, r3
 800b612:	dd04      	ble.n	800b61e <PIDController_Update+0x182>

        pid->out = pid->limMax;
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	68da      	ldr	r2, [r3, #12]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	621a      	str	r2, [r3, #32]
 800b61c:	e009      	b.n	800b632 <PIDController_Update+0x196>

    } else if (pid->out < pid->limMin) {
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	6a1a      	ldr	r2, [r3, #32]
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	429a      	cmp	r2, r3
 800b628:	da03      	bge.n	800b632 <PIDController_Update+0x196>

        pid->out = pid->limMin;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	689a      	ldr	r2, [r3, #8]
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	621a      	str	r2, [r3, #32]

    }

	/* Store error and measurement for later use */
    pid->prevError       = error;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	69fa      	ldr	r2, [r7, #28]
 800b636:	619a      	str	r2, [r3, #24]
    pid->prevMeasurement = measurement;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	61da      	str	r2, [r3, #28]

	/* Return controller output */
    return pid->out;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	6a1b      	ldr	r3, [r3, #32]

}
 800b642:	4618      	mov	r0, r3
 800b644:	3724      	adds	r7, #36	; 0x24
 800b646:	46bd      	mov	sp, r7
 800b648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64c:	4770      	bx	lr
	...

0800b650 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b082      	sub	sp, #8
 800b654:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b656:	2300      	movs	r3, #0
 800b658:	71fb      	strb	r3, [r7, #7]
 800b65a:	e026      	b.n	800b6aa <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b65c:	79fb      	ldrb	r3, [r7, #7]
 800b65e:	3b50      	subs	r3, #80	; 0x50
 800b660:	b2db      	uxtb	r3, r3
 800b662:	2100      	movs	r1, #0
 800b664:	4618      	mov	r0, r3
 800b666:	f000 f82b 	bl	800b6c0 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b66a:	2100      	movs	r1, #0
 800b66c:	2000      	movs	r0, #0
 800b66e:	f000 f827 	bl	800b6c0 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b672:	2100      	movs	r1, #0
 800b674:	2010      	movs	r0, #16
 800b676:	f000 f823 	bl	800b6c0 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b67a:	2300      	movs	r3, #0
 800b67c:	71bb      	strb	r3, [r7, #6]
 800b67e:	e00d      	b.n	800b69c <OLED_Refresh_Gram+0x4c>
 800b680:	79ba      	ldrb	r2, [r7, #6]
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	490d      	ldr	r1, [pc, #52]	; (800b6bc <OLED_Refresh_Gram+0x6c>)
 800b686:	00d2      	lsls	r2, r2, #3
 800b688:	440a      	add	r2, r1
 800b68a:	4413      	add	r3, r2
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2101      	movs	r1, #1
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f815 	bl	800b6c0 <OLED_WR_Byte>
 800b696:	79bb      	ldrb	r3, [r7, #6]
 800b698:	3301      	adds	r3, #1
 800b69a:	71bb      	strb	r3, [r7, #6]
 800b69c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	daed      	bge.n	800b680 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b6a4:	79fb      	ldrb	r3, [r7, #7]
 800b6a6:	3301      	adds	r3, #1
 800b6a8:	71fb      	strb	r3, [r7, #7]
 800b6aa:	79fb      	ldrb	r3, [r7, #7]
 800b6ac:	2b07      	cmp	r3, #7
 800b6ae:	d9d5      	bls.n	800b65c <OLED_Refresh_Gram+0xc>
	}   
}
 800b6b0:	bf00      	nop
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
 800b6ba:	bf00      	nop
 800b6bc:	20005f68 	.word	0x20005f68

0800b6c0 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b6c0:	b580      	push	{r7, lr}
 800b6c2:	b084      	sub	sp, #16
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	4603      	mov	r3, r0
 800b6c8:	460a      	mov	r2, r1
 800b6ca:	71fb      	strb	r3, [r7, #7]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b6d0:	79bb      	ldrb	r3, [r7, #6]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d006      	beq.n	800b6e4 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6dc:	481c      	ldr	r0, [pc, #112]	; (800b750 <OLED_WR_Byte+0x90>)
 800b6de:	f7f8 f883 	bl	80037e8 <HAL_GPIO_WritePin>
 800b6e2:	e005      	b.n	800b6f0 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b6ea:	4819      	ldr	r0, [pc, #100]	; (800b750 <OLED_WR_Byte+0x90>)
 800b6ec:	f7f8 f87c 	bl	80037e8 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b6f0:	2300      	movs	r3, #0
 800b6f2:	73fb      	strb	r3, [r7, #15]
 800b6f4:	e01e      	b.n	800b734 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2120      	movs	r1, #32
 800b6fa:	4815      	ldr	r0, [pc, #84]	; (800b750 <OLED_WR_Byte+0x90>)
 800b6fc:	f7f8 f874 	bl	80037e8 <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b704:	2b00      	cmp	r3, #0
 800b706:	da05      	bge.n	800b714 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b708:	2201      	movs	r2, #1
 800b70a:	2140      	movs	r1, #64	; 0x40
 800b70c:	4810      	ldr	r0, [pc, #64]	; (800b750 <OLED_WR_Byte+0x90>)
 800b70e:	f7f8 f86b 	bl	80037e8 <HAL_GPIO_WritePin>
 800b712:	e004      	b.n	800b71e <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b714:	2200      	movs	r2, #0
 800b716:	2140      	movs	r1, #64	; 0x40
 800b718:	480d      	ldr	r0, [pc, #52]	; (800b750 <OLED_WR_Byte+0x90>)
 800b71a:	f7f8 f865 	bl	80037e8 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b71e:	2201      	movs	r2, #1
 800b720:	2120      	movs	r1, #32
 800b722:	480b      	ldr	r0, [pc, #44]	; (800b750 <OLED_WR_Byte+0x90>)
 800b724:	f7f8 f860 	bl	80037e8 <HAL_GPIO_WritePin>
		dat<<=1;   
 800b728:	79fb      	ldrb	r3, [r7, #7]
 800b72a:	005b      	lsls	r3, r3, #1
 800b72c:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b72e:	7bfb      	ldrb	r3, [r7, #15]
 800b730:	3301      	adds	r3, #1
 800b732:	73fb      	strb	r3, [r7, #15]
 800b734:	7bfb      	ldrb	r3, [r7, #15]
 800b736:	2b07      	cmp	r3, #7
 800b738:	d9dd      	bls.n	800b6f6 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b73a:	2201      	movs	r2, #1
 800b73c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b740:	4803      	ldr	r0, [pc, #12]	; (800b750 <OLED_WR_Byte+0x90>)
 800b742:	f7f8 f851 	bl	80037e8 <HAL_GPIO_WritePin>
} 
 800b746:	bf00      	nop
 800b748:	3710      	adds	r7, #16
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	40021000 	.word	0x40021000

0800b754 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b754:	b580      	push	{r7, lr}
 800b756:	b082      	sub	sp, #8
 800b758:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b75a:	2300      	movs	r3, #0
 800b75c:	71fb      	strb	r3, [r7, #7]
 800b75e:	e014      	b.n	800b78a <OLED_Clear+0x36>
 800b760:	2300      	movs	r3, #0
 800b762:	71bb      	strb	r3, [r7, #6]
 800b764:	e00a      	b.n	800b77c <OLED_Clear+0x28>
 800b766:	79ba      	ldrb	r2, [r7, #6]
 800b768:	79fb      	ldrb	r3, [r7, #7]
 800b76a:	490c      	ldr	r1, [pc, #48]	; (800b79c <OLED_Clear+0x48>)
 800b76c:	00d2      	lsls	r2, r2, #3
 800b76e:	440a      	add	r2, r1
 800b770:	4413      	add	r3, r2
 800b772:	2200      	movs	r2, #0
 800b774:	701a      	strb	r2, [r3, #0]
 800b776:	79bb      	ldrb	r3, [r7, #6]
 800b778:	3301      	adds	r3, #1
 800b77a:	71bb      	strb	r3, [r7, #6]
 800b77c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b780:	2b00      	cmp	r3, #0
 800b782:	daf0      	bge.n	800b766 <OLED_Clear+0x12>
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	3301      	adds	r3, #1
 800b788:	71fb      	strb	r3, [r7, #7]
 800b78a:	79fb      	ldrb	r3, [r7, #7]
 800b78c:	2b07      	cmp	r3, #7
 800b78e:	d9e7      	bls.n	800b760 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b790:	f7ff ff5e 	bl	800b650 <OLED_Refresh_Gram>
}
 800b794:	bf00      	nop
 800b796:	3708      	adds	r7, #8
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd80      	pop	{r7, pc}
 800b79c:	20005f68 	.word	0x20005f68

0800b7a0 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	4603      	mov	r3, r0
 800b7a8:	71fb      	strb	r3, [r7, #7]
 800b7aa:	460b      	mov	r3, r1
 800b7ac:	71bb      	strb	r3, [r7, #6]
 800b7ae:	4613      	mov	r3, r2
 800b7b0:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b7b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	db41      	blt.n	800b842 <OLED_DrawPoint+0xa2>
 800b7be:	79bb      	ldrb	r3, [r7, #6]
 800b7c0:	2b3f      	cmp	r3, #63	; 0x3f
 800b7c2:	d83e      	bhi.n	800b842 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b7c4:	79bb      	ldrb	r3, [r7, #6]
 800b7c6:	08db      	lsrs	r3, r3, #3
 800b7c8:	b2db      	uxtb	r3, r3
 800b7ca:	f1c3 0307 	rsb	r3, r3, #7
 800b7ce:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b7d0:	79bb      	ldrb	r3, [r7, #6]
 800b7d2:	f003 0307 	and.w	r3, r3, #7
 800b7d6:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b7d8:	7b7b      	ldrb	r3, [r7, #13]
 800b7da:	f1c3 0307 	rsb	r3, r3, #7
 800b7de:	2201      	movs	r2, #1
 800b7e0:	fa02 f303 	lsl.w	r3, r2, r3
 800b7e4:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b7e6:	797b      	ldrb	r3, [r7, #5]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d012      	beq.n	800b812 <OLED_DrawPoint+0x72>
 800b7ec:	79fa      	ldrb	r2, [r7, #7]
 800b7ee:	7bbb      	ldrb	r3, [r7, #14]
 800b7f0:	4917      	ldr	r1, [pc, #92]	; (800b850 <OLED_DrawPoint+0xb0>)
 800b7f2:	00d2      	lsls	r2, r2, #3
 800b7f4:	440a      	add	r2, r1
 800b7f6:	4413      	add	r3, r2
 800b7f8:	7818      	ldrb	r0, [r3, #0]
 800b7fa:	79fa      	ldrb	r2, [r7, #7]
 800b7fc:	7bbb      	ldrb	r3, [r7, #14]
 800b7fe:	7bf9      	ldrb	r1, [r7, #15]
 800b800:	4301      	orrs	r1, r0
 800b802:	b2c8      	uxtb	r0, r1
 800b804:	4912      	ldr	r1, [pc, #72]	; (800b850 <OLED_DrawPoint+0xb0>)
 800b806:	00d2      	lsls	r2, r2, #3
 800b808:	440a      	add	r2, r1
 800b80a:	4413      	add	r3, r2
 800b80c:	4602      	mov	r2, r0
 800b80e:	701a      	strb	r2, [r3, #0]
 800b810:	e018      	b.n	800b844 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b812:	79fa      	ldrb	r2, [r7, #7]
 800b814:	7bbb      	ldrb	r3, [r7, #14]
 800b816:	490e      	ldr	r1, [pc, #56]	; (800b850 <OLED_DrawPoint+0xb0>)
 800b818:	00d2      	lsls	r2, r2, #3
 800b81a:	440a      	add	r2, r1
 800b81c:	4413      	add	r3, r2
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	b25a      	sxtb	r2, r3
 800b822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b826:	43db      	mvns	r3, r3
 800b828:	b25b      	sxtb	r3, r3
 800b82a:	4013      	ands	r3, r2
 800b82c:	b259      	sxtb	r1, r3
 800b82e:	79fa      	ldrb	r2, [r7, #7]
 800b830:	7bbb      	ldrb	r3, [r7, #14]
 800b832:	b2c8      	uxtb	r0, r1
 800b834:	4906      	ldr	r1, [pc, #24]	; (800b850 <OLED_DrawPoint+0xb0>)
 800b836:	00d2      	lsls	r2, r2, #3
 800b838:	440a      	add	r2, r1
 800b83a:	4413      	add	r3, r2
 800b83c:	4602      	mov	r2, r0
 800b83e:	701a      	strb	r2, [r3, #0]
 800b840:	e000      	b.n	800b844 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b842:	bf00      	nop
}
 800b844:	3714      	adds	r7, #20
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr
 800b84e:	bf00      	nop
 800b850:	20005f68 	.word	0x20005f68

0800b854 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b854:	b590      	push	{r4, r7, lr}
 800b856:	b085      	sub	sp, #20
 800b858:	af00      	add	r7, sp, #0
 800b85a:	4604      	mov	r4, r0
 800b85c:	4608      	mov	r0, r1
 800b85e:	4611      	mov	r1, r2
 800b860:	461a      	mov	r2, r3
 800b862:	4623      	mov	r3, r4
 800b864:	71fb      	strb	r3, [r7, #7]
 800b866:	4603      	mov	r3, r0
 800b868:	71bb      	strb	r3, [r7, #6]
 800b86a:	460b      	mov	r3, r1
 800b86c:	717b      	strb	r3, [r7, #5]
 800b86e:	4613      	mov	r3, r2
 800b870:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b872:	79bb      	ldrb	r3, [r7, #6]
 800b874:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b876:	797b      	ldrb	r3, [r7, #5]
 800b878:	3b20      	subs	r3, #32
 800b87a:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b87c:	2300      	movs	r3, #0
 800b87e:	73bb      	strb	r3, [r7, #14]
 800b880:	e04d      	b.n	800b91e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b882:	793b      	ldrb	r3, [r7, #4]
 800b884:	2b0c      	cmp	r3, #12
 800b886:	d10b      	bne.n	800b8a0 <OLED_ShowChar+0x4c>
 800b888:	797a      	ldrb	r2, [r7, #5]
 800b88a:	7bb9      	ldrb	r1, [r7, #14]
 800b88c:	4828      	ldr	r0, [pc, #160]	; (800b930 <OLED_ShowChar+0xdc>)
 800b88e:	4613      	mov	r3, r2
 800b890:	005b      	lsls	r3, r3, #1
 800b892:	4413      	add	r3, r2
 800b894:	009b      	lsls	r3, r3, #2
 800b896:	4403      	add	r3, r0
 800b898:	440b      	add	r3, r1
 800b89a:	781b      	ldrb	r3, [r3, #0]
 800b89c:	73fb      	strb	r3, [r7, #15]
 800b89e:	e007      	b.n	800b8b0 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b8a0:	797a      	ldrb	r2, [r7, #5]
 800b8a2:	7bbb      	ldrb	r3, [r7, #14]
 800b8a4:	4923      	ldr	r1, [pc, #140]	; (800b934 <OLED_ShowChar+0xe0>)
 800b8a6:	0112      	lsls	r2, r2, #4
 800b8a8:	440a      	add	r2, r1
 800b8aa:	4413      	add	r3, r2
 800b8ac:	781b      	ldrb	r3, [r3, #0]
 800b8ae:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	737b      	strb	r3, [r7, #13]
 800b8b4:	e02d      	b.n	800b912 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	da07      	bge.n	800b8ce <OLED_ShowChar+0x7a>
 800b8be:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b8c2:	79b9      	ldrb	r1, [r7, #6]
 800b8c4:	79fb      	ldrb	r3, [r7, #7]
 800b8c6:	4618      	mov	r0, r3
 800b8c8:	f7ff ff6a 	bl	800b7a0 <OLED_DrawPoint>
 800b8cc:	e00c      	b.n	800b8e8 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b8ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	bf0c      	ite	eq
 800b8d6:	2301      	moveq	r3, #1
 800b8d8:	2300      	movne	r3, #0
 800b8da:	b2db      	uxtb	r3, r3
 800b8dc:	461a      	mov	r2, r3
 800b8de:	79b9      	ldrb	r1, [r7, #6]
 800b8e0:	79fb      	ldrb	r3, [r7, #7]
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7ff ff5c 	bl	800b7a0 <OLED_DrawPoint>
			temp<<=1;
 800b8e8:	7bfb      	ldrb	r3, [r7, #15]
 800b8ea:	005b      	lsls	r3, r3, #1
 800b8ec:	73fb      	strb	r3, [r7, #15]
			y++;
 800b8ee:	79bb      	ldrb	r3, [r7, #6]
 800b8f0:	3301      	adds	r3, #1
 800b8f2:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b8f4:	79ba      	ldrb	r2, [r7, #6]
 800b8f6:	7b3b      	ldrb	r3, [r7, #12]
 800b8f8:	1ad2      	subs	r2, r2, r3
 800b8fa:	793b      	ldrb	r3, [r7, #4]
 800b8fc:	429a      	cmp	r2, r3
 800b8fe:	d105      	bne.n	800b90c <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b900:	7b3b      	ldrb	r3, [r7, #12]
 800b902:	71bb      	strb	r3, [r7, #6]
				x++;
 800b904:	79fb      	ldrb	r3, [r7, #7]
 800b906:	3301      	adds	r3, #1
 800b908:	71fb      	strb	r3, [r7, #7]
				break;
 800b90a:	e005      	b.n	800b918 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b90c:	7b7b      	ldrb	r3, [r7, #13]
 800b90e:	3301      	adds	r3, #1
 800b910:	737b      	strb	r3, [r7, #13]
 800b912:	7b7b      	ldrb	r3, [r7, #13]
 800b914:	2b07      	cmp	r3, #7
 800b916:	d9ce      	bls.n	800b8b6 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b918:	7bbb      	ldrb	r3, [r7, #14]
 800b91a:	3301      	adds	r3, #1
 800b91c:	73bb      	strb	r3, [r7, #14]
 800b91e:	7bba      	ldrb	r2, [r7, #14]
 800b920:	793b      	ldrb	r3, [r7, #4]
 800b922:	429a      	cmp	r2, r3
 800b924:	d3ad      	bcc.n	800b882 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b926:	bf00      	nop
 800b928:	bf00      	nop
 800b92a:	3714      	adds	r7, #20
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd90      	pop	{r4, r7, pc}
 800b930:	0801064c 	.word	0x0801064c
 800b934:	08010ac0 	.word	0x08010ac0

0800b938 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af02      	add	r7, sp, #8
 800b93e:	4603      	mov	r3, r0
 800b940:	603a      	str	r2, [r7, #0]
 800b942:	71fb      	strb	r3, [r7, #7]
 800b944:	460b      	mov	r3, r1
 800b946:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b948:	e01f      	b.n	800b98a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b94a:	79fb      	ldrb	r3, [r7, #7]
 800b94c:	2b7a      	cmp	r3, #122	; 0x7a
 800b94e:	d904      	bls.n	800b95a <OLED_ShowString+0x22>
 800b950:	2300      	movs	r3, #0
 800b952:	71fb      	strb	r3, [r7, #7]
 800b954:	79bb      	ldrb	r3, [r7, #6]
 800b956:	3310      	adds	r3, #16
 800b958:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b95a:	79bb      	ldrb	r3, [r7, #6]
 800b95c:	2b3a      	cmp	r3, #58	; 0x3a
 800b95e:	d905      	bls.n	800b96c <OLED_ShowString+0x34>
 800b960:	2300      	movs	r3, #0
 800b962:	71fb      	strb	r3, [r7, #7]
 800b964:	79fb      	ldrb	r3, [r7, #7]
 800b966:	71bb      	strb	r3, [r7, #6]
 800b968:	f7ff fef4 	bl	800b754 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	781a      	ldrb	r2, [r3, #0]
 800b970:	79b9      	ldrb	r1, [r7, #6]
 800b972:	79f8      	ldrb	r0, [r7, #7]
 800b974:	2301      	movs	r3, #1
 800b976:	9300      	str	r3, [sp, #0]
 800b978:	230c      	movs	r3, #12
 800b97a:	f7ff ff6b 	bl	800b854 <OLED_ShowChar>
        x+=8;
 800b97e:	79fb      	ldrb	r3, [r7, #7]
 800b980:	3308      	adds	r3, #8
 800b982:	71fb      	strb	r3, [r7, #7]
        p++;
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	3301      	adds	r3, #1
 800b988:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b98a:	683b      	ldr	r3, [r7, #0]
 800b98c:	781b      	ldrb	r3, [r3, #0]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1db      	bne.n	800b94a <OLED_ShowString+0x12>
    }  
}	 
 800b992:	bf00      	nop
 800b994:	bf00      	nop
 800b996:	3708      	adds	r7, #8
 800b998:	46bd      	mov	sp, r7
 800b99a:	bd80      	pop	{r7, pc}

0800b99c <OLED_Init>:

void OLED_Init(void)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b9a0:	f7fa fada 	bl	8005f58 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b9a4:	4b41      	ldr	r3, [pc, #260]	; (800baac <OLED_Init+0x110>)
 800b9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9a8:	4a40      	ldr	r2, [pc, #256]	; (800baac <OLED_Init+0x110>)
 800b9aa:	f023 0301 	bic.w	r3, r3, #1
 800b9ae:	6713      	str	r3, [r2, #112]	; 0x70
 800b9b0:	4b3e      	ldr	r3, [pc, #248]	; (800baac <OLED_Init+0x110>)
 800b9b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9b4:	4a3d      	ldr	r2, [pc, #244]	; (800baac <OLED_Init+0x110>)
 800b9b6:	f023 0304 	bic.w	r3, r3, #4
 800b9ba:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b9bc:	f7fa fae0 	bl	8005f80 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	2180      	movs	r1, #128	; 0x80
 800b9c4:	483a      	ldr	r0, [pc, #232]	; (800bab0 <OLED_Init+0x114>)
 800b9c6:	f7f7 ff0f 	bl	80037e8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b9ca:	2064      	movs	r0, #100	; 0x64
 800b9cc:	f7f7 fb9a 	bl	8003104 <HAL_Delay>
	OLED_RST_Set();
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	2180      	movs	r1, #128	; 0x80
 800b9d4:	4836      	ldr	r0, [pc, #216]	; (800bab0 <OLED_Init+0x114>)
 800b9d6:	f7f7 ff07 	bl	80037e8 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800b9da:	2100      	movs	r1, #0
 800b9dc:	20ae      	movs	r0, #174	; 0xae
 800b9de:	f7ff fe6f 	bl	800b6c0 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	20d5      	movs	r0, #213	; 0xd5
 800b9e6:	f7ff fe6b 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800b9ea:	2100      	movs	r1, #0
 800b9ec:	2050      	movs	r0, #80	; 0x50
 800b9ee:	f7ff fe67 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	20a8      	movs	r0, #168	; 0xa8
 800b9f6:	f7ff fe63 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800b9fa:	2100      	movs	r1, #0
 800b9fc:	203f      	movs	r0, #63	; 0x3f
 800b9fe:	f7ff fe5f 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800ba02:	2100      	movs	r1, #0
 800ba04:	20d3      	movs	r0, #211	; 0xd3
 800ba06:	f7ff fe5b 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800ba0a:	2100      	movs	r1, #0
 800ba0c:	2000      	movs	r0, #0
 800ba0e:	f7ff fe57 	bl	800b6c0 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800ba12:	2100      	movs	r1, #0
 800ba14:	2040      	movs	r0, #64	; 0x40
 800ba16:	f7ff fe53 	bl	800b6c0 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ba1a:	2100      	movs	r1, #0
 800ba1c:	208d      	movs	r0, #141	; 0x8d
 800ba1e:	f7ff fe4f 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ba22:	2100      	movs	r1, #0
 800ba24:	2014      	movs	r0, #20
 800ba26:	f7ff fe4b 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	2020      	movs	r0, #32
 800ba2e:	f7ff fe47 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ba32:	2100      	movs	r1, #0
 800ba34:	2002      	movs	r0, #2
 800ba36:	f7ff fe43 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ba3a:	2100      	movs	r1, #0
 800ba3c:	20a1      	movs	r0, #161	; 0xa1
 800ba3e:	f7ff fe3f 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ba42:	2100      	movs	r1, #0
 800ba44:	20c0      	movs	r0, #192	; 0xc0
 800ba46:	f7ff fe3b 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	20da      	movs	r0, #218	; 0xda
 800ba4e:	f7ff fe37 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800ba52:	2100      	movs	r1, #0
 800ba54:	2012      	movs	r0, #18
 800ba56:	f7ff fe33 	bl	800b6c0 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800ba5a:	2100      	movs	r1, #0
 800ba5c:	2081      	movs	r0, #129	; 0x81
 800ba5e:	f7ff fe2f 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800ba62:	2100      	movs	r1, #0
 800ba64:	20ef      	movs	r0, #239	; 0xef
 800ba66:	f7ff fe2b 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ba6a:	2100      	movs	r1, #0
 800ba6c:	20d9      	movs	r0, #217	; 0xd9
 800ba6e:	f7ff fe27 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ba72:	2100      	movs	r1, #0
 800ba74:	20f1      	movs	r0, #241	; 0xf1
 800ba76:	f7ff fe23 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800ba7a:	2100      	movs	r1, #0
 800ba7c:	20db      	movs	r0, #219	; 0xdb
 800ba7e:	f7ff fe1f 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800ba82:	2100      	movs	r1, #0
 800ba84:	2030      	movs	r0, #48	; 0x30
 800ba86:	f7ff fe1b 	bl	800b6c0 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800ba8a:	2100      	movs	r1, #0
 800ba8c:	20a4      	movs	r0, #164	; 0xa4
 800ba8e:	f7ff fe17 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800ba92:	2100      	movs	r1, #0
 800ba94:	20a6      	movs	r0, #166	; 0xa6
 800ba96:	f7ff fe13 	bl	800b6c0 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800ba9a:	2100      	movs	r1, #0
 800ba9c:	20af      	movs	r0, #175	; 0xaf
 800ba9e:	f7ff fe0f 	bl	800b6c0 <OLED_WR_Byte>
	OLED_Clear(); 
 800baa2:	f7ff fe57 	bl	800b754 <OLED_Clear>
}
 800baa6:	bf00      	nop
 800baa8:	bd80      	pop	{r7, pc}
 800baaa:	bf00      	nop
 800baac:	40023800 	.word	0x40023800
 800bab0:	40021000 	.word	0x40021000

0800bab4 <__errno>:
 800bab4:	4b01      	ldr	r3, [pc, #4]	; (800babc <__errno+0x8>)
 800bab6:	6818      	ldr	r0, [r3, #0]
 800bab8:	4770      	bx	lr
 800baba:	bf00      	nop
 800babc:	20000010 	.word	0x20000010

0800bac0 <__libc_init_array>:
 800bac0:	b570      	push	{r4, r5, r6, lr}
 800bac2:	4d0d      	ldr	r5, [pc, #52]	; (800baf8 <__libc_init_array+0x38>)
 800bac4:	4c0d      	ldr	r4, [pc, #52]	; (800bafc <__libc_init_array+0x3c>)
 800bac6:	1b64      	subs	r4, r4, r5
 800bac8:	10a4      	asrs	r4, r4, #2
 800baca:	2600      	movs	r6, #0
 800bacc:	42a6      	cmp	r6, r4
 800bace:	d109      	bne.n	800bae4 <__libc_init_array+0x24>
 800bad0:	4d0b      	ldr	r5, [pc, #44]	; (800bb00 <__libc_init_array+0x40>)
 800bad2:	4c0c      	ldr	r4, [pc, #48]	; (800bb04 <__libc_init_array+0x44>)
 800bad4:	f004 fc98 	bl	8010408 <_init>
 800bad8:	1b64      	subs	r4, r4, r5
 800bada:	10a4      	asrs	r4, r4, #2
 800badc:	2600      	movs	r6, #0
 800bade:	42a6      	cmp	r6, r4
 800bae0:	d105      	bne.n	800baee <__libc_init_array+0x2e>
 800bae2:	bd70      	pop	{r4, r5, r6, pc}
 800bae4:	f855 3b04 	ldr.w	r3, [r5], #4
 800bae8:	4798      	blx	r3
 800baea:	3601      	adds	r6, #1
 800baec:	e7ee      	b.n	800bacc <__libc_init_array+0xc>
 800baee:	f855 3b04 	ldr.w	r3, [r5], #4
 800baf2:	4798      	blx	r3
 800baf4:	3601      	adds	r6, #1
 800baf6:	e7f2      	b.n	800bade <__libc_init_array+0x1e>
 800baf8:	0801155c 	.word	0x0801155c
 800bafc:	0801155c 	.word	0x0801155c
 800bb00:	0801155c 	.word	0x0801155c
 800bb04:	08011560 	.word	0x08011560

0800bb08 <memcpy>:
 800bb08:	440a      	add	r2, r1
 800bb0a:	4291      	cmp	r1, r2
 800bb0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb10:	d100      	bne.n	800bb14 <memcpy+0xc>
 800bb12:	4770      	bx	lr
 800bb14:	b510      	push	{r4, lr}
 800bb16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb1e:	4291      	cmp	r1, r2
 800bb20:	d1f9      	bne.n	800bb16 <memcpy+0xe>
 800bb22:	bd10      	pop	{r4, pc}

0800bb24 <memset>:
 800bb24:	4402      	add	r2, r0
 800bb26:	4603      	mov	r3, r0
 800bb28:	4293      	cmp	r3, r2
 800bb2a:	d100      	bne.n	800bb2e <memset+0xa>
 800bb2c:	4770      	bx	lr
 800bb2e:	f803 1b01 	strb.w	r1, [r3], #1
 800bb32:	e7f9      	b.n	800bb28 <memset+0x4>

0800bb34 <__cvt>:
 800bb34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bb38:	ec55 4b10 	vmov	r4, r5, d0
 800bb3c:	2d00      	cmp	r5, #0
 800bb3e:	460e      	mov	r6, r1
 800bb40:	4619      	mov	r1, r3
 800bb42:	462b      	mov	r3, r5
 800bb44:	bfbb      	ittet	lt
 800bb46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bb4a:	461d      	movlt	r5, r3
 800bb4c:	2300      	movge	r3, #0
 800bb4e:	232d      	movlt	r3, #45	; 0x2d
 800bb50:	700b      	strb	r3, [r1, #0]
 800bb52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bb54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bb58:	4691      	mov	r9, r2
 800bb5a:	f023 0820 	bic.w	r8, r3, #32
 800bb5e:	bfbc      	itt	lt
 800bb60:	4622      	movlt	r2, r4
 800bb62:	4614      	movlt	r4, r2
 800bb64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb68:	d005      	beq.n	800bb76 <__cvt+0x42>
 800bb6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800bb6e:	d100      	bne.n	800bb72 <__cvt+0x3e>
 800bb70:	3601      	adds	r6, #1
 800bb72:	2102      	movs	r1, #2
 800bb74:	e000      	b.n	800bb78 <__cvt+0x44>
 800bb76:	2103      	movs	r1, #3
 800bb78:	ab03      	add	r3, sp, #12
 800bb7a:	9301      	str	r3, [sp, #4]
 800bb7c:	ab02      	add	r3, sp, #8
 800bb7e:	9300      	str	r3, [sp, #0]
 800bb80:	ec45 4b10 	vmov	d0, r4, r5
 800bb84:	4653      	mov	r3, sl
 800bb86:	4632      	mov	r2, r6
 800bb88:	f001 fdb6 	bl	800d6f8 <_dtoa_r>
 800bb8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bb90:	4607      	mov	r7, r0
 800bb92:	d102      	bne.n	800bb9a <__cvt+0x66>
 800bb94:	f019 0f01 	tst.w	r9, #1
 800bb98:	d022      	beq.n	800bbe0 <__cvt+0xac>
 800bb9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bb9e:	eb07 0906 	add.w	r9, r7, r6
 800bba2:	d110      	bne.n	800bbc6 <__cvt+0x92>
 800bba4:	783b      	ldrb	r3, [r7, #0]
 800bba6:	2b30      	cmp	r3, #48	; 0x30
 800bba8:	d10a      	bne.n	800bbc0 <__cvt+0x8c>
 800bbaa:	2200      	movs	r2, #0
 800bbac:	2300      	movs	r3, #0
 800bbae:	4620      	mov	r0, r4
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	f7f4 ff89 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbb6:	b918      	cbnz	r0, 800bbc0 <__cvt+0x8c>
 800bbb8:	f1c6 0601 	rsb	r6, r6, #1
 800bbbc:	f8ca 6000 	str.w	r6, [sl]
 800bbc0:	f8da 3000 	ldr.w	r3, [sl]
 800bbc4:	4499      	add	r9, r3
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4620      	mov	r0, r4
 800bbcc:	4629      	mov	r1, r5
 800bbce:	f7f4 ff7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbd2:	b108      	cbz	r0, 800bbd8 <__cvt+0xa4>
 800bbd4:	f8cd 900c 	str.w	r9, [sp, #12]
 800bbd8:	2230      	movs	r2, #48	; 0x30
 800bbda:	9b03      	ldr	r3, [sp, #12]
 800bbdc:	454b      	cmp	r3, r9
 800bbde:	d307      	bcc.n	800bbf0 <__cvt+0xbc>
 800bbe0:	9b03      	ldr	r3, [sp, #12]
 800bbe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bbe4:	1bdb      	subs	r3, r3, r7
 800bbe6:	4638      	mov	r0, r7
 800bbe8:	6013      	str	r3, [r2, #0]
 800bbea:	b004      	add	sp, #16
 800bbec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbf0:	1c59      	adds	r1, r3, #1
 800bbf2:	9103      	str	r1, [sp, #12]
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	e7f0      	b.n	800bbda <__cvt+0xa6>

0800bbf8 <__exponent>:
 800bbf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2900      	cmp	r1, #0
 800bbfe:	bfb8      	it	lt
 800bc00:	4249      	neglt	r1, r1
 800bc02:	f803 2b02 	strb.w	r2, [r3], #2
 800bc06:	bfb4      	ite	lt
 800bc08:	222d      	movlt	r2, #45	; 0x2d
 800bc0a:	222b      	movge	r2, #43	; 0x2b
 800bc0c:	2909      	cmp	r1, #9
 800bc0e:	7042      	strb	r2, [r0, #1]
 800bc10:	dd2a      	ble.n	800bc68 <__exponent+0x70>
 800bc12:	f10d 0407 	add.w	r4, sp, #7
 800bc16:	46a4      	mov	ip, r4
 800bc18:	270a      	movs	r7, #10
 800bc1a:	46a6      	mov	lr, r4
 800bc1c:	460a      	mov	r2, r1
 800bc1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800bc22:	fb07 1516 	mls	r5, r7, r6, r1
 800bc26:	3530      	adds	r5, #48	; 0x30
 800bc28:	2a63      	cmp	r2, #99	; 0x63
 800bc2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800bc2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bc32:	4631      	mov	r1, r6
 800bc34:	dcf1      	bgt.n	800bc1a <__exponent+0x22>
 800bc36:	3130      	adds	r1, #48	; 0x30
 800bc38:	f1ae 0502 	sub.w	r5, lr, #2
 800bc3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bc40:	1c44      	adds	r4, r0, #1
 800bc42:	4629      	mov	r1, r5
 800bc44:	4561      	cmp	r1, ip
 800bc46:	d30a      	bcc.n	800bc5e <__exponent+0x66>
 800bc48:	f10d 0209 	add.w	r2, sp, #9
 800bc4c:	eba2 020e 	sub.w	r2, r2, lr
 800bc50:	4565      	cmp	r5, ip
 800bc52:	bf88      	it	hi
 800bc54:	2200      	movhi	r2, #0
 800bc56:	4413      	add	r3, r2
 800bc58:	1a18      	subs	r0, r3, r0
 800bc5a:	b003      	add	sp, #12
 800bc5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bc66:	e7ed      	b.n	800bc44 <__exponent+0x4c>
 800bc68:	2330      	movs	r3, #48	; 0x30
 800bc6a:	3130      	adds	r1, #48	; 0x30
 800bc6c:	7083      	strb	r3, [r0, #2]
 800bc6e:	70c1      	strb	r1, [r0, #3]
 800bc70:	1d03      	adds	r3, r0, #4
 800bc72:	e7f1      	b.n	800bc58 <__exponent+0x60>

0800bc74 <_printf_float>:
 800bc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc78:	ed2d 8b02 	vpush	{d8}
 800bc7c:	b08d      	sub	sp, #52	; 0x34
 800bc7e:	460c      	mov	r4, r1
 800bc80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bc84:	4616      	mov	r6, r2
 800bc86:	461f      	mov	r7, r3
 800bc88:	4605      	mov	r5, r0
 800bc8a:	f002 fe93 	bl	800e9b4 <_localeconv_r>
 800bc8e:	f8d0 a000 	ldr.w	sl, [r0]
 800bc92:	4650      	mov	r0, sl
 800bc94:	f7f4 fa9c 	bl	80001d0 <strlen>
 800bc98:	2300      	movs	r3, #0
 800bc9a:	930a      	str	r3, [sp, #40]	; 0x28
 800bc9c:	6823      	ldr	r3, [r4, #0]
 800bc9e:	9305      	str	r3, [sp, #20]
 800bca0:	f8d8 3000 	ldr.w	r3, [r8]
 800bca4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bca8:	3307      	adds	r3, #7
 800bcaa:	f023 0307 	bic.w	r3, r3, #7
 800bcae:	f103 0208 	add.w	r2, r3, #8
 800bcb2:	f8c8 2000 	str.w	r2, [r8]
 800bcb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bcbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bcc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bcc6:	9307      	str	r3, [sp, #28]
 800bcc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800bccc:	ee08 0a10 	vmov	s16, r0
 800bcd0:	4b9f      	ldr	r3, [pc, #636]	; (800bf50 <_printf_float+0x2dc>)
 800bcd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcd6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcda:	f7f4 ff27 	bl	8000b2c <__aeabi_dcmpun>
 800bcde:	bb88      	cbnz	r0, 800bd44 <_printf_float+0xd0>
 800bce0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bce4:	4b9a      	ldr	r3, [pc, #616]	; (800bf50 <_printf_float+0x2dc>)
 800bce6:	f04f 32ff 	mov.w	r2, #4294967295
 800bcea:	f7f4 ff01 	bl	8000af0 <__aeabi_dcmple>
 800bcee:	bb48      	cbnz	r0, 800bd44 <_printf_float+0xd0>
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	4640      	mov	r0, r8
 800bcf6:	4649      	mov	r1, r9
 800bcf8:	f7f4 fef0 	bl	8000adc <__aeabi_dcmplt>
 800bcfc:	b110      	cbz	r0, 800bd04 <_printf_float+0x90>
 800bcfe:	232d      	movs	r3, #45	; 0x2d
 800bd00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bd04:	4b93      	ldr	r3, [pc, #588]	; (800bf54 <_printf_float+0x2e0>)
 800bd06:	4894      	ldr	r0, [pc, #592]	; (800bf58 <_printf_float+0x2e4>)
 800bd08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800bd0c:	bf94      	ite	ls
 800bd0e:	4698      	movls	r8, r3
 800bd10:	4680      	movhi	r8, r0
 800bd12:	2303      	movs	r3, #3
 800bd14:	6123      	str	r3, [r4, #16]
 800bd16:	9b05      	ldr	r3, [sp, #20]
 800bd18:	f023 0204 	bic.w	r2, r3, #4
 800bd1c:	6022      	str	r2, [r4, #0]
 800bd1e:	f04f 0900 	mov.w	r9, #0
 800bd22:	9700      	str	r7, [sp, #0]
 800bd24:	4633      	mov	r3, r6
 800bd26:	aa0b      	add	r2, sp, #44	; 0x2c
 800bd28:	4621      	mov	r1, r4
 800bd2a:	4628      	mov	r0, r5
 800bd2c:	f000 f9d8 	bl	800c0e0 <_printf_common>
 800bd30:	3001      	adds	r0, #1
 800bd32:	f040 8090 	bne.w	800be56 <_printf_float+0x1e2>
 800bd36:	f04f 30ff 	mov.w	r0, #4294967295
 800bd3a:	b00d      	add	sp, #52	; 0x34
 800bd3c:	ecbd 8b02 	vpop	{d8}
 800bd40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd44:	4642      	mov	r2, r8
 800bd46:	464b      	mov	r3, r9
 800bd48:	4640      	mov	r0, r8
 800bd4a:	4649      	mov	r1, r9
 800bd4c:	f7f4 feee 	bl	8000b2c <__aeabi_dcmpun>
 800bd50:	b140      	cbz	r0, 800bd64 <_printf_float+0xf0>
 800bd52:	464b      	mov	r3, r9
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	bfbc      	itt	lt
 800bd58:	232d      	movlt	r3, #45	; 0x2d
 800bd5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800bd5e:	487f      	ldr	r0, [pc, #508]	; (800bf5c <_printf_float+0x2e8>)
 800bd60:	4b7f      	ldr	r3, [pc, #508]	; (800bf60 <_printf_float+0x2ec>)
 800bd62:	e7d1      	b.n	800bd08 <_printf_float+0x94>
 800bd64:	6863      	ldr	r3, [r4, #4]
 800bd66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800bd6a:	9206      	str	r2, [sp, #24]
 800bd6c:	1c5a      	adds	r2, r3, #1
 800bd6e:	d13f      	bne.n	800bdf0 <_printf_float+0x17c>
 800bd70:	2306      	movs	r3, #6
 800bd72:	6063      	str	r3, [r4, #4]
 800bd74:	9b05      	ldr	r3, [sp, #20]
 800bd76:	6861      	ldr	r1, [r4, #4]
 800bd78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9303      	str	r3, [sp, #12]
 800bd80:	ab0a      	add	r3, sp, #40	; 0x28
 800bd82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bd86:	ab09      	add	r3, sp, #36	; 0x24
 800bd88:	ec49 8b10 	vmov	d0, r8, r9
 800bd8c:	9300      	str	r3, [sp, #0]
 800bd8e:	6022      	str	r2, [r4, #0]
 800bd90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bd94:	4628      	mov	r0, r5
 800bd96:	f7ff fecd 	bl	800bb34 <__cvt>
 800bd9a:	9b06      	ldr	r3, [sp, #24]
 800bd9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd9e:	2b47      	cmp	r3, #71	; 0x47
 800bda0:	4680      	mov	r8, r0
 800bda2:	d108      	bne.n	800bdb6 <_printf_float+0x142>
 800bda4:	1cc8      	adds	r0, r1, #3
 800bda6:	db02      	blt.n	800bdae <_printf_float+0x13a>
 800bda8:	6863      	ldr	r3, [r4, #4]
 800bdaa:	4299      	cmp	r1, r3
 800bdac:	dd41      	ble.n	800be32 <_printf_float+0x1be>
 800bdae:	f1ab 0b02 	sub.w	fp, fp, #2
 800bdb2:	fa5f fb8b 	uxtb.w	fp, fp
 800bdb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bdba:	d820      	bhi.n	800bdfe <_printf_float+0x18a>
 800bdbc:	3901      	subs	r1, #1
 800bdbe:	465a      	mov	r2, fp
 800bdc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bdc4:	9109      	str	r1, [sp, #36]	; 0x24
 800bdc6:	f7ff ff17 	bl	800bbf8 <__exponent>
 800bdca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bdcc:	1813      	adds	r3, r2, r0
 800bdce:	2a01      	cmp	r2, #1
 800bdd0:	4681      	mov	r9, r0
 800bdd2:	6123      	str	r3, [r4, #16]
 800bdd4:	dc02      	bgt.n	800bddc <_printf_float+0x168>
 800bdd6:	6822      	ldr	r2, [r4, #0]
 800bdd8:	07d2      	lsls	r2, r2, #31
 800bdda:	d501      	bpl.n	800bde0 <_printf_float+0x16c>
 800bddc:	3301      	adds	r3, #1
 800bdde:	6123      	str	r3, [r4, #16]
 800bde0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d09c      	beq.n	800bd22 <_printf_float+0xae>
 800bde8:	232d      	movs	r3, #45	; 0x2d
 800bdea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdee:	e798      	b.n	800bd22 <_printf_float+0xae>
 800bdf0:	9a06      	ldr	r2, [sp, #24]
 800bdf2:	2a47      	cmp	r2, #71	; 0x47
 800bdf4:	d1be      	bne.n	800bd74 <_printf_float+0x100>
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d1bc      	bne.n	800bd74 <_printf_float+0x100>
 800bdfa:	2301      	movs	r3, #1
 800bdfc:	e7b9      	b.n	800bd72 <_printf_float+0xfe>
 800bdfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800be02:	d118      	bne.n	800be36 <_printf_float+0x1c2>
 800be04:	2900      	cmp	r1, #0
 800be06:	6863      	ldr	r3, [r4, #4]
 800be08:	dd0b      	ble.n	800be22 <_printf_float+0x1ae>
 800be0a:	6121      	str	r1, [r4, #16]
 800be0c:	b913      	cbnz	r3, 800be14 <_printf_float+0x1a0>
 800be0e:	6822      	ldr	r2, [r4, #0]
 800be10:	07d0      	lsls	r0, r2, #31
 800be12:	d502      	bpl.n	800be1a <_printf_float+0x1a6>
 800be14:	3301      	adds	r3, #1
 800be16:	440b      	add	r3, r1
 800be18:	6123      	str	r3, [r4, #16]
 800be1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800be1c:	f04f 0900 	mov.w	r9, #0
 800be20:	e7de      	b.n	800bde0 <_printf_float+0x16c>
 800be22:	b913      	cbnz	r3, 800be2a <_printf_float+0x1b6>
 800be24:	6822      	ldr	r2, [r4, #0]
 800be26:	07d2      	lsls	r2, r2, #31
 800be28:	d501      	bpl.n	800be2e <_printf_float+0x1ba>
 800be2a:	3302      	adds	r3, #2
 800be2c:	e7f4      	b.n	800be18 <_printf_float+0x1a4>
 800be2e:	2301      	movs	r3, #1
 800be30:	e7f2      	b.n	800be18 <_printf_float+0x1a4>
 800be32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800be36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be38:	4299      	cmp	r1, r3
 800be3a:	db05      	blt.n	800be48 <_printf_float+0x1d4>
 800be3c:	6823      	ldr	r3, [r4, #0]
 800be3e:	6121      	str	r1, [r4, #16]
 800be40:	07d8      	lsls	r0, r3, #31
 800be42:	d5ea      	bpl.n	800be1a <_printf_float+0x1a6>
 800be44:	1c4b      	adds	r3, r1, #1
 800be46:	e7e7      	b.n	800be18 <_printf_float+0x1a4>
 800be48:	2900      	cmp	r1, #0
 800be4a:	bfd4      	ite	le
 800be4c:	f1c1 0202 	rsble	r2, r1, #2
 800be50:	2201      	movgt	r2, #1
 800be52:	4413      	add	r3, r2
 800be54:	e7e0      	b.n	800be18 <_printf_float+0x1a4>
 800be56:	6823      	ldr	r3, [r4, #0]
 800be58:	055a      	lsls	r2, r3, #21
 800be5a:	d407      	bmi.n	800be6c <_printf_float+0x1f8>
 800be5c:	6923      	ldr	r3, [r4, #16]
 800be5e:	4642      	mov	r2, r8
 800be60:	4631      	mov	r1, r6
 800be62:	4628      	mov	r0, r5
 800be64:	47b8      	blx	r7
 800be66:	3001      	adds	r0, #1
 800be68:	d12c      	bne.n	800bec4 <_printf_float+0x250>
 800be6a:	e764      	b.n	800bd36 <_printf_float+0xc2>
 800be6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800be70:	f240 80e0 	bls.w	800c034 <_printf_float+0x3c0>
 800be74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be78:	2200      	movs	r2, #0
 800be7a:	2300      	movs	r3, #0
 800be7c:	f7f4 fe24 	bl	8000ac8 <__aeabi_dcmpeq>
 800be80:	2800      	cmp	r0, #0
 800be82:	d034      	beq.n	800beee <_printf_float+0x27a>
 800be84:	4a37      	ldr	r2, [pc, #220]	; (800bf64 <_printf_float+0x2f0>)
 800be86:	2301      	movs	r3, #1
 800be88:	4631      	mov	r1, r6
 800be8a:	4628      	mov	r0, r5
 800be8c:	47b8      	blx	r7
 800be8e:	3001      	adds	r0, #1
 800be90:	f43f af51 	beq.w	800bd36 <_printf_float+0xc2>
 800be94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be98:	429a      	cmp	r2, r3
 800be9a:	db02      	blt.n	800bea2 <_printf_float+0x22e>
 800be9c:	6823      	ldr	r3, [r4, #0]
 800be9e:	07d8      	lsls	r0, r3, #31
 800bea0:	d510      	bpl.n	800bec4 <_printf_float+0x250>
 800bea2:	ee18 3a10 	vmov	r3, s16
 800bea6:	4652      	mov	r2, sl
 800bea8:	4631      	mov	r1, r6
 800beaa:	4628      	mov	r0, r5
 800beac:	47b8      	blx	r7
 800beae:	3001      	adds	r0, #1
 800beb0:	f43f af41 	beq.w	800bd36 <_printf_float+0xc2>
 800beb4:	f04f 0800 	mov.w	r8, #0
 800beb8:	f104 091a 	add.w	r9, r4, #26
 800bebc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bebe:	3b01      	subs	r3, #1
 800bec0:	4543      	cmp	r3, r8
 800bec2:	dc09      	bgt.n	800bed8 <_printf_float+0x264>
 800bec4:	6823      	ldr	r3, [r4, #0]
 800bec6:	079b      	lsls	r3, r3, #30
 800bec8:	f100 8105 	bmi.w	800c0d6 <_printf_float+0x462>
 800becc:	68e0      	ldr	r0, [r4, #12]
 800bece:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bed0:	4298      	cmp	r0, r3
 800bed2:	bfb8      	it	lt
 800bed4:	4618      	movlt	r0, r3
 800bed6:	e730      	b.n	800bd3a <_printf_float+0xc6>
 800bed8:	2301      	movs	r3, #1
 800beda:	464a      	mov	r2, r9
 800bedc:	4631      	mov	r1, r6
 800bede:	4628      	mov	r0, r5
 800bee0:	47b8      	blx	r7
 800bee2:	3001      	adds	r0, #1
 800bee4:	f43f af27 	beq.w	800bd36 <_printf_float+0xc2>
 800bee8:	f108 0801 	add.w	r8, r8, #1
 800beec:	e7e6      	b.n	800bebc <_printf_float+0x248>
 800beee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	dc39      	bgt.n	800bf68 <_printf_float+0x2f4>
 800bef4:	4a1b      	ldr	r2, [pc, #108]	; (800bf64 <_printf_float+0x2f0>)
 800bef6:	2301      	movs	r3, #1
 800bef8:	4631      	mov	r1, r6
 800befa:	4628      	mov	r0, r5
 800befc:	47b8      	blx	r7
 800befe:	3001      	adds	r0, #1
 800bf00:	f43f af19 	beq.w	800bd36 <_printf_float+0xc2>
 800bf04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	d102      	bne.n	800bf12 <_printf_float+0x29e>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	07d9      	lsls	r1, r3, #31
 800bf10:	d5d8      	bpl.n	800bec4 <_printf_float+0x250>
 800bf12:	ee18 3a10 	vmov	r3, s16
 800bf16:	4652      	mov	r2, sl
 800bf18:	4631      	mov	r1, r6
 800bf1a:	4628      	mov	r0, r5
 800bf1c:	47b8      	blx	r7
 800bf1e:	3001      	adds	r0, #1
 800bf20:	f43f af09 	beq.w	800bd36 <_printf_float+0xc2>
 800bf24:	f04f 0900 	mov.w	r9, #0
 800bf28:	f104 0a1a 	add.w	sl, r4, #26
 800bf2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf2e:	425b      	negs	r3, r3
 800bf30:	454b      	cmp	r3, r9
 800bf32:	dc01      	bgt.n	800bf38 <_printf_float+0x2c4>
 800bf34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf36:	e792      	b.n	800be5e <_printf_float+0x1ea>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	4652      	mov	r2, sl
 800bf3c:	4631      	mov	r1, r6
 800bf3e:	4628      	mov	r0, r5
 800bf40:	47b8      	blx	r7
 800bf42:	3001      	adds	r0, #1
 800bf44:	f43f aef7 	beq.w	800bd36 <_printf_float+0xc2>
 800bf48:	f109 0901 	add.w	r9, r9, #1
 800bf4c:	e7ee      	b.n	800bf2c <_printf_float+0x2b8>
 800bf4e:	bf00      	nop
 800bf50:	7fefffff 	.word	0x7fefffff
 800bf54:	080110b4 	.word	0x080110b4
 800bf58:	080110b8 	.word	0x080110b8
 800bf5c:	080110c0 	.word	0x080110c0
 800bf60:	080110bc 	.word	0x080110bc
 800bf64:	080110c4 	.word	0x080110c4
 800bf68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bf6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf6c:	429a      	cmp	r2, r3
 800bf6e:	bfa8      	it	ge
 800bf70:	461a      	movge	r2, r3
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	4691      	mov	r9, r2
 800bf76:	dc37      	bgt.n	800bfe8 <_printf_float+0x374>
 800bf78:	f04f 0b00 	mov.w	fp, #0
 800bf7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bf80:	f104 021a 	add.w	r2, r4, #26
 800bf84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bf86:	9305      	str	r3, [sp, #20]
 800bf88:	eba3 0309 	sub.w	r3, r3, r9
 800bf8c:	455b      	cmp	r3, fp
 800bf8e:	dc33      	bgt.n	800bff8 <_printf_float+0x384>
 800bf90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bf94:	429a      	cmp	r2, r3
 800bf96:	db3b      	blt.n	800c010 <_printf_float+0x39c>
 800bf98:	6823      	ldr	r3, [r4, #0]
 800bf9a:	07da      	lsls	r2, r3, #31
 800bf9c:	d438      	bmi.n	800c010 <_printf_float+0x39c>
 800bf9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfa0:	9a05      	ldr	r2, [sp, #20]
 800bfa2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bfa4:	1a9a      	subs	r2, r3, r2
 800bfa6:	eba3 0901 	sub.w	r9, r3, r1
 800bfaa:	4591      	cmp	r9, r2
 800bfac:	bfa8      	it	ge
 800bfae:	4691      	movge	r9, r2
 800bfb0:	f1b9 0f00 	cmp.w	r9, #0
 800bfb4:	dc35      	bgt.n	800c022 <_printf_float+0x3ae>
 800bfb6:	f04f 0800 	mov.w	r8, #0
 800bfba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bfbe:	f104 0a1a 	add.w	sl, r4, #26
 800bfc2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bfc6:	1a9b      	subs	r3, r3, r2
 800bfc8:	eba3 0309 	sub.w	r3, r3, r9
 800bfcc:	4543      	cmp	r3, r8
 800bfce:	f77f af79 	ble.w	800bec4 <_printf_float+0x250>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	4652      	mov	r2, sl
 800bfd6:	4631      	mov	r1, r6
 800bfd8:	4628      	mov	r0, r5
 800bfda:	47b8      	blx	r7
 800bfdc:	3001      	adds	r0, #1
 800bfde:	f43f aeaa 	beq.w	800bd36 <_printf_float+0xc2>
 800bfe2:	f108 0801 	add.w	r8, r8, #1
 800bfe6:	e7ec      	b.n	800bfc2 <_printf_float+0x34e>
 800bfe8:	4613      	mov	r3, r2
 800bfea:	4631      	mov	r1, r6
 800bfec:	4642      	mov	r2, r8
 800bfee:	4628      	mov	r0, r5
 800bff0:	47b8      	blx	r7
 800bff2:	3001      	adds	r0, #1
 800bff4:	d1c0      	bne.n	800bf78 <_printf_float+0x304>
 800bff6:	e69e      	b.n	800bd36 <_printf_float+0xc2>
 800bff8:	2301      	movs	r3, #1
 800bffa:	4631      	mov	r1, r6
 800bffc:	4628      	mov	r0, r5
 800bffe:	9205      	str	r2, [sp, #20]
 800c000:	47b8      	blx	r7
 800c002:	3001      	adds	r0, #1
 800c004:	f43f ae97 	beq.w	800bd36 <_printf_float+0xc2>
 800c008:	9a05      	ldr	r2, [sp, #20]
 800c00a:	f10b 0b01 	add.w	fp, fp, #1
 800c00e:	e7b9      	b.n	800bf84 <_printf_float+0x310>
 800c010:	ee18 3a10 	vmov	r3, s16
 800c014:	4652      	mov	r2, sl
 800c016:	4631      	mov	r1, r6
 800c018:	4628      	mov	r0, r5
 800c01a:	47b8      	blx	r7
 800c01c:	3001      	adds	r0, #1
 800c01e:	d1be      	bne.n	800bf9e <_printf_float+0x32a>
 800c020:	e689      	b.n	800bd36 <_printf_float+0xc2>
 800c022:	9a05      	ldr	r2, [sp, #20]
 800c024:	464b      	mov	r3, r9
 800c026:	4442      	add	r2, r8
 800c028:	4631      	mov	r1, r6
 800c02a:	4628      	mov	r0, r5
 800c02c:	47b8      	blx	r7
 800c02e:	3001      	adds	r0, #1
 800c030:	d1c1      	bne.n	800bfb6 <_printf_float+0x342>
 800c032:	e680      	b.n	800bd36 <_printf_float+0xc2>
 800c034:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c036:	2a01      	cmp	r2, #1
 800c038:	dc01      	bgt.n	800c03e <_printf_float+0x3ca>
 800c03a:	07db      	lsls	r3, r3, #31
 800c03c:	d538      	bpl.n	800c0b0 <_printf_float+0x43c>
 800c03e:	2301      	movs	r3, #1
 800c040:	4642      	mov	r2, r8
 800c042:	4631      	mov	r1, r6
 800c044:	4628      	mov	r0, r5
 800c046:	47b8      	blx	r7
 800c048:	3001      	adds	r0, #1
 800c04a:	f43f ae74 	beq.w	800bd36 <_printf_float+0xc2>
 800c04e:	ee18 3a10 	vmov	r3, s16
 800c052:	4652      	mov	r2, sl
 800c054:	4631      	mov	r1, r6
 800c056:	4628      	mov	r0, r5
 800c058:	47b8      	blx	r7
 800c05a:	3001      	adds	r0, #1
 800c05c:	f43f ae6b 	beq.w	800bd36 <_printf_float+0xc2>
 800c060:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c064:	2200      	movs	r2, #0
 800c066:	2300      	movs	r3, #0
 800c068:	f7f4 fd2e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c06c:	b9d8      	cbnz	r0, 800c0a6 <_printf_float+0x432>
 800c06e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c070:	f108 0201 	add.w	r2, r8, #1
 800c074:	3b01      	subs	r3, #1
 800c076:	4631      	mov	r1, r6
 800c078:	4628      	mov	r0, r5
 800c07a:	47b8      	blx	r7
 800c07c:	3001      	adds	r0, #1
 800c07e:	d10e      	bne.n	800c09e <_printf_float+0x42a>
 800c080:	e659      	b.n	800bd36 <_printf_float+0xc2>
 800c082:	2301      	movs	r3, #1
 800c084:	4652      	mov	r2, sl
 800c086:	4631      	mov	r1, r6
 800c088:	4628      	mov	r0, r5
 800c08a:	47b8      	blx	r7
 800c08c:	3001      	adds	r0, #1
 800c08e:	f43f ae52 	beq.w	800bd36 <_printf_float+0xc2>
 800c092:	f108 0801 	add.w	r8, r8, #1
 800c096:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c098:	3b01      	subs	r3, #1
 800c09a:	4543      	cmp	r3, r8
 800c09c:	dcf1      	bgt.n	800c082 <_printf_float+0x40e>
 800c09e:	464b      	mov	r3, r9
 800c0a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c0a4:	e6dc      	b.n	800be60 <_printf_float+0x1ec>
 800c0a6:	f04f 0800 	mov.w	r8, #0
 800c0aa:	f104 0a1a 	add.w	sl, r4, #26
 800c0ae:	e7f2      	b.n	800c096 <_printf_float+0x422>
 800c0b0:	2301      	movs	r3, #1
 800c0b2:	4642      	mov	r2, r8
 800c0b4:	e7df      	b.n	800c076 <_printf_float+0x402>
 800c0b6:	2301      	movs	r3, #1
 800c0b8:	464a      	mov	r2, r9
 800c0ba:	4631      	mov	r1, r6
 800c0bc:	4628      	mov	r0, r5
 800c0be:	47b8      	blx	r7
 800c0c0:	3001      	adds	r0, #1
 800c0c2:	f43f ae38 	beq.w	800bd36 <_printf_float+0xc2>
 800c0c6:	f108 0801 	add.w	r8, r8, #1
 800c0ca:	68e3      	ldr	r3, [r4, #12]
 800c0cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c0ce:	1a5b      	subs	r3, r3, r1
 800c0d0:	4543      	cmp	r3, r8
 800c0d2:	dcf0      	bgt.n	800c0b6 <_printf_float+0x442>
 800c0d4:	e6fa      	b.n	800becc <_printf_float+0x258>
 800c0d6:	f04f 0800 	mov.w	r8, #0
 800c0da:	f104 0919 	add.w	r9, r4, #25
 800c0de:	e7f4      	b.n	800c0ca <_printf_float+0x456>

0800c0e0 <_printf_common>:
 800c0e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c0e4:	4616      	mov	r6, r2
 800c0e6:	4699      	mov	r9, r3
 800c0e8:	688a      	ldr	r2, [r1, #8]
 800c0ea:	690b      	ldr	r3, [r1, #16]
 800c0ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c0f0:	4293      	cmp	r3, r2
 800c0f2:	bfb8      	it	lt
 800c0f4:	4613      	movlt	r3, r2
 800c0f6:	6033      	str	r3, [r6, #0]
 800c0f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c0fc:	4607      	mov	r7, r0
 800c0fe:	460c      	mov	r4, r1
 800c100:	b10a      	cbz	r2, 800c106 <_printf_common+0x26>
 800c102:	3301      	adds	r3, #1
 800c104:	6033      	str	r3, [r6, #0]
 800c106:	6823      	ldr	r3, [r4, #0]
 800c108:	0699      	lsls	r1, r3, #26
 800c10a:	bf42      	ittt	mi
 800c10c:	6833      	ldrmi	r3, [r6, #0]
 800c10e:	3302      	addmi	r3, #2
 800c110:	6033      	strmi	r3, [r6, #0]
 800c112:	6825      	ldr	r5, [r4, #0]
 800c114:	f015 0506 	ands.w	r5, r5, #6
 800c118:	d106      	bne.n	800c128 <_printf_common+0x48>
 800c11a:	f104 0a19 	add.w	sl, r4, #25
 800c11e:	68e3      	ldr	r3, [r4, #12]
 800c120:	6832      	ldr	r2, [r6, #0]
 800c122:	1a9b      	subs	r3, r3, r2
 800c124:	42ab      	cmp	r3, r5
 800c126:	dc26      	bgt.n	800c176 <_printf_common+0x96>
 800c128:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c12c:	1e13      	subs	r3, r2, #0
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	bf18      	it	ne
 800c132:	2301      	movne	r3, #1
 800c134:	0692      	lsls	r2, r2, #26
 800c136:	d42b      	bmi.n	800c190 <_printf_common+0xb0>
 800c138:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c13c:	4649      	mov	r1, r9
 800c13e:	4638      	mov	r0, r7
 800c140:	47c0      	blx	r8
 800c142:	3001      	adds	r0, #1
 800c144:	d01e      	beq.n	800c184 <_printf_common+0xa4>
 800c146:	6823      	ldr	r3, [r4, #0]
 800c148:	68e5      	ldr	r5, [r4, #12]
 800c14a:	6832      	ldr	r2, [r6, #0]
 800c14c:	f003 0306 	and.w	r3, r3, #6
 800c150:	2b04      	cmp	r3, #4
 800c152:	bf08      	it	eq
 800c154:	1aad      	subeq	r5, r5, r2
 800c156:	68a3      	ldr	r3, [r4, #8]
 800c158:	6922      	ldr	r2, [r4, #16]
 800c15a:	bf0c      	ite	eq
 800c15c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c160:	2500      	movne	r5, #0
 800c162:	4293      	cmp	r3, r2
 800c164:	bfc4      	itt	gt
 800c166:	1a9b      	subgt	r3, r3, r2
 800c168:	18ed      	addgt	r5, r5, r3
 800c16a:	2600      	movs	r6, #0
 800c16c:	341a      	adds	r4, #26
 800c16e:	42b5      	cmp	r5, r6
 800c170:	d11a      	bne.n	800c1a8 <_printf_common+0xc8>
 800c172:	2000      	movs	r0, #0
 800c174:	e008      	b.n	800c188 <_printf_common+0xa8>
 800c176:	2301      	movs	r3, #1
 800c178:	4652      	mov	r2, sl
 800c17a:	4649      	mov	r1, r9
 800c17c:	4638      	mov	r0, r7
 800c17e:	47c0      	blx	r8
 800c180:	3001      	adds	r0, #1
 800c182:	d103      	bne.n	800c18c <_printf_common+0xac>
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c18c:	3501      	adds	r5, #1
 800c18e:	e7c6      	b.n	800c11e <_printf_common+0x3e>
 800c190:	18e1      	adds	r1, r4, r3
 800c192:	1c5a      	adds	r2, r3, #1
 800c194:	2030      	movs	r0, #48	; 0x30
 800c196:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c19a:	4422      	add	r2, r4
 800c19c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c1a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c1a4:	3302      	adds	r3, #2
 800c1a6:	e7c7      	b.n	800c138 <_printf_common+0x58>
 800c1a8:	2301      	movs	r3, #1
 800c1aa:	4622      	mov	r2, r4
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	4638      	mov	r0, r7
 800c1b0:	47c0      	blx	r8
 800c1b2:	3001      	adds	r0, #1
 800c1b4:	d0e6      	beq.n	800c184 <_printf_common+0xa4>
 800c1b6:	3601      	adds	r6, #1
 800c1b8:	e7d9      	b.n	800c16e <_printf_common+0x8e>
	...

0800c1bc <_printf_i>:
 800c1bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c1c0:	7e0f      	ldrb	r7, [r1, #24]
 800c1c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c1c4:	2f78      	cmp	r7, #120	; 0x78
 800c1c6:	4691      	mov	r9, r2
 800c1c8:	4680      	mov	r8, r0
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	469a      	mov	sl, r3
 800c1ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c1d2:	d807      	bhi.n	800c1e4 <_printf_i+0x28>
 800c1d4:	2f62      	cmp	r7, #98	; 0x62
 800c1d6:	d80a      	bhi.n	800c1ee <_printf_i+0x32>
 800c1d8:	2f00      	cmp	r7, #0
 800c1da:	f000 80d8 	beq.w	800c38e <_printf_i+0x1d2>
 800c1de:	2f58      	cmp	r7, #88	; 0x58
 800c1e0:	f000 80a3 	beq.w	800c32a <_printf_i+0x16e>
 800c1e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c1ec:	e03a      	b.n	800c264 <_printf_i+0xa8>
 800c1ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c1f2:	2b15      	cmp	r3, #21
 800c1f4:	d8f6      	bhi.n	800c1e4 <_printf_i+0x28>
 800c1f6:	a101      	add	r1, pc, #4	; (adr r1, 800c1fc <_printf_i+0x40>)
 800c1f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c1fc:	0800c255 	.word	0x0800c255
 800c200:	0800c269 	.word	0x0800c269
 800c204:	0800c1e5 	.word	0x0800c1e5
 800c208:	0800c1e5 	.word	0x0800c1e5
 800c20c:	0800c1e5 	.word	0x0800c1e5
 800c210:	0800c1e5 	.word	0x0800c1e5
 800c214:	0800c269 	.word	0x0800c269
 800c218:	0800c1e5 	.word	0x0800c1e5
 800c21c:	0800c1e5 	.word	0x0800c1e5
 800c220:	0800c1e5 	.word	0x0800c1e5
 800c224:	0800c1e5 	.word	0x0800c1e5
 800c228:	0800c375 	.word	0x0800c375
 800c22c:	0800c299 	.word	0x0800c299
 800c230:	0800c357 	.word	0x0800c357
 800c234:	0800c1e5 	.word	0x0800c1e5
 800c238:	0800c1e5 	.word	0x0800c1e5
 800c23c:	0800c397 	.word	0x0800c397
 800c240:	0800c1e5 	.word	0x0800c1e5
 800c244:	0800c299 	.word	0x0800c299
 800c248:	0800c1e5 	.word	0x0800c1e5
 800c24c:	0800c1e5 	.word	0x0800c1e5
 800c250:	0800c35f 	.word	0x0800c35f
 800c254:	682b      	ldr	r3, [r5, #0]
 800c256:	1d1a      	adds	r2, r3, #4
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	602a      	str	r2, [r5, #0]
 800c25c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c260:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c264:	2301      	movs	r3, #1
 800c266:	e0a3      	b.n	800c3b0 <_printf_i+0x1f4>
 800c268:	6820      	ldr	r0, [r4, #0]
 800c26a:	6829      	ldr	r1, [r5, #0]
 800c26c:	0606      	lsls	r6, r0, #24
 800c26e:	f101 0304 	add.w	r3, r1, #4
 800c272:	d50a      	bpl.n	800c28a <_printf_i+0xce>
 800c274:	680e      	ldr	r6, [r1, #0]
 800c276:	602b      	str	r3, [r5, #0]
 800c278:	2e00      	cmp	r6, #0
 800c27a:	da03      	bge.n	800c284 <_printf_i+0xc8>
 800c27c:	232d      	movs	r3, #45	; 0x2d
 800c27e:	4276      	negs	r6, r6
 800c280:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c284:	485e      	ldr	r0, [pc, #376]	; (800c400 <_printf_i+0x244>)
 800c286:	230a      	movs	r3, #10
 800c288:	e019      	b.n	800c2be <_printf_i+0x102>
 800c28a:	680e      	ldr	r6, [r1, #0]
 800c28c:	602b      	str	r3, [r5, #0]
 800c28e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c292:	bf18      	it	ne
 800c294:	b236      	sxthne	r6, r6
 800c296:	e7ef      	b.n	800c278 <_printf_i+0xbc>
 800c298:	682b      	ldr	r3, [r5, #0]
 800c29a:	6820      	ldr	r0, [r4, #0]
 800c29c:	1d19      	adds	r1, r3, #4
 800c29e:	6029      	str	r1, [r5, #0]
 800c2a0:	0601      	lsls	r1, r0, #24
 800c2a2:	d501      	bpl.n	800c2a8 <_printf_i+0xec>
 800c2a4:	681e      	ldr	r6, [r3, #0]
 800c2a6:	e002      	b.n	800c2ae <_printf_i+0xf2>
 800c2a8:	0646      	lsls	r6, r0, #25
 800c2aa:	d5fb      	bpl.n	800c2a4 <_printf_i+0xe8>
 800c2ac:	881e      	ldrh	r6, [r3, #0]
 800c2ae:	4854      	ldr	r0, [pc, #336]	; (800c400 <_printf_i+0x244>)
 800c2b0:	2f6f      	cmp	r7, #111	; 0x6f
 800c2b2:	bf0c      	ite	eq
 800c2b4:	2308      	moveq	r3, #8
 800c2b6:	230a      	movne	r3, #10
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c2be:	6865      	ldr	r5, [r4, #4]
 800c2c0:	60a5      	str	r5, [r4, #8]
 800c2c2:	2d00      	cmp	r5, #0
 800c2c4:	bfa2      	ittt	ge
 800c2c6:	6821      	ldrge	r1, [r4, #0]
 800c2c8:	f021 0104 	bicge.w	r1, r1, #4
 800c2cc:	6021      	strge	r1, [r4, #0]
 800c2ce:	b90e      	cbnz	r6, 800c2d4 <_printf_i+0x118>
 800c2d0:	2d00      	cmp	r5, #0
 800c2d2:	d04d      	beq.n	800c370 <_printf_i+0x1b4>
 800c2d4:	4615      	mov	r5, r2
 800c2d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800c2da:	fb03 6711 	mls	r7, r3, r1, r6
 800c2de:	5dc7      	ldrb	r7, [r0, r7]
 800c2e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c2e4:	4637      	mov	r7, r6
 800c2e6:	42bb      	cmp	r3, r7
 800c2e8:	460e      	mov	r6, r1
 800c2ea:	d9f4      	bls.n	800c2d6 <_printf_i+0x11a>
 800c2ec:	2b08      	cmp	r3, #8
 800c2ee:	d10b      	bne.n	800c308 <_printf_i+0x14c>
 800c2f0:	6823      	ldr	r3, [r4, #0]
 800c2f2:	07de      	lsls	r6, r3, #31
 800c2f4:	d508      	bpl.n	800c308 <_printf_i+0x14c>
 800c2f6:	6923      	ldr	r3, [r4, #16]
 800c2f8:	6861      	ldr	r1, [r4, #4]
 800c2fa:	4299      	cmp	r1, r3
 800c2fc:	bfde      	ittt	le
 800c2fe:	2330      	movle	r3, #48	; 0x30
 800c300:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c304:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c308:	1b52      	subs	r2, r2, r5
 800c30a:	6122      	str	r2, [r4, #16]
 800c30c:	f8cd a000 	str.w	sl, [sp]
 800c310:	464b      	mov	r3, r9
 800c312:	aa03      	add	r2, sp, #12
 800c314:	4621      	mov	r1, r4
 800c316:	4640      	mov	r0, r8
 800c318:	f7ff fee2 	bl	800c0e0 <_printf_common>
 800c31c:	3001      	adds	r0, #1
 800c31e:	d14c      	bne.n	800c3ba <_printf_i+0x1fe>
 800c320:	f04f 30ff 	mov.w	r0, #4294967295
 800c324:	b004      	add	sp, #16
 800c326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c32a:	4835      	ldr	r0, [pc, #212]	; (800c400 <_printf_i+0x244>)
 800c32c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c330:	6829      	ldr	r1, [r5, #0]
 800c332:	6823      	ldr	r3, [r4, #0]
 800c334:	f851 6b04 	ldr.w	r6, [r1], #4
 800c338:	6029      	str	r1, [r5, #0]
 800c33a:	061d      	lsls	r5, r3, #24
 800c33c:	d514      	bpl.n	800c368 <_printf_i+0x1ac>
 800c33e:	07df      	lsls	r7, r3, #31
 800c340:	bf44      	itt	mi
 800c342:	f043 0320 	orrmi.w	r3, r3, #32
 800c346:	6023      	strmi	r3, [r4, #0]
 800c348:	b91e      	cbnz	r6, 800c352 <_printf_i+0x196>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	f023 0320 	bic.w	r3, r3, #32
 800c350:	6023      	str	r3, [r4, #0]
 800c352:	2310      	movs	r3, #16
 800c354:	e7b0      	b.n	800c2b8 <_printf_i+0xfc>
 800c356:	6823      	ldr	r3, [r4, #0]
 800c358:	f043 0320 	orr.w	r3, r3, #32
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	2378      	movs	r3, #120	; 0x78
 800c360:	4828      	ldr	r0, [pc, #160]	; (800c404 <_printf_i+0x248>)
 800c362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c366:	e7e3      	b.n	800c330 <_printf_i+0x174>
 800c368:	0659      	lsls	r1, r3, #25
 800c36a:	bf48      	it	mi
 800c36c:	b2b6      	uxthmi	r6, r6
 800c36e:	e7e6      	b.n	800c33e <_printf_i+0x182>
 800c370:	4615      	mov	r5, r2
 800c372:	e7bb      	b.n	800c2ec <_printf_i+0x130>
 800c374:	682b      	ldr	r3, [r5, #0]
 800c376:	6826      	ldr	r6, [r4, #0]
 800c378:	6961      	ldr	r1, [r4, #20]
 800c37a:	1d18      	adds	r0, r3, #4
 800c37c:	6028      	str	r0, [r5, #0]
 800c37e:	0635      	lsls	r5, r6, #24
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	d501      	bpl.n	800c388 <_printf_i+0x1cc>
 800c384:	6019      	str	r1, [r3, #0]
 800c386:	e002      	b.n	800c38e <_printf_i+0x1d2>
 800c388:	0670      	lsls	r0, r6, #25
 800c38a:	d5fb      	bpl.n	800c384 <_printf_i+0x1c8>
 800c38c:	8019      	strh	r1, [r3, #0]
 800c38e:	2300      	movs	r3, #0
 800c390:	6123      	str	r3, [r4, #16]
 800c392:	4615      	mov	r5, r2
 800c394:	e7ba      	b.n	800c30c <_printf_i+0x150>
 800c396:	682b      	ldr	r3, [r5, #0]
 800c398:	1d1a      	adds	r2, r3, #4
 800c39a:	602a      	str	r2, [r5, #0]
 800c39c:	681d      	ldr	r5, [r3, #0]
 800c39e:	6862      	ldr	r2, [r4, #4]
 800c3a0:	2100      	movs	r1, #0
 800c3a2:	4628      	mov	r0, r5
 800c3a4:	f7f3 ff1c 	bl	80001e0 <memchr>
 800c3a8:	b108      	cbz	r0, 800c3ae <_printf_i+0x1f2>
 800c3aa:	1b40      	subs	r0, r0, r5
 800c3ac:	6060      	str	r0, [r4, #4]
 800c3ae:	6863      	ldr	r3, [r4, #4]
 800c3b0:	6123      	str	r3, [r4, #16]
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c3b8:	e7a8      	b.n	800c30c <_printf_i+0x150>
 800c3ba:	6923      	ldr	r3, [r4, #16]
 800c3bc:	462a      	mov	r2, r5
 800c3be:	4649      	mov	r1, r9
 800c3c0:	4640      	mov	r0, r8
 800c3c2:	47d0      	blx	sl
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d0ab      	beq.n	800c320 <_printf_i+0x164>
 800c3c8:	6823      	ldr	r3, [r4, #0]
 800c3ca:	079b      	lsls	r3, r3, #30
 800c3cc:	d413      	bmi.n	800c3f6 <_printf_i+0x23a>
 800c3ce:	68e0      	ldr	r0, [r4, #12]
 800c3d0:	9b03      	ldr	r3, [sp, #12]
 800c3d2:	4298      	cmp	r0, r3
 800c3d4:	bfb8      	it	lt
 800c3d6:	4618      	movlt	r0, r3
 800c3d8:	e7a4      	b.n	800c324 <_printf_i+0x168>
 800c3da:	2301      	movs	r3, #1
 800c3dc:	4632      	mov	r2, r6
 800c3de:	4649      	mov	r1, r9
 800c3e0:	4640      	mov	r0, r8
 800c3e2:	47d0      	blx	sl
 800c3e4:	3001      	adds	r0, #1
 800c3e6:	d09b      	beq.n	800c320 <_printf_i+0x164>
 800c3e8:	3501      	adds	r5, #1
 800c3ea:	68e3      	ldr	r3, [r4, #12]
 800c3ec:	9903      	ldr	r1, [sp, #12]
 800c3ee:	1a5b      	subs	r3, r3, r1
 800c3f0:	42ab      	cmp	r3, r5
 800c3f2:	dcf2      	bgt.n	800c3da <_printf_i+0x21e>
 800c3f4:	e7eb      	b.n	800c3ce <_printf_i+0x212>
 800c3f6:	2500      	movs	r5, #0
 800c3f8:	f104 0619 	add.w	r6, r4, #25
 800c3fc:	e7f5      	b.n	800c3ea <_printf_i+0x22e>
 800c3fe:	bf00      	nop
 800c400:	080110c6 	.word	0x080110c6
 800c404:	080110d7 	.word	0x080110d7

0800c408 <_scanf_float>:
 800c408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c40c:	b087      	sub	sp, #28
 800c40e:	4617      	mov	r7, r2
 800c410:	9303      	str	r3, [sp, #12]
 800c412:	688b      	ldr	r3, [r1, #8]
 800c414:	1e5a      	subs	r2, r3, #1
 800c416:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c41a:	bf83      	ittte	hi
 800c41c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c420:	195b      	addhi	r3, r3, r5
 800c422:	9302      	strhi	r3, [sp, #8]
 800c424:	2300      	movls	r3, #0
 800c426:	bf86      	itte	hi
 800c428:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c42c:	608b      	strhi	r3, [r1, #8]
 800c42e:	9302      	strls	r3, [sp, #8]
 800c430:	680b      	ldr	r3, [r1, #0]
 800c432:	468b      	mov	fp, r1
 800c434:	2500      	movs	r5, #0
 800c436:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c43a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c43e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c442:	4680      	mov	r8, r0
 800c444:	460c      	mov	r4, r1
 800c446:	465e      	mov	r6, fp
 800c448:	46aa      	mov	sl, r5
 800c44a:	46a9      	mov	r9, r5
 800c44c:	9501      	str	r5, [sp, #4]
 800c44e:	68a2      	ldr	r2, [r4, #8]
 800c450:	b152      	cbz	r2, 800c468 <_scanf_float+0x60>
 800c452:	683b      	ldr	r3, [r7, #0]
 800c454:	781b      	ldrb	r3, [r3, #0]
 800c456:	2b4e      	cmp	r3, #78	; 0x4e
 800c458:	d864      	bhi.n	800c524 <_scanf_float+0x11c>
 800c45a:	2b40      	cmp	r3, #64	; 0x40
 800c45c:	d83c      	bhi.n	800c4d8 <_scanf_float+0xd0>
 800c45e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c462:	b2c8      	uxtb	r0, r1
 800c464:	280e      	cmp	r0, #14
 800c466:	d93a      	bls.n	800c4de <_scanf_float+0xd6>
 800c468:	f1b9 0f00 	cmp.w	r9, #0
 800c46c:	d003      	beq.n	800c476 <_scanf_float+0x6e>
 800c46e:	6823      	ldr	r3, [r4, #0]
 800c470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c474:	6023      	str	r3, [r4, #0]
 800c476:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c47a:	f1ba 0f01 	cmp.w	sl, #1
 800c47e:	f200 8113 	bhi.w	800c6a8 <_scanf_float+0x2a0>
 800c482:	455e      	cmp	r6, fp
 800c484:	f200 8105 	bhi.w	800c692 <_scanf_float+0x28a>
 800c488:	2501      	movs	r5, #1
 800c48a:	4628      	mov	r0, r5
 800c48c:	b007      	add	sp, #28
 800c48e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c492:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c496:	2a0d      	cmp	r2, #13
 800c498:	d8e6      	bhi.n	800c468 <_scanf_float+0x60>
 800c49a:	a101      	add	r1, pc, #4	; (adr r1, 800c4a0 <_scanf_float+0x98>)
 800c49c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c4a0:	0800c5df 	.word	0x0800c5df
 800c4a4:	0800c469 	.word	0x0800c469
 800c4a8:	0800c469 	.word	0x0800c469
 800c4ac:	0800c469 	.word	0x0800c469
 800c4b0:	0800c63f 	.word	0x0800c63f
 800c4b4:	0800c617 	.word	0x0800c617
 800c4b8:	0800c469 	.word	0x0800c469
 800c4bc:	0800c469 	.word	0x0800c469
 800c4c0:	0800c5ed 	.word	0x0800c5ed
 800c4c4:	0800c469 	.word	0x0800c469
 800c4c8:	0800c469 	.word	0x0800c469
 800c4cc:	0800c469 	.word	0x0800c469
 800c4d0:	0800c469 	.word	0x0800c469
 800c4d4:	0800c5a5 	.word	0x0800c5a5
 800c4d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c4dc:	e7db      	b.n	800c496 <_scanf_float+0x8e>
 800c4de:	290e      	cmp	r1, #14
 800c4e0:	d8c2      	bhi.n	800c468 <_scanf_float+0x60>
 800c4e2:	a001      	add	r0, pc, #4	; (adr r0, 800c4e8 <_scanf_float+0xe0>)
 800c4e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c4e8:	0800c597 	.word	0x0800c597
 800c4ec:	0800c469 	.word	0x0800c469
 800c4f0:	0800c597 	.word	0x0800c597
 800c4f4:	0800c62b 	.word	0x0800c62b
 800c4f8:	0800c469 	.word	0x0800c469
 800c4fc:	0800c545 	.word	0x0800c545
 800c500:	0800c581 	.word	0x0800c581
 800c504:	0800c581 	.word	0x0800c581
 800c508:	0800c581 	.word	0x0800c581
 800c50c:	0800c581 	.word	0x0800c581
 800c510:	0800c581 	.word	0x0800c581
 800c514:	0800c581 	.word	0x0800c581
 800c518:	0800c581 	.word	0x0800c581
 800c51c:	0800c581 	.word	0x0800c581
 800c520:	0800c581 	.word	0x0800c581
 800c524:	2b6e      	cmp	r3, #110	; 0x6e
 800c526:	d809      	bhi.n	800c53c <_scanf_float+0x134>
 800c528:	2b60      	cmp	r3, #96	; 0x60
 800c52a:	d8b2      	bhi.n	800c492 <_scanf_float+0x8a>
 800c52c:	2b54      	cmp	r3, #84	; 0x54
 800c52e:	d077      	beq.n	800c620 <_scanf_float+0x218>
 800c530:	2b59      	cmp	r3, #89	; 0x59
 800c532:	d199      	bne.n	800c468 <_scanf_float+0x60>
 800c534:	2d07      	cmp	r5, #7
 800c536:	d197      	bne.n	800c468 <_scanf_float+0x60>
 800c538:	2508      	movs	r5, #8
 800c53a:	e029      	b.n	800c590 <_scanf_float+0x188>
 800c53c:	2b74      	cmp	r3, #116	; 0x74
 800c53e:	d06f      	beq.n	800c620 <_scanf_float+0x218>
 800c540:	2b79      	cmp	r3, #121	; 0x79
 800c542:	e7f6      	b.n	800c532 <_scanf_float+0x12a>
 800c544:	6821      	ldr	r1, [r4, #0]
 800c546:	05c8      	lsls	r0, r1, #23
 800c548:	d51a      	bpl.n	800c580 <_scanf_float+0x178>
 800c54a:	9b02      	ldr	r3, [sp, #8]
 800c54c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c550:	6021      	str	r1, [r4, #0]
 800c552:	f109 0901 	add.w	r9, r9, #1
 800c556:	b11b      	cbz	r3, 800c560 <_scanf_float+0x158>
 800c558:	3b01      	subs	r3, #1
 800c55a:	3201      	adds	r2, #1
 800c55c:	9302      	str	r3, [sp, #8]
 800c55e:	60a2      	str	r2, [r4, #8]
 800c560:	68a3      	ldr	r3, [r4, #8]
 800c562:	3b01      	subs	r3, #1
 800c564:	60a3      	str	r3, [r4, #8]
 800c566:	6923      	ldr	r3, [r4, #16]
 800c568:	3301      	adds	r3, #1
 800c56a:	6123      	str	r3, [r4, #16]
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	3b01      	subs	r3, #1
 800c570:	2b00      	cmp	r3, #0
 800c572:	607b      	str	r3, [r7, #4]
 800c574:	f340 8084 	ble.w	800c680 <_scanf_float+0x278>
 800c578:	683b      	ldr	r3, [r7, #0]
 800c57a:	3301      	adds	r3, #1
 800c57c:	603b      	str	r3, [r7, #0]
 800c57e:	e766      	b.n	800c44e <_scanf_float+0x46>
 800c580:	eb1a 0f05 	cmn.w	sl, r5
 800c584:	f47f af70 	bne.w	800c468 <_scanf_float+0x60>
 800c588:	6822      	ldr	r2, [r4, #0]
 800c58a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c58e:	6022      	str	r2, [r4, #0]
 800c590:	f806 3b01 	strb.w	r3, [r6], #1
 800c594:	e7e4      	b.n	800c560 <_scanf_float+0x158>
 800c596:	6822      	ldr	r2, [r4, #0]
 800c598:	0610      	lsls	r0, r2, #24
 800c59a:	f57f af65 	bpl.w	800c468 <_scanf_float+0x60>
 800c59e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c5a2:	e7f4      	b.n	800c58e <_scanf_float+0x186>
 800c5a4:	f1ba 0f00 	cmp.w	sl, #0
 800c5a8:	d10e      	bne.n	800c5c8 <_scanf_float+0x1c0>
 800c5aa:	f1b9 0f00 	cmp.w	r9, #0
 800c5ae:	d10e      	bne.n	800c5ce <_scanf_float+0x1c6>
 800c5b0:	6822      	ldr	r2, [r4, #0]
 800c5b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c5b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c5ba:	d108      	bne.n	800c5ce <_scanf_float+0x1c6>
 800c5bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c5c0:	6022      	str	r2, [r4, #0]
 800c5c2:	f04f 0a01 	mov.w	sl, #1
 800c5c6:	e7e3      	b.n	800c590 <_scanf_float+0x188>
 800c5c8:	f1ba 0f02 	cmp.w	sl, #2
 800c5cc:	d055      	beq.n	800c67a <_scanf_float+0x272>
 800c5ce:	2d01      	cmp	r5, #1
 800c5d0:	d002      	beq.n	800c5d8 <_scanf_float+0x1d0>
 800c5d2:	2d04      	cmp	r5, #4
 800c5d4:	f47f af48 	bne.w	800c468 <_scanf_float+0x60>
 800c5d8:	3501      	adds	r5, #1
 800c5da:	b2ed      	uxtb	r5, r5
 800c5dc:	e7d8      	b.n	800c590 <_scanf_float+0x188>
 800c5de:	f1ba 0f01 	cmp.w	sl, #1
 800c5e2:	f47f af41 	bne.w	800c468 <_scanf_float+0x60>
 800c5e6:	f04f 0a02 	mov.w	sl, #2
 800c5ea:	e7d1      	b.n	800c590 <_scanf_float+0x188>
 800c5ec:	b97d      	cbnz	r5, 800c60e <_scanf_float+0x206>
 800c5ee:	f1b9 0f00 	cmp.w	r9, #0
 800c5f2:	f47f af3c 	bne.w	800c46e <_scanf_float+0x66>
 800c5f6:	6822      	ldr	r2, [r4, #0]
 800c5f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c5fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c600:	f47f af39 	bne.w	800c476 <_scanf_float+0x6e>
 800c604:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c608:	6022      	str	r2, [r4, #0]
 800c60a:	2501      	movs	r5, #1
 800c60c:	e7c0      	b.n	800c590 <_scanf_float+0x188>
 800c60e:	2d03      	cmp	r5, #3
 800c610:	d0e2      	beq.n	800c5d8 <_scanf_float+0x1d0>
 800c612:	2d05      	cmp	r5, #5
 800c614:	e7de      	b.n	800c5d4 <_scanf_float+0x1cc>
 800c616:	2d02      	cmp	r5, #2
 800c618:	f47f af26 	bne.w	800c468 <_scanf_float+0x60>
 800c61c:	2503      	movs	r5, #3
 800c61e:	e7b7      	b.n	800c590 <_scanf_float+0x188>
 800c620:	2d06      	cmp	r5, #6
 800c622:	f47f af21 	bne.w	800c468 <_scanf_float+0x60>
 800c626:	2507      	movs	r5, #7
 800c628:	e7b2      	b.n	800c590 <_scanf_float+0x188>
 800c62a:	6822      	ldr	r2, [r4, #0]
 800c62c:	0591      	lsls	r1, r2, #22
 800c62e:	f57f af1b 	bpl.w	800c468 <_scanf_float+0x60>
 800c632:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c636:	6022      	str	r2, [r4, #0]
 800c638:	f8cd 9004 	str.w	r9, [sp, #4]
 800c63c:	e7a8      	b.n	800c590 <_scanf_float+0x188>
 800c63e:	6822      	ldr	r2, [r4, #0]
 800c640:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c644:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c648:	d006      	beq.n	800c658 <_scanf_float+0x250>
 800c64a:	0550      	lsls	r0, r2, #21
 800c64c:	f57f af0c 	bpl.w	800c468 <_scanf_float+0x60>
 800c650:	f1b9 0f00 	cmp.w	r9, #0
 800c654:	f43f af0f 	beq.w	800c476 <_scanf_float+0x6e>
 800c658:	0591      	lsls	r1, r2, #22
 800c65a:	bf58      	it	pl
 800c65c:	9901      	ldrpl	r1, [sp, #4]
 800c65e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c662:	bf58      	it	pl
 800c664:	eba9 0101 	subpl.w	r1, r9, r1
 800c668:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c66c:	bf58      	it	pl
 800c66e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c672:	6022      	str	r2, [r4, #0]
 800c674:	f04f 0900 	mov.w	r9, #0
 800c678:	e78a      	b.n	800c590 <_scanf_float+0x188>
 800c67a:	f04f 0a03 	mov.w	sl, #3
 800c67e:	e787      	b.n	800c590 <_scanf_float+0x188>
 800c680:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c684:	4639      	mov	r1, r7
 800c686:	4640      	mov	r0, r8
 800c688:	4798      	blx	r3
 800c68a:	2800      	cmp	r0, #0
 800c68c:	f43f aedf 	beq.w	800c44e <_scanf_float+0x46>
 800c690:	e6ea      	b.n	800c468 <_scanf_float+0x60>
 800c692:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c696:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c69a:	463a      	mov	r2, r7
 800c69c:	4640      	mov	r0, r8
 800c69e:	4798      	blx	r3
 800c6a0:	6923      	ldr	r3, [r4, #16]
 800c6a2:	3b01      	subs	r3, #1
 800c6a4:	6123      	str	r3, [r4, #16]
 800c6a6:	e6ec      	b.n	800c482 <_scanf_float+0x7a>
 800c6a8:	1e6b      	subs	r3, r5, #1
 800c6aa:	2b06      	cmp	r3, #6
 800c6ac:	d825      	bhi.n	800c6fa <_scanf_float+0x2f2>
 800c6ae:	2d02      	cmp	r5, #2
 800c6b0:	d836      	bhi.n	800c720 <_scanf_float+0x318>
 800c6b2:	455e      	cmp	r6, fp
 800c6b4:	f67f aee8 	bls.w	800c488 <_scanf_float+0x80>
 800c6b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c6c0:	463a      	mov	r2, r7
 800c6c2:	4640      	mov	r0, r8
 800c6c4:	4798      	blx	r3
 800c6c6:	6923      	ldr	r3, [r4, #16]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	6123      	str	r3, [r4, #16]
 800c6cc:	e7f1      	b.n	800c6b2 <_scanf_float+0x2aa>
 800c6ce:	9802      	ldr	r0, [sp, #8]
 800c6d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c6d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c6d8:	9002      	str	r0, [sp, #8]
 800c6da:	463a      	mov	r2, r7
 800c6dc:	4640      	mov	r0, r8
 800c6de:	4798      	blx	r3
 800c6e0:	6923      	ldr	r3, [r4, #16]
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	6123      	str	r3, [r4, #16]
 800c6e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c6ea:	fa5f fa8a 	uxtb.w	sl, sl
 800c6ee:	f1ba 0f02 	cmp.w	sl, #2
 800c6f2:	d1ec      	bne.n	800c6ce <_scanf_float+0x2c6>
 800c6f4:	3d03      	subs	r5, #3
 800c6f6:	b2ed      	uxtb	r5, r5
 800c6f8:	1b76      	subs	r6, r6, r5
 800c6fa:	6823      	ldr	r3, [r4, #0]
 800c6fc:	05da      	lsls	r2, r3, #23
 800c6fe:	d52f      	bpl.n	800c760 <_scanf_float+0x358>
 800c700:	055b      	lsls	r3, r3, #21
 800c702:	d510      	bpl.n	800c726 <_scanf_float+0x31e>
 800c704:	455e      	cmp	r6, fp
 800c706:	f67f aebf 	bls.w	800c488 <_scanf_float+0x80>
 800c70a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c70e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c712:	463a      	mov	r2, r7
 800c714:	4640      	mov	r0, r8
 800c716:	4798      	blx	r3
 800c718:	6923      	ldr	r3, [r4, #16]
 800c71a:	3b01      	subs	r3, #1
 800c71c:	6123      	str	r3, [r4, #16]
 800c71e:	e7f1      	b.n	800c704 <_scanf_float+0x2fc>
 800c720:	46aa      	mov	sl, r5
 800c722:	9602      	str	r6, [sp, #8]
 800c724:	e7df      	b.n	800c6e6 <_scanf_float+0x2de>
 800c726:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c72a:	6923      	ldr	r3, [r4, #16]
 800c72c:	2965      	cmp	r1, #101	; 0x65
 800c72e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c732:	f106 35ff 	add.w	r5, r6, #4294967295
 800c736:	6123      	str	r3, [r4, #16]
 800c738:	d00c      	beq.n	800c754 <_scanf_float+0x34c>
 800c73a:	2945      	cmp	r1, #69	; 0x45
 800c73c:	d00a      	beq.n	800c754 <_scanf_float+0x34c>
 800c73e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c742:	463a      	mov	r2, r7
 800c744:	4640      	mov	r0, r8
 800c746:	4798      	blx	r3
 800c748:	6923      	ldr	r3, [r4, #16]
 800c74a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c74e:	3b01      	subs	r3, #1
 800c750:	1eb5      	subs	r5, r6, #2
 800c752:	6123      	str	r3, [r4, #16]
 800c754:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c758:	463a      	mov	r2, r7
 800c75a:	4640      	mov	r0, r8
 800c75c:	4798      	blx	r3
 800c75e:	462e      	mov	r6, r5
 800c760:	6825      	ldr	r5, [r4, #0]
 800c762:	f015 0510 	ands.w	r5, r5, #16
 800c766:	d159      	bne.n	800c81c <_scanf_float+0x414>
 800c768:	7035      	strb	r5, [r6, #0]
 800c76a:	6823      	ldr	r3, [r4, #0]
 800c76c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c770:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c774:	d11b      	bne.n	800c7ae <_scanf_float+0x3a6>
 800c776:	9b01      	ldr	r3, [sp, #4]
 800c778:	454b      	cmp	r3, r9
 800c77a:	eba3 0209 	sub.w	r2, r3, r9
 800c77e:	d123      	bne.n	800c7c8 <_scanf_float+0x3c0>
 800c780:	2200      	movs	r2, #0
 800c782:	4659      	mov	r1, fp
 800c784:	4640      	mov	r0, r8
 800c786:	f000 fea1 	bl	800d4cc <_strtod_r>
 800c78a:	6822      	ldr	r2, [r4, #0]
 800c78c:	9b03      	ldr	r3, [sp, #12]
 800c78e:	f012 0f02 	tst.w	r2, #2
 800c792:	ec57 6b10 	vmov	r6, r7, d0
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	d021      	beq.n	800c7de <_scanf_float+0x3d6>
 800c79a:	9903      	ldr	r1, [sp, #12]
 800c79c:	1d1a      	adds	r2, r3, #4
 800c79e:	600a      	str	r2, [r1, #0]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	e9c3 6700 	strd	r6, r7, [r3]
 800c7a6:	68e3      	ldr	r3, [r4, #12]
 800c7a8:	3301      	adds	r3, #1
 800c7aa:	60e3      	str	r3, [r4, #12]
 800c7ac:	e66d      	b.n	800c48a <_scanf_float+0x82>
 800c7ae:	9b04      	ldr	r3, [sp, #16]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d0e5      	beq.n	800c780 <_scanf_float+0x378>
 800c7b4:	9905      	ldr	r1, [sp, #20]
 800c7b6:	230a      	movs	r3, #10
 800c7b8:	462a      	mov	r2, r5
 800c7ba:	3101      	adds	r1, #1
 800c7bc:	4640      	mov	r0, r8
 800c7be:	f000 ff0d 	bl	800d5dc <_strtol_r>
 800c7c2:	9b04      	ldr	r3, [sp, #16]
 800c7c4:	9e05      	ldr	r6, [sp, #20]
 800c7c6:	1ac2      	subs	r2, r0, r3
 800c7c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c7cc:	429e      	cmp	r6, r3
 800c7ce:	bf28      	it	cs
 800c7d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c7d4:	4912      	ldr	r1, [pc, #72]	; (800c820 <_scanf_float+0x418>)
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f000 f82c 	bl	800c834 <siprintf>
 800c7dc:	e7d0      	b.n	800c780 <_scanf_float+0x378>
 800c7de:	9903      	ldr	r1, [sp, #12]
 800c7e0:	f012 0f04 	tst.w	r2, #4
 800c7e4:	f103 0204 	add.w	r2, r3, #4
 800c7e8:	600a      	str	r2, [r1, #0]
 800c7ea:	d1d9      	bne.n	800c7a0 <_scanf_float+0x398>
 800c7ec:	f8d3 8000 	ldr.w	r8, [r3]
 800c7f0:	ee10 2a10 	vmov	r2, s0
 800c7f4:	ee10 0a10 	vmov	r0, s0
 800c7f8:	463b      	mov	r3, r7
 800c7fa:	4639      	mov	r1, r7
 800c7fc:	f7f4 f996 	bl	8000b2c <__aeabi_dcmpun>
 800c800:	b128      	cbz	r0, 800c80e <_scanf_float+0x406>
 800c802:	4808      	ldr	r0, [pc, #32]	; (800c824 <_scanf_float+0x41c>)
 800c804:	f000 f810 	bl	800c828 <nanf>
 800c808:	ed88 0a00 	vstr	s0, [r8]
 800c80c:	e7cb      	b.n	800c7a6 <_scanf_float+0x39e>
 800c80e:	4630      	mov	r0, r6
 800c810:	4639      	mov	r1, r7
 800c812:	f7f4 f9e9 	bl	8000be8 <__aeabi_d2f>
 800c816:	f8c8 0000 	str.w	r0, [r8]
 800c81a:	e7c4      	b.n	800c7a6 <_scanf_float+0x39e>
 800c81c:	2500      	movs	r5, #0
 800c81e:	e634      	b.n	800c48a <_scanf_float+0x82>
 800c820:	080110e8 	.word	0x080110e8
 800c824:	080114f0 	.word	0x080114f0

0800c828 <nanf>:
 800c828:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c830 <nanf+0x8>
 800c82c:	4770      	bx	lr
 800c82e:	bf00      	nop
 800c830:	7fc00000 	.word	0x7fc00000

0800c834 <siprintf>:
 800c834:	b40e      	push	{r1, r2, r3}
 800c836:	b500      	push	{lr}
 800c838:	b09c      	sub	sp, #112	; 0x70
 800c83a:	ab1d      	add	r3, sp, #116	; 0x74
 800c83c:	9002      	str	r0, [sp, #8]
 800c83e:	9006      	str	r0, [sp, #24]
 800c840:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c844:	4809      	ldr	r0, [pc, #36]	; (800c86c <siprintf+0x38>)
 800c846:	9107      	str	r1, [sp, #28]
 800c848:	9104      	str	r1, [sp, #16]
 800c84a:	4909      	ldr	r1, [pc, #36]	; (800c870 <siprintf+0x3c>)
 800c84c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c850:	9105      	str	r1, [sp, #20]
 800c852:	6800      	ldr	r0, [r0, #0]
 800c854:	9301      	str	r3, [sp, #4]
 800c856:	a902      	add	r1, sp, #8
 800c858:	f002 fede 	bl	800f618 <_svfiprintf_r>
 800c85c:	9b02      	ldr	r3, [sp, #8]
 800c85e:	2200      	movs	r2, #0
 800c860:	701a      	strb	r2, [r3, #0]
 800c862:	b01c      	add	sp, #112	; 0x70
 800c864:	f85d eb04 	ldr.w	lr, [sp], #4
 800c868:	b003      	add	sp, #12
 800c86a:	4770      	bx	lr
 800c86c:	20000010 	.word	0x20000010
 800c870:	ffff0208 	.word	0xffff0208

0800c874 <strcpy>:
 800c874:	4603      	mov	r3, r0
 800c876:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c87a:	f803 2b01 	strb.w	r2, [r3], #1
 800c87e:	2a00      	cmp	r2, #0
 800c880:	d1f9      	bne.n	800c876 <strcpy+0x2>
 800c882:	4770      	bx	lr

0800c884 <sulp>:
 800c884:	b570      	push	{r4, r5, r6, lr}
 800c886:	4604      	mov	r4, r0
 800c888:	460d      	mov	r5, r1
 800c88a:	ec45 4b10 	vmov	d0, r4, r5
 800c88e:	4616      	mov	r6, r2
 800c890:	f002 fc20 	bl	800f0d4 <__ulp>
 800c894:	ec51 0b10 	vmov	r0, r1, d0
 800c898:	b17e      	cbz	r6, 800c8ba <sulp+0x36>
 800c89a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c89e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	dd09      	ble.n	800c8ba <sulp+0x36>
 800c8a6:	051b      	lsls	r3, r3, #20
 800c8a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c8ac:	2400      	movs	r4, #0
 800c8ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c8b2:	4622      	mov	r2, r4
 800c8b4:	462b      	mov	r3, r5
 800c8b6:	f7f3 fe9f 	bl	80005f8 <__aeabi_dmul>
 800c8ba:	bd70      	pop	{r4, r5, r6, pc}
 800c8bc:	0000      	movs	r0, r0
	...

0800c8c0 <_strtod_l>:
 800c8c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8c4:	ed2d 8b02 	vpush	{d8}
 800c8c8:	b09d      	sub	sp, #116	; 0x74
 800c8ca:	461f      	mov	r7, r3
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9318      	str	r3, [sp, #96]	; 0x60
 800c8d0:	4ba2      	ldr	r3, [pc, #648]	; (800cb5c <_strtod_l+0x29c>)
 800c8d2:	9213      	str	r2, [sp, #76]	; 0x4c
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	9305      	str	r3, [sp, #20]
 800c8d8:	4604      	mov	r4, r0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	4688      	mov	r8, r1
 800c8de:	f7f3 fc77 	bl	80001d0 <strlen>
 800c8e2:	f04f 0a00 	mov.w	sl, #0
 800c8e6:	4605      	mov	r5, r0
 800c8e8:	f04f 0b00 	mov.w	fp, #0
 800c8ec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c8f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c8f2:	781a      	ldrb	r2, [r3, #0]
 800c8f4:	2a2b      	cmp	r2, #43	; 0x2b
 800c8f6:	d04e      	beq.n	800c996 <_strtod_l+0xd6>
 800c8f8:	d83b      	bhi.n	800c972 <_strtod_l+0xb2>
 800c8fa:	2a0d      	cmp	r2, #13
 800c8fc:	d834      	bhi.n	800c968 <_strtod_l+0xa8>
 800c8fe:	2a08      	cmp	r2, #8
 800c900:	d834      	bhi.n	800c96c <_strtod_l+0xac>
 800c902:	2a00      	cmp	r2, #0
 800c904:	d03e      	beq.n	800c984 <_strtod_l+0xc4>
 800c906:	2300      	movs	r3, #0
 800c908:	930a      	str	r3, [sp, #40]	; 0x28
 800c90a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800c90c:	7833      	ldrb	r3, [r6, #0]
 800c90e:	2b30      	cmp	r3, #48	; 0x30
 800c910:	f040 80b0 	bne.w	800ca74 <_strtod_l+0x1b4>
 800c914:	7873      	ldrb	r3, [r6, #1]
 800c916:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c91a:	2b58      	cmp	r3, #88	; 0x58
 800c91c:	d168      	bne.n	800c9f0 <_strtod_l+0x130>
 800c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c920:	9301      	str	r3, [sp, #4]
 800c922:	ab18      	add	r3, sp, #96	; 0x60
 800c924:	9702      	str	r7, [sp, #8]
 800c926:	9300      	str	r3, [sp, #0]
 800c928:	4a8d      	ldr	r2, [pc, #564]	; (800cb60 <_strtod_l+0x2a0>)
 800c92a:	ab19      	add	r3, sp, #100	; 0x64
 800c92c:	a917      	add	r1, sp, #92	; 0x5c
 800c92e:	4620      	mov	r0, r4
 800c930:	f001 fd38 	bl	800e3a4 <__gethex>
 800c934:	f010 0707 	ands.w	r7, r0, #7
 800c938:	4605      	mov	r5, r0
 800c93a:	d005      	beq.n	800c948 <_strtod_l+0x88>
 800c93c:	2f06      	cmp	r7, #6
 800c93e:	d12c      	bne.n	800c99a <_strtod_l+0xda>
 800c940:	3601      	adds	r6, #1
 800c942:	2300      	movs	r3, #0
 800c944:	9617      	str	r6, [sp, #92]	; 0x5c
 800c946:	930a      	str	r3, [sp, #40]	; 0x28
 800c948:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	f040 8590 	bne.w	800d470 <_strtod_l+0xbb0>
 800c950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c952:	b1eb      	cbz	r3, 800c990 <_strtod_l+0xd0>
 800c954:	4652      	mov	r2, sl
 800c956:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c95a:	ec43 2b10 	vmov	d0, r2, r3
 800c95e:	b01d      	add	sp, #116	; 0x74
 800c960:	ecbd 8b02 	vpop	{d8}
 800c964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c968:	2a20      	cmp	r2, #32
 800c96a:	d1cc      	bne.n	800c906 <_strtod_l+0x46>
 800c96c:	3301      	adds	r3, #1
 800c96e:	9317      	str	r3, [sp, #92]	; 0x5c
 800c970:	e7be      	b.n	800c8f0 <_strtod_l+0x30>
 800c972:	2a2d      	cmp	r2, #45	; 0x2d
 800c974:	d1c7      	bne.n	800c906 <_strtod_l+0x46>
 800c976:	2201      	movs	r2, #1
 800c978:	920a      	str	r2, [sp, #40]	; 0x28
 800c97a:	1c5a      	adds	r2, r3, #1
 800c97c:	9217      	str	r2, [sp, #92]	; 0x5c
 800c97e:	785b      	ldrb	r3, [r3, #1]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d1c2      	bne.n	800c90a <_strtod_l+0x4a>
 800c984:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c986:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f040 856e 	bne.w	800d46c <_strtod_l+0xbac>
 800c990:	4652      	mov	r2, sl
 800c992:	465b      	mov	r3, fp
 800c994:	e7e1      	b.n	800c95a <_strtod_l+0x9a>
 800c996:	2200      	movs	r2, #0
 800c998:	e7ee      	b.n	800c978 <_strtod_l+0xb8>
 800c99a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c99c:	b13a      	cbz	r2, 800c9ae <_strtod_l+0xee>
 800c99e:	2135      	movs	r1, #53	; 0x35
 800c9a0:	a81a      	add	r0, sp, #104	; 0x68
 800c9a2:	f002 fca2 	bl	800f2ea <__copybits>
 800c9a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c9a8:	4620      	mov	r0, r4
 800c9aa:	f002 f861 	bl	800ea70 <_Bfree>
 800c9ae:	3f01      	subs	r7, #1
 800c9b0:	2f04      	cmp	r7, #4
 800c9b2:	d806      	bhi.n	800c9c2 <_strtod_l+0x102>
 800c9b4:	e8df f007 	tbb	[pc, r7]
 800c9b8:	1714030a 	.word	0x1714030a
 800c9bc:	0a          	.byte	0x0a
 800c9bd:	00          	.byte	0x00
 800c9be:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800c9c2:	0728      	lsls	r0, r5, #28
 800c9c4:	d5c0      	bpl.n	800c948 <_strtod_l+0x88>
 800c9c6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c9ca:	e7bd      	b.n	800c948 <_strtod_l+0x88>
 800c9cc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800c9d0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c9d2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c9d6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c9da:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c9de:	e7f0      	b.n	800c9c2 <_strtod_l+0x102>
 800c9e0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800cb64 <_strtod_l+0x2a4>
 800c9e4:	e7ed      	b.n	800c9c2 <_strtod_l+0x102>
 800c9e6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c9ea:	f04f 3aff 	mov.w	sl, #4294967295
 800c9ee:	e7e8      	b.n	800c9c2 <_strtod_l+0x102>
 800c9f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c9f2:	1c5a      	adds	r2, r3, #1
 800c9f4:	9217      	str	r2, [sp, #92]	; 0x5c
 800c9f6:	785b      	ldrb	r3, [r3, #1]
 800c9f8:	2b30      	cmp	r3, #48	; 0x30
 800c9fa:	d0f9      	beq.n	800c9f0 <_strtod_l+0x130>
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d0a3      	beq.n	800c948 <_strtod_l+0x88>
 800ca00:	2301      	movs	r3, #1
 800ca02:	f04f 0900 	mov.w	r9, #0
 800ca06:	9304      	str	r3, [sp, #16]
 800ca08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca0a:	9308      	str	r3, [sp, #32]
 800ca0c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ca10:	464f      	mov	r7, r9
 800ca12:	220a      	movs	r2, #10
 800ca14:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ca16:	7806      	ldrb	r6, [r0, #0]
 800ca18:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ca1c:	b2d9      	uxtb	r1, r3
 800ca1e:	2909      	cmp	r1, #9
 800ca20:	d92a      	bls.n	800ca78 <_strtod_l+0x1b8>
 800ca22:	9905      	ldr	r1, [sp, #20]
 800ca24:	462a      	mov	r2, r5
 800ca26:	f002 ff0f 	bl	800f848 <strncmp>
 800ca2a:	b398      	cbz	r0, 800ca94 <_strtod_l+0x1d4>
 800ca2c:	2000      	movs	r0, #0
 800ca2e:	4632      	mov	r2, r6
 800ca30:	463d      	mov	r5, r7
 800ca32:	9005      	str	r0, [sp, #20]
 800ca34:	4603      	mov	r3, r0
 800ca36:	2a65      	cmp	r2, #101	; 0x65
 800ca38:	d001      	beq.n	800ca3e <_strtod_l+0x17e>
 800ca3a:	2a45      	cmp	r2, #69	; 0x45
 800ca3c:	d118      	bne.n	800ca70 <_strtod_l+0x1b0>
 800ca3e:	b91d      	cbnz	r5, 800ca48 <_strtod_l+0x188>
 800ca40:	9a04      	ldr	r2, [sp, #16]
 800ca42:	4302      	orrs	r2, r0
 800ca44:	d09e      	beq.n	800c984 <_strtod_l+0xc4>
 800ca46:	2500      	movs	r5, #0
 800ca48:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ca4c:	f108 0201 	add.w	r2, r8, #1
 800ca50:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca52:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ca56:	2a2b      	cmp	r2, #43	; 0x2b
 800ca58:	d075      	beq.n	800cb46 <_strtod_l+0x286>
 800ca5a:	2a2d      	cmp	r2, #45	; 0x2d
 800ca5c:	d07b      	beq.n	800cb56 <_strtod_l+0x296>
 800ca5e:	f04f 0c00 	mov.w	ip, #0
 800ca62:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ca66:	2909      	cmp	r1, #9
 800ca68:	f240 8082 	bls.w	800cb70 <_strtod_l+0x2b0>
 800ca6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ca70:	2600      	movs	r6, #0
 800ca72:	e09d      	b.n	800cbb0 <_strtod_l+0x2f0>
 800ca74:	2300      	movs	r3, #0
 800ca76:	e7c4      	b.n	800ca02 <_strtod_l+0x142>
 800ca78:	2f08      	cmp	r7, #8
 800ca7a:	bfd8      	it	le
 800ca7c:	9907      	ldrle	r1, [sp, #28]
 800ca7e:	f100 0001 	add.w	r0, r0, #1
 800ca82:	bfda      	itte	le
 800ca84:	fb02 3301 	mlale	r3, r2, r1, r3
 800ca88:	9307      	strle	r3, [sp, #28]
 800ca8a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ca8e:	3701      	adds	r7, #1
 800ca90:	9017      	str	r0, [sp, #92]	; 0x5c
 800ca92:	e7bf      	b.n	800ca14 <_strtod_l+0x154>
 800ca94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ca96:	195a      	adds	r2, r3, r5
 800ca98:	9217      	str	r2, [sp, #92]	; 0x5c
 800ca9a:	5d5a      	ldrb	r2, [r3, r5]
 800ca9c:	2f00      	cmp	r7, #0
 800ca9e:	d037      	beq.n	800cb10 <_strtod_l+0x250>
 800caa0:	9005      	str	r0, [sp, #20]
 800caa2:	463d      	mov	r5, r7
 800caa4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800caa8:	2b09      	cmp	r3, #9
 800caaa:	d912      	bls.n	800cad2 <_strtod_l+0x212>
 800caac:	2301      	movs	r3, #1
 800caae:	e7c2      	b.n	800ca36 <_strtod_l+0x176>
 800cab0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cab2:	1c5a      	adds	r2, r3, #1
 800cab4:	9217      	str	r2, [sp, #92]	; 0x5c
 800cab6:	785a      	ldrb	r2, [r3, #1]
 800cab8:	3001      	adds	r0, #1
 800caba:	2a30      	cmp	r2, #48	; 0x30
 800cabc:	d0f8      	beq.n	800cab0 <_strtod_l+0x1f0>
 800cabe:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800cac2:	2b08      	cmp	r3, #8
 800cac4:	f200 84d9 	bhi.w	800d47a <_strtod_l+0xbba>
 800cac8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800caca:	9005      	str	r0, [sp, #20]
 800cacc:	2000      	movs	r0, #0
 800cace:	9308      	str	r3, [sp, #32]
 800cad0:	4605      	mov	r5, r0
 800cad2:	3a30      	subs	r2, #48	; 0x30
 800cad4:	f100 0301 	add.w	r3, r0, #1
 800cad8:	d014      	beq.n	800cb04 <_strtod_l+0x244>
 800cada:	9905      	ldr	r1, [sp, #20]
 800cadc:	4419      	add	r1, r3
 800cade:	9105      	str	r1, [sp, #20]
 800cae0:	462b      	mov	r3, r5
 800cae2:	eb00 0e05 	add.w	lr, r0, r5
 800cae6:	210a      	movs	r1, #10
 800cae8:	4573      	cmp	r3, lr
 800caea:	d113      	bne.n	800cb14 <_strtod_l+0x254>
 800caec:	182b      	adds	r3, r5, r0
 800caee:	2b08      	cmp	r3, #8
 800caf0:	f105 0501 	add.w	r5, r5, #1
 800caf4:	4405      	add	r5, r0
 800caf6:	dc1c      	bgt.n	800cb32 <_strtod_l+0x272>
 800caf8:	9907      	ldr	r1, [sp, #28]
 800cafa:	230a      	movs	r3, #10
 800cafc:	fb03 2301 	mla	r3, r3, r1, r2
 800cb00:	9307      	str	r3, [sp, #28]
 800cb02:	2300      	movs	r3, #0
 800cb04:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb06:	1c51      	adds	r1, r2, #1
 800cb08:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb0a:	7852      	ldrb	r2, [r2, #1]
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	e7c9      	b.n	800caa4 <_strtod_l+0x1e4>
 800cb10:	4638      	mov	r0, r7
 800cb12:	e7d2      	b.n	800caba <_strtod_l+0x1fa>
 800cb14:	2b08      	cmp	r3, #8
 800cb16:	dc04      	bgt.n	800cb22 <_strtod_l+0x262>
 800cb18:	9e07      	ldr	r6, [sp, #28]
 800cb1a:	434e      	muls	r6, r1
 800cb1c:	9607      	str	r6, [sp, #28]
 800cb1e:	3301      	adds	r3, #1
 800cb20:	e7e2      	b.n	800cae8 <_strtod_l+0x228>
 800cb22:	f103 0c01 	add.w	ip, r3, #1
 800cb26:	f1bc 0f10 	cmp.w	ip, #16
 800cb2a:	bfd8      	it	le
 800cb2c:	fb01 f909 	mulle.w	r9, r1, r9
 800cb30:	e7f5      	b.n	800cb1e <_strtod_l+0x25e>
 800cb32:	2d10      	cmp	r5, #16
 800cb34:	bfdc      	itt	le
 800cb36:	230a      	movle	r3, #10
 800cb38:	fb03 2909 	mlale	r9, r3, r9, r2
 800cb3c:	e7e1      	b.n	800cb02 <_strtod_l+0x242>
 800cb3e:	2300      	movs	r3, #0
 800cb40:	9305      	str	r3, [sp, #20]
 800cb42:	2301      	movs	r3, #1
 800cb44:	e77c      	b.n	800ca40 <_strtod_l+0x180>
 800cb46:	f04f 0c00 	mov.w	ip, #0
 800cb4a:	f108 0202 	add.w	r2, r8, #2
 800cb4e:	9217      	str	r2, [sp, #92]	; 0x5c
 800cb50:	f898 2002 	ldrb.w	r2, [r8, #2]
 800cb54:	e785      	b.n	800ca62 <_strtod_l+0x1a2>
 800cb56:	f04f 0c01 	mov.w	ip, #1
 800cb5a:	e7f6      	b.n	800cb4a <_strtod_l+0x28a>
 800cb5c:	08011338 	.word	0x08011338
 800cb60:	080110f0 	.word	0x080110f0
 800cb64:	7ff00000 	.word	0x7ff00000
 800cb68:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb6a:	1c51      	adds	r1, r2, #1
 800cb6c:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb6e:	7852      	ldrb	r2, [r2, #1]
 800cb70:	2a30      	cmp	r2, #48	; 0x30
 800cb72:	d0f9      	beq.n	800cb68 <_strtod_l+0x2a8>
 800cb74:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800cb78:	2908      	cmp	r1, #8
 800cb7a:	f63f af79 	bhi.w	800ca70 <_strtod_l+0x1b0>
 800cb7e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800cb82:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb84:	9206      	str	r2, [sp, #24]
 800cb86:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800cb88:	1c51      	adds	r1, r2, #1
 800cb8a:	9117      	str	r1, [sp, #92]	; 0x5c
 800cb8c:	7852      	ldrb	r2, [r2, #1]
 800cb8e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800cb92:	2e09      	cmp	r6, #9
 800cb94:	d937      	bls.n	800cc06 <_strtod_l+0x346>
 800cb96:	9e06      	ldr	r6, [sp, #24]
 800cb98:	1b89      	subs	r1, r1, r6
 800cb9a:	2908      	cmp	r1, #8
 800cb9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800cba0:	dc02      	bgt.n	800cba8 <_strtod_l+0x2e8>
 800cba2:	4576      	cmp	r6, lr
 800cba4:	bfa8      	it	ge
 800cba6:	4676      	movge	r6, lr
 800cba8:	f1bc 0f00 	cmp.w	ip, #0
 800cbac:	d000      	beq.n	800cbb0 <_strtod_l+0x2f0>
 800cbae:	4276      	negs	r6, r6
 800cbb0:	2d00      	cmp	r5, #0
 800cbb2:	d14d      	bne.n	800cc50 <_strtod_l+0x390>
 800cbb4:	9904      	ldr	r1, [sp, #16]
 800cbb6:	4301      	orrs	r1, r0
 800cbb8:	f47f aec6 	bne.w	800c948 <_strtod_l+0x88>
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	f47f aee1 	bne.w	800c984 <_strtod_l+0xc4>
 800cbc2:	2a69      	cmp	r2, #105	; 0x69
 800cbc4:	d027      	beq.n	800cc16 <_strtod_l+0x356>
 800cbc6:	dc24      	bgt.n	800cc12 <_strtod_l+0x352>
 800cbc8:	2a49      	cmp	r2, #73	; 0x49
 800cbca:	d024      	beq.n	800cc16 <_strtod_l+0x356>
 800cbcc:	2a4e      	cmp	r2, #78	; 0x4e
 800cbce:	f47f aed9 	bne.w	800c984 <_strtod_l+0xc4>
 800cbd2:	499f      	ldr	r1, [pc, #636]	; (800ce50 <_strtod_l+0x590>)
 800cbd4:	a817      	add	r0, sp, #92	; 0x5c
 800cbd6:	f001 fe3d 	bl	800e854 <__match>
 800cbda:	2800      	cmp	r0, #0
 800cbdc:	f43f aed2 	beq.w	800c984 <_strtod_l+0xc4>
 800cbe0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cbe2:	781b      	ldrb	r3, [r3, #0]
 800cbe4:	2b28      	cmp	r3, #40	; 0x28
 800cbe6:	d12d      	bne.n	800cc44 <_strtod_l+0x384>
 800cbe8:	499a      	ldr	r1, [pc, #616]	; (800ce54 <_strtod_l+0x594>)
 800cbea:	aa1a      	add	r2, sp, #104	; 0x68
 800cbec:	a817      	add	r0, sp, #92	; 0x5c
 800cbee:	f001 fe45 	bl	800e87c <__hexnan>
 800cbf2:	2805      	cmp	r0, #5
 800cbf4:	d126      	bne.n	800cc44 <_strtod_l+0x384>
 800cbf6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800cbf8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800cbfc:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800cc00:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800cc04:	e6a0      	b.n	800c948 <_strtod_l+0x88>
 800cc06:	210a      	movs	r1, #10
 800cc08:	fb01 2e0e 	mla	lr, r1, lr, r2
 800cc0c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800cc10:	e7b9      	b.n	800cb86 <_strtod_l+0x2c6>
 800cc12:	2a6e      	cmp	r2, #110	; 0x6e
 800cc14:	e7db      	b.n	800cbce <_strtod_l+0x30e>
 800cc16:	4990      	ldr	r1, [pc, #576]	; (800ce58 <_strtod_l+0x598>)
 800cc18:	a817      	add	r0, sp, #92	; 0x5c
 800cc1a:	f001 fe1b 	bl	800e854 <__match>
 800cc1e:	2800      	cmp	r0, #0
 800cc20:	f43f aeb0 	beq.w	800c984 <_strtod_l+0xc4>
 800cc24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc26:	498d      	ldr	r1, [pc, #564]	; (800ce5c <_strtod_l+0x59c>)
 800cc28:	3b01      	subs	r3, #1
 800cc2a:	a817      	add	r0, sp, #92	; 0x5c
 800cc2c:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc2e:	f001 fe11 	bl	800e854 <__match>
 800cc32:	b910      	cbnz	r0, 800cc3a <_strtod_l+0x37a>
 800cc34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800cc36:	3301      	adds	r3, #1
 800cc38:	9317      	str	r3, [sp, #92]	; 0x5c
 800cc3a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800ce6c <_strtod_l+0x5ac>
 800cc3e:	f04f 0a00 	mov.w	sl, #0
 800cc42:	e681      	b.n	800c948 <_strtod_l+0x88>
 800cc44:	4886      	ldr	r0, [pc, #536]	; (800ce60 <_strtod_l+0x5a0>)
 800cc46:	f002 fde7 	bl	800f818 <nan>
 800cc4a:	ec5b ab10 	vmov	sl, fp, d0
 800cc4e:	e67b      	b.n	800c948 <_strtod_l+0x88>
 800cc50:	9b05      	ldr	r3, [sp, #20]
 800cc52:	9807      	ldr	r0, [sp, #28]
 800cc54:	1af3      	subs	r3, r6, r3
 800cc56:	2f00      	cmp	r7, #0
 800cc58:	bf08      	it	eq
 800cc5a:	462f      	moveq	r7, r5
 800cc5c:	2d10      	cmp	r5, #16
 800cc5e:	9306      	str	r3, [sp, #24]
 800cc60:	46a8      	mov	r8, r5
 800cc62:	bfa8      	it	ge
 800cc64:	f04f 0810 	movge.w	r8, #16
 800cc68:	f7f3 fc4c 	bl	8000504 <__aeabi_ui2d>
 800cc6c:	2d09      	cmp	r5, #9
 800cc6e:	4682      	mov	sl, r0
 800cc70:	468b      	mov	fp, r1
 800cc72:	dd13      	ble.n	800cc9c <_strtod_l+0x3dc>
 800cc74:	4b7b      	ldr	r3, [pc, #492]	; (800ce64 <_strtod_l+0x5a4>)
 800cc76:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cc7a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cc7e:	f7f3 fcbb 	bl	80005f8 <__aeabi_dmul>
 800cc82:	4682      	mov	sl, r0
 800cc84:	4648      	mov	r0, r9
 800cc86:	468b      	mov	fp, r1
 800cc88:	f7f3 fc3c 	bl	8000504 <__aeabi_ui2d>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4650      	mov	r0, sl
 800cc92:	4659      	mov	r1, fp
 800cc94:	f7f3 fafa 	bl	800028c <__adddf3>
 800cc98:	4682      	mov	sl, r0
 800cc9a:	468b      	mov	fp, r1
 800cc9c:	2d0f      	cmp	r5, #15
 800cc9e:	dc38      	bgt.n	800cd12 <_strtod_l+0x452>
 800cca0:	9b06      	ldr	r3, [sp, #24]
 800cca2:	2b00      	cmp	r3, #0
 800cca4:	f43f ae50 	beq.w	800c948 <_strtod_l+0x88>
 800cca8:	dd24      	ble.n	800ccf4 <_strtod_l+0x434>
 800ccaa:	2b16      	cmp	r3, #22
 800ccac:	dc0b      	bgt.n	800ccc6 <_strtod_l+0x406>
 800ccae:	496d      	ldr	r1, [pc, #436]	; (800ce64 <_strtod_l+0x5a4>)
 800ccb0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800ccb4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccb8:	4652      	mov	r2, sl
 800ccba:	465b      	mov	r3, fp
 800ccbc:	f7f3 fc9c 	bl	80005f8 <__aeabi_dmul>
 800ccc0:	4682      	mov	sl, r0
 800ccc2:	468b      	mov	fp, r1
 800ccc4:	e640      	b.n	800c948 <_strtod_l+0x88>
 800ccc6:	9a06      	ldr	r2, [sp, #24]
 800ccc8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cccc:	4293      	cmp	r3, r2
 800ccce:	db20      	blt.n	800cd12 <_strtod_l+0x452>
 800ccd0:	4c64      	ldr	r4, [pc, #400]	; (800ce64 <_strtod_l+0x5a4>)
 800ccd2:	f1c5 050f 	rsb	r5, r5, #15
 800ccd6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800ccda:	4652      	mov	r2, sl
 800ccdc:	465b      	mov	r3, fp
 800ccde:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cce2:	f7f3 fc89 	bl	80005f8 <__aeabi_dmul>
 800cce6:	9b06      	ldr	r3, [sp, #24]
 800cce8:	1b5d      	subs	r5, r3, r5
 800ccea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800ccee:	e9d4 2300 	ldrd	r2, r3, [r4]
 800ccf2:	e7e3      	b.n	800ccbc <_strtod_l+0x3fc>
 800ccf4:	9b06      	ldr	r3, [sp, #24]
 800ccf6:	3316      	adds	r3, #22
 800ccf8:	db0b      	blt.n	800cd12 <_strtod_l+0x452>
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	1b9e      	subs	r6, r3, r6
 800ccfe:	4b59      	ldr	r3, [pc, #356]	; (800ce64 <_strtod_l+0x5a4>)
 800cd00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800cd04:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd08:	4650      	mov	r0, sl
 800cd0a:	4659      	mov	r1, fp
 800cd0c:	f7f3 fd9e 	bl	800084c <__aeabi_ddiv>
 800cd10:	e7d6      	b.n	800ccc0 <_strtod_l+0x400>
 800cd12:	9b06      	ldr	r3, [sp, #24]
 800cd14:	eba5 0808 	sub.w	r8, r5, r8
 800cd18:	4498      	add	r8, r3
 800cd1a:	f1b8 0f00 	cmp.w	r8, #0
 800cd1e:	dd74      	ble.n	800ce0a <_strtod_l+0x54a>
 800cd20:	f018 030f 	ands.w	r3, r8, #15
 800cd24:	d00a      	beq.n	800cd3c <_strtod_l+0x47c>
 800cd26:	494f      	ldr	r1, [pc, #316]	; (800ce64 <_strtod_l+0x5a4>)
 800cd28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cd2c:	4652      	mov	r2, sl
 800cd2e:	465b      	mov	r3, fp
 800cd30:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cd34:	f7f3 fc60 	bl	80005f8 <__aeabi_dmul>
 800cd38:	4682      	mov	sl, r0
 800cd3a:	468b      	mov	fp, r1
 800cd3c:	f038 080f 	bics.w	r8, r8, #15
 800cd40:	d04f      	beq.n	800cde2 <_strtod_l+0x522>
 800cd42:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cd46:	dd22      	ble.n	800cd8e <_strtod_l+0x4ce>
 800cd48:	2500      	movs	r5, #0
 800cd4a:	462e      	mov	r6, r5
 800cd4c:	9507      	str	r5, [sp, #28]
 800cd4e:	9505      	str	r5, [sp, #20]
 800cd50:	2322      	movs	r3, #34	; 0x22
 800cd52:	f8df b118 	ldr.w	fp, [pc, #280]	; 800ce6c <_strtod_l+0x5ac>
 800cd56:	6023      	str	r3, [r4, #0]
 800cd58:	f04f 0a00 	mov.w	sl, #0
 800cd5c:	9b07      	ldr	r3, [sp, #28]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	f43f adf2 	beq.w	800c948 <_strtod_l+0x88>
 800cd64:	9918      	ldr	r1, [sp, #96]	; 0x60
 800cd66:	4620      	mov	r0, r4
 800cd68:	f001 fe82 	bl	800ea70 <_Bfree>
 800cd6c:	9905      	ldr	r1, [sp, #20]
 800cd6e:	4620      	mov	r0, r4
 800cd70:	f001 fe7e 	bl	800ea70 <_Bfree>
 800cd74:	4631      	mov	r1, r6
 800cd76:	4620      	mov	r0, r4
 800cd78:	f001 fe7a 	bl	800ea70 <_Bfree>
 800cd7c:	9907      	ldr	r1, [sp, #28]
 800cd7e:	4620      	mov	r0, r4
 800cd80:	f001 fe76 	bl	800ea70 <_Bfree>
 800cd84:	4629      	mov	r1, r5
 800cd86:	4620      	mov	r0, r4
 800cd88:	f001 fe72 	bl	800ea70 <_Bfree>
 800cd8c:	e5dc      	b.n	800c948 <_strtod_l+0x88>
 800cd8e:	4b36      	ldr	r3, [pc, #216]	; (800ce68 <_strtod_l+0x5a8>)
 800cd90:	9304      	str	r3, [sp, #16]
 800cd92:	2300      	movs	r3, #0
 800cd94:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cd98:	4650      	mov	r0, sl
 800cd9a:	4659      	mov	r1, fp
 800cd9c:	4699      	mov	r9, r3
 800cd9e:	f1b8 0f01 	cmp.w	r8, #1
 800cda2:	dc21      	bgt.n	800cde8 <_strtod_l+0x528>
 800cda4:	b10b      	cbz	r3, 800cdaa <_strtod_l+0x4ea>
 800cda6:	4682      	mov	sl, r0
 800cda8:	468b      	mov	fp, r1
 800cdaa:	4b2f      	ldr	r3, [pc, #188]	; (800ce68 <_strtod_l+0x5a8>)
 800cdac:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cdb0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cdb4:	4652      	mov	r2, sl
 800cdb6:	465b      	mov	r3, fp
 800cdb8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cdbc:	f7f3 fc1c 	bl	80005f8 <__aeabi_dmul>
 800cdc0:	4b2a      	ldr	r3, [pc, #168]	; (800ce6c <_strtod_l+0x5ac>)
 800cdc2:	460a      	mov	r2, r1
 800cdc4:	400b      	ands	r3, r1
 800cdc6:	492a      	ldr	r1, [pc, #168]	; (800ce70 <_strtod_l+0x5b0>)
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	4682      	mov	sl, r0
 800cdcc:	d8bc      	bhi.n	800cd48 <_strtod_l+0x488>
 800cdce:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cdd2:	428b      	cmp	r3, r1
 800cdd4:	bf86      	itte	hi
 800cdd6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800ce74 <_strtod_l+0x5b4>
 800cdda:	f04f 3aff 	movhi.w	sl, #4294967295
 800cdde:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cde2:	2300      	movs	r3, #0
 800cde4:	9304      	str	r3, [sp, #16]
 800cde6:	e084      	b.n	800cef2 <_strtod_l+0x632>
 800cde8:	f018 0f01 	tst.w	r8, #1
 800cdec:	d005      	beq.n	800cdfa <_strtod_l+0x53a>
 800cdee:	9b04      	ldr	r3, [sp, #16]
 800cdf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf4:	f7f3 fc00 	bl	80005f8 <__aeabi_dmul>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	9a04      	ldr	r2, [sp, #16]
 800cdfc:	3208      	adds	r2, #8
 800cdfe:	f109 0901 	add.w	r9, r9, #1
 800ce02:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ce06:	9204      	str	r2, [sp, #16]
 800ce08:	e7c9      	b.n	800cd9e <_strtod_l+0x4de>
 800ce0a:	d0ea      	beq.n	800cde2 <_strtod_l+0x522>
 800ce0c:	f1c8 0800 	rsb	r8, r8, #0
 800ce10:	f018 020f 	ands.w	r2, r8, #15
 800ce14:	d00a      	beq.n	800ce2c <_strtod_l+0x56c>
 800ce16:	4b13      	ldr	r3, [pc, #76]	; (800ce64 <_strtod_l+0x5a4>)
 800ce18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce1c:	4650      	mov	r0, sl
 800ce1e:	4659      	mov	r1, fp
 800ce20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce24:	f7f3 fd12 	bl	800084c <__aeabi_ddiv>
 800ce28:	4682      	mov	sl, r0
 800ce2a:	468b      	mov	fp, r1
 800ce2c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ce30:	d0d7      	beq.n	800cde2 <_strtod_l+0x522>
 800ce32:	f1b8 0f1f 	cmp.w	r8, #31
 800ce36:	dd1f      	ble.n	800ce78 <_strtod_l+0x5b8>
 800ce38:	2500      	movs	r5, #0
 800ce3a:	462e      	mov	r6, r5
 800ce3c:	9507      	str	r5, [sp, #28]
 800ce3e:	9505      	str	r5, [sp, #20]
 800ce40:	2322      	movs	r3, #34	; 0x22
 800ce42:	f04f 0a00 	mov.w	sl, #0
 800ce46:	f04f 0b00 	mov.w	fp, #0
 800ce4a:	6023      	str	r3, [r4, #0]
 800ce4c:	e786      	b.n	800cd5c <_strtod_l+0x49c>
 800ce4e:	bf00      	nop
 800ce50:	080110c1 	.word	0x080110c1
 800ce54:	08011104 	.word	0x08011104
 800ce58:	080110b9 	.word	0x080110b9
 800ce5c:	08011244 	.word	0x08011244
 800ce60:	080114f0 	.word	0x080114f0
 800ce64:	080113d0 	.word	0x080113d0
 800ce68:	080113a8 	.word	0x080113a8
 800ce6c:	7ff00000 	.word	0x7ff00000
 800ce70:	7ca00000 	.word	0x7ca00000
 800ce74:	7fefffff 	.word	0x7fefffff
 800ce78:	f018 0310 	ands.w	r3, r8, #16
 800ce7c:	bf18      	it	ne
 800ce7e:	236a      	movne	r3, #106	; 0x6a
 800ce80:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800d230 <_strtod_l+0x970>
 800ce84:	9304      	str	r3, [sp, #16]
 800ce86:	4650      	mov	r0, sl
 800ce88:	4659      	mov	r1, fp
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	f018 0f01 	tst.w	r8, #1
 800ce90:	d004      	beq.n	800ce9c <_strtod_l+0x5dc>
 800ce92:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ce96:	f7f3 fbaf 	bl	80005f8 <__aeabi_dmul>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cea0:	f109 0908 	add.w	r9, r9, #8
 800cea4:	d1f2      	bne.n	800ce8c <_strtod_l+0x5cc>
 800cea6:	b10b      	cbz	r3, 800ceac <_strtod_l+0x5ec>
 800cea8:	4682      	mov	sl, r0
 800ceaa:	468b      	mov	fp, r1
 800ceac:	9b04      	ldr	r3, [sp, #16]
 800ceae:	b1c3      	cbz	r3, 800cee2 <_strtod_l+0x622>
 800ceb0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ceb4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	4659      	mov	r1, fp
 800cebc:	dd11      	ble.n	800cee2 <_strtod_l+0x622>
 800cebe:	2b1f      	cmp	r3, #31
 800cec0:	f340 8124 	ble.w	800d10c <_strtod_l+0x84c>
 800cec4:	2b34      	cmp	r3, #52	; 0x34
 800cec6:	bfde      	ittt	le
 800cec8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800cecc:	f04f 33ff 	movle.w	r3, #4294967295
 800ced0:	fa03 f202 	lslle.w	r2, r3, r2
 800ced4:	f04f 0a00 	mov.w	sl, #0
 800ced8:	bfcc      	ite	gt
 800ceda:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cede:	ea02 0b01 	andle.w	fp, r2, r1
 800cee2:	2200      	movs	r2, #0
 800cee4:	2300      	movs	r3, #0
 800cee6:	4650      	mov	r0, sl
 800cee8:	4659      	mov	r1, fp
 800ceea:	f7f3 fded 	bl	8000ac8 <__aeabi_dcmpeq>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d1a2      	bne.n	800ce38 <_strtod_l+0x578>
 800cef2:	9b07      	ldr	r3, [sp, #28]
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	9908      	ldr	r1, [sp, #32]
 800cef8:	462b      	mov	r3, r5
 800cefa:	463a      	mov	r2, r7
 800cefc:	4620      	mov	r0, r4
 800cefe:	f001 fe1f 	bl	800eb40 <__s2b>
 800cf02:	9007      	str	r0, [sp, #28]
 800cf04:	2800      	cmp	r0, #0
 800cf06:	f43f af1f 	beq.w	800cd48 <_strtod_l+0x488>
 800cf0a:	9b05      	ldr	r3, [sp, #20]
 800cf0c:	1b9e      	subs	r6, r3, r6
 800cf0e:	9b06      	ldr	r3, [sp, #24]
 800cf10:	2b00      	cmp	r3, #0
 800cf12:	bfb4      	ite	lt
 800cf14:	4633      	movlt	r3, r6
 800cf16:	2300      	movge	r3, #0
 800cf18:	930c      	str	r3, [sp, #48]	; 0x30
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	2500      	movs	r5, #0
 800cf1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cf22:	9312      	str	r3, [sp, #72]	; 0x48
 800cf24:	462e      	mov	r6, r5
 800cf26:	9b07      	ldr	r3, [sp, #28]
 800cf28:	4620      	mov	r0, r4
 800cf2a:	6859      	ldr	r1, [r3, #4]
 800cf2c:	f001 fd60 	bl	800e9f0 <_Balloc>
 800cf30:	9005      	str	r0, [sp, #20]
 800cf32:	2800      	cmp	r0, #0
 800cf34:	f43f af0c 	beq.w	800cd50 <_strtod_l+0x490>
 800cf38:	9b07      	ldr	r3, [sp, #28]
 800cf3a:	691a      	ldr	r2, [r3, #16]
 800cf3c:	3202      	adds	r2, #2
 800cf3e:	f103 010c 	add.w	r1, r3, #12
 800cf42:	0092      	lsls	r2, r2, #2
 800cf44:	300c      	adds	r0, #12
 800cf46:	f7fe fddf 	bl	800bb08 <memcpy>
 800cf4a:	ec4b ab10 	vmov	d0, sl, fp
 800cf4e:	aa1a      	add	r2, sp, #104	; 0x68
 800cf50:	a919      	add	r1, sp, #100	; 0x64
 800cf52:	4620      	mov	r0, r4
 800cf54:	f002 f93a 	bl	800f1cc <__d2b>
 800cf58:	ec4b ab18 	vmov	d8, sl, fp
 800cf5c:	9018      	str	r0, [sp, #96]	; 0x60
 800cf5e:	2800      	cmp	r0, #0
 800cf60:	f43f aef6 	beq.w	800cd50 <_strtod_l+0x490>
 800cf64:	2101      	movs	r1, #1
 800cf66:	4620      	mov	r0, r4
 800cf68:	f001 fe84 	bl	800ec74 <__i2b>
 800cf6c:	4606      	mov	r6, r0
 800cf6e:	2800      	cmp	r0, #0
 800cf70:	f43f aeee 	beq.w	800cd50 <_strtod_l+0x490>
 800cf74:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800cf76:	9904      	ldr	r1, [sp, #16]
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	bfab      	itete	ge
 800cf7c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800cf7e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800cf80:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800cf82:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800cf86:	bfac      	ite	ge
 800cf88:	eb03 0902 	addge.w	r9, r3, r2
 800cf8c:	1ad7      	sublt	r7, r2, r3
 800cf8e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800cf90:	eba3 0801 	sub.w	r8, r3, r1
 800cf94:	4490      	add	r8, r2
 800cf96:	4ba1      	ldr	r3, [pc, #644]	; (800d21c <_strtod_l+0x95c>)
 800cf98:	f108 38ff 	add.w	r8, r8, #4294967295
 800cf9c:	4598      	cmp	r8, r3
 800cf9e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800cfa2:	f280 80c7 	bge.w	800d134 <_strtod_l+0x874>
 800cfa6:	eba3 0308 	sub.w	r3, r3, r8
 800cfaa:	2b1f      	cmp	r3, #31
 800cfac:	eba2 0203 	sub.w	r2, r2, r3
 800cfb0:	f04f 0101 	mov.w	r1, #1
 800cfb4:	f300 80b1 	bgt.w	800d11a <_strtod_l+0x85a>
 800cfb8:	fa01 f303 	lsl.w	r3, r1, r3
 800cfbc:	930d      	str	r3, [sp, #52]	; 0x34
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	9308      	str	r3, [sp, #32]
 800cfc2:	eb09 0802 	add.w	r8, r9, r2
 800cfc6:	9b04      	ldr	r3, [sp, #16]
 800cfc8:	45c1      	cmp	r9, r8
 800cfca:	4417      	add	r7, r2
 800cfcc:	441f      	add	r7, r3
 800cfce:	464b      	mov	r3, r9
 800cfd0:	bfa8      	it	ge
 800cfd2:	4643      	movge	r3, r8
 800cfd4:	42bb      	cmp	r3, r7
 800cfd6:	bfa8      	it	ge
 800cfd8:	463b      	movge	r3, r7
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	bfc2      	ittt	gt
 800cfde:	eba8 0803 	subgt.w	r8, r8, r3
 800cfe2:	1aff      	subgt	r7, r7, r3
 800cfe4:	eba9 0903 	subgt.w	r9, r9, r3
 800cfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	dd17      	ble.n	800d01e <_strtod_l+0x75e>
 800cfee:	4631      	mov	r1, r6
 800cff0:	461a      	mov	r2, r3
 800cff2:	4620      	mov	r0, r4
 800cff4:	f001 fefe 	bl	800edf4 <__pow5mult>
 800cff8:	4606      	mov	r6, r0
 800cffa:	2800      	cmp	r0, #0
 800cffc:	f43f aea8 	beq.w	800cd50 <_strtod_l+0x490>
 800d000:	4601      	mov	r1, r0
 800d002:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d004:	4620      	mov	r0, r4
 800d006:	f001 fe4b 	bl	800eca0 <__multiply>
 800d00a:	900b      	str	r0, [sp, #44]	; 0x2c
 800d00c:	2800      	cmp	r0, #0
 800d00e:	f43f ae9f 	beq.w	800cd50 <_strtod_l+0x490>
 800d012:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d014:	4620      	mov	r0, r4
 800d016:	f001 fd2b 	bl	800ea70 <_Bfree>
 800d01a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d01c:	9318      	str	r3, [sp, #96]	; 0x60
 800d01e:	f1b8 0f00 	cmp.w	r8, #0
 800d022:	f300 808c 	bgt.w	800d13e <_strtod_l+0x87e>
 800d026:	9b06      	ldr	r3, [sp, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	dd08      	ble.n	800d03e <_strtod_l+0x77e>
 800d02c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d02e:	9905      	ldr	r1, [sp, #20]
 800d030:	4620      	mov	r0, r4
 800d032:	f001 fedf 	bl	800edf4 <__pow5mult>
 800d036:	9005      	str	r0, [sp, #20]
 800d038:	2800      	cmp	r0, #0
 800d03a:	f43f ae89 	beq.w	800cd50 <_strtod_l+0x490>
 800d03e:	2f00      	cmp	r7, #0
 800d040:	dd08      	ble.n	800d054 <_strtod_l+0x794>
 800d042:	9905      	ldr	r1, [sp, #20]
 800d044:	463a      	mov	r2, r7
 800d046:	4620      	mov	r0, r4
 800d048:	f001 ff2e 	bl	800eea8 <__lshift>
 800d04c:	9005      	str	r0, [sp, #20]
 800d04e:	2800      	cmp	r0, #0
 800d050:	f43f ae7e 	beq.w	800cd50 <_strtod_l+0x490>
 800d054:	f1b9 0f00 	cmp.w	r9, #0
 800d058:	dd08      	ble.n	800d06c <_strtod_l+0x7ac>
 800d05a:	4631      	mov	r1, r6
 800d05c:	464a      	mov	r2, r9
 800d05e:	4620      	mov	r0, r4
 800d060:	f001 ff22 	bl	800eea8 <__lshift>
 800d064:	4606      	mov	r6, r0
 800d066:	2800      	cmp	r0, #0
 800d068:	f43f ae72 	beq.w	800cd50 <_strtod_l+0x490>
 800d06c:	9a05      	ldr	r2, [sp, #20]
 800d06e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d070:	4620      	mov	r0, r4
 800d072:	f001 ffa5 	bl	800efc0 <__mdiff>
 800d076:	4605      	mov	r5, r0
 800d078:	2800      	cmp	r0, #0
 800d07a:	f43f ae69 	beq.w	800cd50 <_strtod_l+0x490>
 800d07e:	68c3      	ldr	r3, [r0, #12]
 800d080:	930b      	str	r3, [sp, #44]	; 0x2c
 800d082:	2300      	movs	r3, #0
 800d084:	60c3      	str	r3, [r0, #12]
 800d086:	4631      	mov	r1, r6
 800d088:	f001 ff7e 	bl	800ef88 <__mcmp>
 800d08c:	2800      	cmp	r0, #0
 800d08e:	da60      	bge.n	800d152 <_strtod_l+0x892>
 800d090:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d092:	ea53 030a 	orrs.w	r3, r3, sl
 800d096:	f040 8082 	bne.w	800d19e <_strtod_l+0x8de>
 800d09a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d17d      	bne.n	800d19e <_strtod_l+0x8de>
 800d0a2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d0a6:	0d1b      	lsrs	r3, r3, #20
 800d0a8:	051b      	lsls	r3, r3, #20
 800d0aa:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800d0ae:	d976      	bls.n	800d19e <_strtod_l+0x8de>
 800d0b0:	696b      	ldr	r3, [r5, #20]
 800d0b2:	b913      	cbnz	r3, 800d0ba <_strtod_l+0x7fa>
 800d0b4:	692b      	ldr	r3, [r5, #16]
 800d0b6:	2b01      	cmp	r3, #1
 800d0b8:	dd71      	ble.n	800d19e <_strtod_l+0x8de>
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	2201      	movs	r2, #1
 800d0be:	4620      	mov	r0, r4
 800d0c0:	f001 fef2 	bl	800eea8 <__lshift>
 800d0c4:	4631      	mov	r1, r6
 800d0c6:	4605      	mov	r5, r0
 800d0c8:	f001 ff5e 	bl	800ef88 <__mcmp>
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	dd66      	ble.n	800d19e <_strtod_l+0x8de>
 800d0d0:	9904      	ldr	r1, [sp, #16]
 800d0d2:	4a53      	ldr	r2, [pc, #332]	; (800d220 <_strtod_l+0x960>)
 800d0d4:	465b      	mov	r3, fp
 800d0d6:	2900      	cmp	r1, #0
 800d0d8:	f000 8081 	beq.w	800d1de <_strtod_l+0x91e>
 800d0dc:	ea02 010b 	and.w	r1, r2, fp
 800d0e0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800d0e4:	dc7b      	bgt.n	800d1de <_strtod_l+0x91e>
 800d0e6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800d0ea:	f77f aea9 	ble.w	800ce40 <_strtod_l+0x580>
 800d0ee:	4b4d      	ldr	r3, [pc, #308]	; (800d224 <_strtod_l+0x964>)
 800d0f0:	4650      	mov	r0, sl
 800d0f2:	4659      	mov	r1, fp
 800d0f4:	2200      	movs	r2, #0
 800d0f6:	f7f3 fa7f 	bl	80005f8 <__aeabi_dmul>
 800d0fa:	460b      	mov	r3, r1
 800d0fc:	4303      	orrs	r3, r0
 800d0fe:	bf08      	it	eq
 800d100:	2322      	moveq	r3, #34	; 0x22
 800d102:	4682      	mov	sl, r0
 800d104:	468b      	mov	fp, r1
 800d106:	bf08      	it	eq
 800d108:	6023      	streq	r3, [r4, #0]
 800d10a:	e62b      	b.n	800cd64 <_strtod_l+0x4a4>
 800d10c:	f04f 32ff 	mov.w	r2, #4294967295
 800d110:	fa02 f303 	lsl.w	r3, r2, r3
 800d114:	ea03 0a0a 	and.w	sl, r3, sl
 800d118:	e6e3      	b.n	800cee2 <_strtod_l+0x622>
 800d11a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800d11e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800d122:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800d126:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800d12a:	fa01 f308 	lsl.w	r3, r1, r8
 800d12e:	9308      	str	r3, [sp, #32]
 800d130:	910d      	str	r1, [sp, #52]	; 0x34
 800d132:	e746      	b.n	800cfc2 <_strtod_l+0x702>
 800d134:	2300      	movs	r3, #0
 800d136:	9308      	str	r3, [sp, #32]
 800d138:	2301      	movs	r3, #1
 800d13a:	930d      	str	r3, [sp, #52]	; 0x34
 800d13c:	e741      	b.n	800cfc2 <_strtod_l+0x702>
 800d13e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d140:	4642      	mov	r2, r8
 800d142:	4620      	mov	r0, r4
 800d144:	f001 feb0 	bl	800eea8 <__lshift>
 800d148:	9018      	str	r0, [sp, #96]	; 0x60
 800d14a:	2800      	cmp	r0, #0
 800d14c:	f47f af6b 	bne.w	800d026 <_strtod_l+0x766>
 800d150:	e5fe      	b.n	800cd50 <_strtod_l+0x490>
 800d152:	465f      	mov	r7, fp
 800d154:	d16e      	bne.n	800d234 <_strtod_l+0x974>
 800d156:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d158:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d15c:	b342      	cbz	r2, 800d1b0 <_strtod_l+0x8f0>
 800d15e:	4a32      	ldr	r2, [pc, #200]	; (800d228 <_strtod_l+0x968>)
 800d160:	4293      	cmp	r3, r2
 800d162:	d128      	bne.n	800d1b6 <_strtod_l+0x8f6>
 800d164:	9b04      	ldr	r3, [sp, #16]
 800d166:	4651      	mov	r1, sl
 800d168:	b1eb      	cbz	r3, 800d1a6 <_strtod_l+0x8e6>
 800d16a:	4b2d      	ldr	r3, [pc, #180]	; (800d220 <_strtod_l+0x960>)
 800d16c:	403b      	ands	r3, r7
 800d16e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d172:	f04f 32ff 	mov.w	r2, #4294967295
 800d176:	d819      	bhi.n	800d1ac <_strtod_l+0x8ec>
 800d178:	0d1b      	lsrs	r3, r3, #20
 800d17a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d17e:	fa02 f303 	lsl.w	r3, r2, r3
 800d182:	4299      	cmp	r1, r3
 800d184:	d117      	bne.n	800d1b6 <_strtod_l+0x8f6>
 800d186:	4b29      	ldr	r3, [pc, #164]	; (800d22c <_strtod_l+0x96c>)
 800d188:	429f      	cmp	r7, r3
 800d18a:	d102      	bne.n	800d192 <_strtod_l+0x8d2>
 800d18c:	3101      	adds	r1, #1
 800d18e:	f43f addf 	beq.w	800cd50 <_strtod_l+0x490>
 800d192:	4b23      	ldr	r3, [pc, #140]	; (800d220 <_strtod_l+0x960>)
 800d194:	403b      	ands	r3, r7
 800d196:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d19a:	f04f 0a00 	mov.w	sl, #0
 800d19e:	9b04      	ldr	r3, [sp, #16]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d1a4      	bne.n	800d0ee <_strtod_l+0x82e>
 800d1a4:	e5de      	b.n	800cd64 <_strtod_l+0x4a4>
 800d1a6:	f04f 33ff 	mov.w	r3, #4294967295
 800d1aa:	e7ea      	b.n	800d182 <_strtod_l+0x8c2>
 800d1ac:	4613      	mov	r3, r2
 800d1ae:	e7e8      	b.n	800d182 <_strtod_l+0x8c2>
 800d1b0:	ea53 030a 	orrs.w	r3, r3, sl
 800d1b4:	d08c      	beq.n	800d0d0 <_strtod_l+0x810>
 800d1b6:	9b08      	ldr	r3, [sp, #32]
 800d1b8:	b1db      	cbz	r3, 800d1f2 <_strtod_l+0x932>
 800d1ba:	423b      	tst	r3, r7
 800d1bc:	d0ef      	beq.n	800d19e <_strtod_l+0x8de>
 800d1be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1c0:	9a04      	ldr	r2, [sp, #16]
 800d1c2:	4650      	mov	r0, sl
 800d1c4:	4659      	mov	r1, fp
 800d1c6:	b1c3      	cbz	r3, 800d1fa <_strtod_l+0x93a>
 800d1c8:	f7ff fb5c 	bl	800c884 <sulp>
 800d1cc:	4602      	mov	r2, r0
 800d1ce:	460b      	mov	r3, r1
 800d1d0:	ec51 0b18 	vmov	r0, r1, d8
 800d1d4:	f7f3 f85a 	bl	800028c <__adddf3>
 800d1d8:	4682      	mov	sl, r0
 800d1da:	468b      	mov	fp, r1
 800d1dc:	e7df      	b.n	800d19e <_strtod_l+0x8de>
 800d1de:	4013      	ands	r3, r2
 800d1e0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d1e4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d1e8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d1ec:	f04f 3aff 	mov.w	sl, #4294967295
 800d1f0:	e7d5      	b.n	800d19e <_strtod_l+0x8de>
 800d1f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d1f4:	ea13 0f0a 	tst.w	r3, sl
 800d1f8:	e7e0      	b.n	800d1bc <_strtod_l+0x8fc>
 800d1fa:	f7ff fb43 	bl	800c884 <sulp>
 800d1fe:	4602      	mov	r2, r0
 800d200:	460b      	mov	r3, r1
 800d202:	ec51 0b18 	vmov	r0, r1, d8
 800d206:	f7f3 f83f 	bl	8000288 <__aeabi_dsub>
 800d20a:	2200      	movs	r2, #0
 800d20c:	2300      	movs	r3, #0
 800d20e:	4682      	mov	sl, r0
 800d210:	468b      	mov	fp, r1
 800d212:	f7f3 fc59 	bl	8000ac8 <__aeabi_dcmpeq>
 800d216:	2800      	cmp	r0, #0
 800d218:	d0c1      	beq.n	800d19e <_strtod_l+0x8de>
 800d21a:	e611      	b.n	800ce40 <_strtod_l+0x580>
 800d21c:	fffffc02 	.word	0xfffffc02
 800d220:	7ff00000 	.word	0x7ff00000
 800d224:	39500000 	.word	0x39500000
 800d228:	000fffff 	.word	0x000fffff
 800d22c:	7fefffff 	.word	0x7fefffff
 800d230:	08011118 	.word	0x08011118
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	f002 f824 	bl	800f284 <__ratio>
 800d23c:	ec59 8b10 	vmov	r8, r9, d0
 800d240:	ee10 0a10 	vmov	r0, s0
 800d244:	2200      	movs	r2, #0
 800d246:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d24a:	4649      	mov	r1, r9
 800d24c:	f7f3 fc50 	bl	8000af0 <__aeabi_dcmple>
 800d250:	2800      	cmp	r0, #0
 800d252:	d07a      	beq.n	800d34a <_strtod_l+0xa8a>
 800d254:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d256:	2b00      	cmp	r3, #0
 800d258:	d04a      	beq.n	800d2f0 <_strtod_l+0xa30>
 800d25a:	4b95      	ldr	r3, [pc, #596]	; (800d4b0 <_strtod_l+0xbf0>)
 800d25c:	2200      	movs	r2, #0
 800d25e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d262:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d4b0 <_strtod_l+0xbf0>
 800d266:	f04f 0800 	mov.w	r8, #0
 800d26a:	4b92      	ldr	r3, [pc, #584]	; (800d4b4 <_strtod_l+0xbf4>)
 800d26c:	403b      	ands	r3, r7
 800d26e:	930d      	str	r3, [sp, #52]	; 0x34
 800d270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d272:	4b91      	ldr	r3, [pc, #580]	; (800d4b8 <_strtod_l+0xbf8>)
 800d274:	429a      	cmp	r2, r3
 800d276:	f040 80b0 	bne.w	800d3da <_strtod_l+0xb1a>
 800d27a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d27e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d282:	ec4b ab10 	vmov	d0, sl, fp
 800d286:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d28a:	f001 ff23 	bl	800f0d4 <__ulp>
 800d28e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d292:	ec53 2b10 	vmov	r2, r3, d0
 800d296:	f7f3 f9af 	bl	80005f8 <__aeabi_dmul>
 800d29a:	4652      	mov	r2, sl
 800d29c:	465b      	mov	r3, fp
 800d29e:	f7f2 fff5 	bl	800028c <__adddf3>
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	4983      	ldr	r1, [pc, #524]	; (800d4b4 <_strtod_l+0xbf4>)
 800d2a6:	4a85      	ldr	r2, [pc, #532]	; (800d4bc <_strtod_l+0xbfc>)
 800d2a8:	4019      	ands	r1, r3
 800d2aa:	4291      	cmp	r1, r2
 800d2ac:	4682      	mov	sl, r0
 800d2ae:	d960      	bls.n	800d372 <_strtod_l+0xab2>
 800d2b0:	ee18 3a90 	vmov	r3, s17
 800d2b4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d2b8:	4293      	cmp	r3, r2
 800d2ba:	d104      	bne.n	800d2c6 <_strtod_l+0xa06>
 800d2bc:	ee18 3a10 	vmov	r3, s16
 800d2c0:	3301      	adds	r3, #1
 800d2c2:	f43f ad45 	beq.w	800cd50 <_strtod_l+0x490>
 800d2c6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800d4c8 <_strtod_l+0xc08>
 800d2ca:	f04f 3aff 	mov.w	sl, #4294967295
 800d2ce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d2d0:	4620      	mov	r0, r4
 800d2d2:	f001 fbcd 	bl	800ea70 <_Bfree>
 800d2d6:	9905      	ldr	r1, [sp, #20]
 800d2d8:	4620      	mov	r0, r4
 800d2da:	f001 fbc9 	bl	800ea70 <_Bfree>
 800d2de:	4631      	mov	r1, r6
 800d2e0:	4620      	mov	r0, r4
 800d2e2:	f001 fbc5 	bl	800ea70 <_Bfree>
 800d2e6:	4629      	mov	r1, r5
 800d2e8:	4620      	mov	r0, r4
 800d2ea:	f001 fbc1 	bl	800ea70 <_Bfree>
 800d2ee:	e61a      	b.n	800cf26 <_strtod_l+0x666>
 800d2f0:	f1ba 0f00 	cmp.w	sl, #0
 800d2f4:	d11b      	bne.n	800d32e <_strtod_l+0xa6e>
 800d2f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2fa:	b9f3      	cbnz	r3, 800d33a <_strtod_l+0xa7a>
 800d2fc:	4b6c      	ldr	r3, [pc, #432]	; (800d4b0 <_strtod_l+0xbf0>)
 800d2fe:	2200      	movs	r2, #0
 800d300:	4640      	mov	r0, r8
 800d302:	4649      	mov	r1, r9
 800d304:	f7f3 fbea 	bl	8000adc <__aeabi_dcmplt>
 800d308:	b9d0      	cbnz	r0, 800d340 <_strtod_l+0xa80>
 800d30a:	4640      	mov	r0, r8
 800d30c:	4649      	mov	r1, r9
 800d30e:	4b6c      	ldr	r3, [pc, #432]	; (800d4c0 <_strtod_l+0xc00>)
 800d310:	2200      	movs	r2, #0
 800d312:	f7f3 f971 	bl	80005f8 <__aeabi_dmul>
 800d316:	4680      	mov	r8, r0
 800d318:	4689      	mov	r9, r1
 800d31a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d31e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800d322:	9315      	str	r3, [sp, #84]	; 0x54
 800d324:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d328:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d32c:	e79d      	b.n	800d26a <_strtod_l+0x9aa>
 800d32e:	f1ba 0f01 	cmp.w	sl, #1
 800d332:	d102      	bne.n	800d33a <_strtod_l+0xa7a>
 800d334:	2f00      	cmp	r7, #0
 800d336:	f43f ad83 	beq.w	800ce40 <_strtod_l+0x580>
 800d33a:	4b62      	ldr	r3, [pc, #392]	; (800d4c4 <_strtod_l+0xc04>)
 800d33c:	2200      	movs	r2, #0
 800d33e:	e78e      	b.n	800d25e <_strtod_l+0x99e>
 800d340:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800d4c0 <_strtod_l+0xc00>
 800d344:	f04f 0800 	mov.w	r8, #0
 800d348:	e7e7      	b.n	800d31a <_strtod_l+0xa5a>
 800d34a:	4b5d      	ldr	r3, [pc, #372]	; (800d4c0 <_strtod_l+0xc00>)
 800d34c:	4640      	mov	r0, r8
 800d34e:	4649      	mov	r1, r9
 800d350:	2200      	movs	r2, #0
 800d352:	f7f3 f951 	bl	80005f8 <__aeabi_dmul>
 800d356:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d358:	4680      	mov	r8, r0
 800d35a:	4689      	mov	r9, r1
 800d35c:	b933      	cbnz	r3, 800d36c <_strtod_l+0xaac>
 800d35e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d362:	900e      	str	r0, [sp, #56]	; 0x38
 800d364:	930f      	str	r3, [sp, #60]	; 0x3c
 800d366:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800d36a:	e7dd      	b.n	800d328 <_strtod_l+0xa68>
 800d36c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800d370:	e7f9      	b.n	800d366 <_strtod_l+0xaa6>
 800d372:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d376:	9b04      	ldr	r3, [sp, #16]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d1a8      	bne.n	800d2ce <_strtod_l+0xa0e>
 800d37c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d380:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d382:	0d1b      	lsrs	r3, r3, #20
 800d384:	051b      	lsls	r3, r3, #20
 800d386:	429a      	cmp	r2, r3
 800d388:	d1a1      	bne.n	800d2ce <_strtod_l+0xa0e>
 800d38a:	4640      	mov	r0, r8
 800d38c:	4649      	mov	r1, r9
 800d38e:	f7f3 fc93 	bl	8000cb8 <__aeabi_d2lz>
 800d392:	f7f3 f903 	bl	800059c <__aeabi_l2d>
 800d396:	4602      	mov	r2, r0
 800d398:	460b      	mov	r3, r1
 800d39a:	4640      	mov	r0, r8
 800d39c:	4649      	mov	r1, r9
 800d39e:	f7f2 ff73 	bl	8000288 <__aeabi_dsub>
 800d3a2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d3a4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d3a8:	ea43 030a 	orr.w	r3, r3, sl
 800d3ac:	4313      	orrs	r3, r2
 800d3ae:	4680      	mov	r8, r0
 800d3b0:	4689      	mov	r9, r1
 800d3b2:	d055      	beq.n	800d460 <_strtod_l+0xba0>
 800d3b4:	a336      	add	r3, pc, #216	; (adr r3, 800d490 <_strtod_l+0xbd0>)
 800d3b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ba:	f7f3 fb8f 	bl	8000adc <__aeabi_dcmplt>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	f47f acd0 	bne.w	800cd64 <_strtod_l+0x4a4>
 800d3c4:	a334      	add	r3, pc, #208	; (adr r3, 800d498 <_strtod_l+0xbd8>)
 800d3c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ca:	4640      	mov	r0, r8
 800d3cc:	4649      	mov	r1, r9
 800d3ce:	f7f3 fba3 	bl	8000b18 <__aeabi_dcmpgt>
 800d3d2:	2800      	cmp	r0, #0
 800d3d4:	f43f af7b 	beq.w	800d2ce <_strtod_l+0xa0e>
 800d3d8:	e4c4      	b.n	800cd64 <_strtod_l+0x4a4>
 800d3da:	9b04      	ldr	r3, [sp, #16]
 800d3dc:	b333      	cbz	r3, 800d42c <_strtod_l+0xb6c>
 800d3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d3e0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d3e4:	d822      	bhi.n	800d42c <_strtod_l+0xb6c>
 800d3e6:	a32e      	add	r3, pc, #184	; (adr r3, 800d4a0 <_strtod_l+0xbe0>)
 800d3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ec:	4640      	mov	r0, r8
 800d3ee:	4649      	mov	r1, r9
 800d3f0:	f7f3 fb7e 	bl	8000af0 <__aeabi_dcmple>
 800d3f4:	b1a0      	cbz	r0, 800d420 <_strtod_l+0xb60>
 800d3f6:	4649      	mov	r1, r9
 800d3f8:	4640      	mov	r0, r8
 800d3fa:	f7f3 fbd5 	bl	8000ba8 <__aeabi_d2uiz>
 800d3fe:	2801      	cmp	r0, #1
 800d400:	bf38      	it	cc
 800d402:	2001      	movcc	r0, #1
 800d404:	f7f3 f87e 	bl	8000504 <__aeabi_ui2d>
 800d408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d40a:	4680      	mov	r8, r0
 800d40c:	4689      	mov	r9, r1
 800d40e:	bb23      	cbnz	r3, 800d45a <_strtod_l+0xb9a>
 800d410:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d414:	9010      	str	r0, [sp, #64]	; 0x40
 800d416:	9311      	str	r3, [sp, #68]	; 0x44
 800d418:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d41c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800d420:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d422:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800d424:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d428:	1a9b      	subs	r3, r3, r2
 800d42a:	9309      	str	r3, [sp, #36]	; 0x24
 800d42c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d430:	eeb0 0a48 	vmov.f32	s0, s16
 800d434:	eef0 0a68 	vmov.f32	s1, s17
 800d438:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d43c:	f001 fe4a 	bl	800f0d4 <__ulp>
 800d440:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d444:	ec53 2b10 	vmov	r2, r3, d0
 800d448:	f7f3 f8d6 	bl	80005f8 <__aeabi_dmul>
 800d44c:	ec53 2b18 	vmov	r2, r3, d8
 800d450:	f7f2 ff1c 	bl	800028c <__adddf3>
 800d454:	4682      	mov	sl, r0
 800d456:	468b      	mov	fp, r1
 800d458:	e78d      	b.n	800d376 <_strtod_l+0xab6>
 800d45a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800d45e:	e7db      	b.n	800d418 <_strtod_l+0xb58>
 800d460:	a311      	add	r3, pc, #68	; (adr r3, 800d4a8 <_strtod_l+0xbe8>)
 800d462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d466:	f7f3 fb39 	bl	8000adc <__aeabi_dcmplt>
 800d46a:	e7b2      	b.n	800d3d2 <_strtod_l+0xb12>
 800d46c:	2300      	movs	r3, #0
 800d46e:	930a      	str	r3, [sp, #40]	; 0x28
 800d470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d472:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d474:	6013      	str	r3, [r2, #0]
 800d476:	f7ff ba6b 	b.w	800c950 <_strtod_l+0x90>
 800d47a:	2a65      	cmp	r2, #101	; 0x65
 800d47c:	f43f ab5f 	beq.w	800cb3e <_strtod_l+0x27e>
 800d480:	2a45      	cmp	r2, #69	; 0x45
 800d482:	f43f ab5c 	beq.w	800cb3e <_strtod_l+0x27e>
 800d486:	2301      	movs	r3, #1
 800d488:	f7ff bb94 	b.w	800cbb4 <_strtod_l+0x2f4>
 800d48c:	f3af 8000 	nop.w
 800d490:	94a03595 	.word	0x94a03595
 800d494:	3fdfffff 	.word	0x3fdfffff
 800d498:	35afe535 	.word	0x35afe535
 800d49c:	3fe00000 	.word	0x3fe00000
 800d4a0:	ffc00000 	.word	0xffc00000
 800d4a4:	41dfffff 	.word	0x41dfffff
 800d4a8:	94a03595 	.word	0x94a03595
 800d4ac:	3fcfffff 	.word	0x3fcfffff
 800d4b0:	3ff00000 	.word	0x3ff00000
 800d4b4:	7ff00000 	.word	0x7ff00000
 800d4b8:	7fe00000 	.word	0x7fe00000
 800d4bc:	7c9fffff 	.word	0x7c9fffff
 800d4c0:	3fe00000 	.word	0x3fe00000
 800d4c4:	bff00000 	.word	0xbff00000
 800d4c8:	7fefffff 	.word	0x7fefffff

0800d4cc <_strtod_r>:
 800d4cc:	4b01      	ldr	r3, [pc, #4]	; (800d4d4 <_strtod_r+0x8>)
 800d4ce:	f7ff b9f7 	b.w	800c8c0 <_strtod_l>
 800d4d2:	bf00      	nop
 800d4d4:	20000078 	.word	0x20000078

0800d4d8 <_strtol_l.constprop.0>:
 800d4d8:	2b01      	cmp	r3, #1
 800d4da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4de:	d001      	beq.n	800d4e4 <_strtol_l.constprop.0+0xc>
 800d4e0:	2b24      	cmp	r3, #36	; 0x24
 800d4e2:	d906      	bls.n	800d4f2 <_strtol_l.constprop.0+0x1a>
 800d4e4:	f7fe fae6 	bl	800bab4 <__errno>
 800d4e8:	2316      	movs	r3, #22
 800d4ea:	6003      	str	r3, [r0, #0]
 800d4ec:	2000      	movs	r0, #0
 800d4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d5d8 <_strtol_l.constprop.0+0x100>
 800d4f6:	460d      	mov	r5, r1
 800d4f8:	462e      	mov	r6, r5
 800d4fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d502:	f017 0708 	ands.w	r7, r7, #8
 800d506:	d1f7      	bne.n	800d4f8 <_strtol_l.constprop.0+0x20>
 800d508:	2c2d      	cmp	r4, #45	; 0x2d
 800d50a:	d132      	bne.n	800d572 <_strtol_l.constprop.0+0x9a>
 800d50c:	782c      	ldrb	r4, [r5, #0]
 800d50e:	2701      	movs	r7, #1
 800d510:	1cb5      	adds	r5, r6, #2
 800d512:	2b00      	cmp	r3, #0
 800d514:	d05b      	beq.n	800d5ce <_strtol_l.constprop.0+0xf6>
 800d516:	2b10      	cmp	r3, #16
 800d518:	d109      	bne.n	800d52e <_strtol_l.constprop.0+0x56>
 800d51a:	2c30      	cmp	r4, #48	; 0x30
 800d51c:	d107      	bne.n	800d52e <_strtol_l.constprop.0+0x56>
 800d51e:	782c      	ldrb	r4, [r5, #0]
 800d520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d524:	2c58      	cmp	r4, #88	; 0x58
 800d526:	d14d      	bne.n	800d5c4 <_strtol_l.constprop.0+0xec>
 800d528:	786c      	ldrb	r4, [r5, #1]
 800d52a:	2310      	movs	r3, #16
 800d52c:	3502      	adds	r5, #2
 800d52e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d532:	f108 38ff 	add.w	r8, r8, #4294967295
 800d536:	f04f 0c00 	mov.w	ip, #0
 800d53a:	fbb8 f9f3 	udiv	r9, r8, r3
 800d53e:	4666      	mov	r6, ip
 800d540:	fb03 8a19 	mls	sl, r3, r9, r8
 800d544:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d548:	f1be 0f09 	cmp.w	lr, #9
 800d54c:	d816      	bhi.n	800d57c <_strtol_l.constprop.0+0xa4>
 800d54e:	4674      	mov	r4, lr
 800d550:	42a3      	cmp	r3, r4
 800d552:	dd24      	ble.n	800d59e <_strtol_l.constprop.0+0xc6>
 800d554:	f1bc 0f00 	cmp.w	ip, #0
 800d558:	db1e      	blt.n	800d598 <_strtol_l.constprop.0+0xc0>
 800d55a:	45b1      	cmp	r9, r6
 800d55c:	d31c      	bcc.n	800d598 <_strtol_l.constprop.0+0xc0>
 800d55e:	d101      	bne.n	800d564 <_strtol_l.constprop.0+0x8c>
 800d560:	45a2      	cmp	sl, r4
 800d562:	db19      	blt.n	800d598 <_strtol_l.constprop.0+0xc0>
 800d564:	fb06 4603 	mla	r6, r6, r3, r4
 800d568:	f04f 0c01 	mov.w	ip, #1
 800d56c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d570:	e7e8      	b.n	800d544 <_strtol_l.constprop.0+0x6c>
 800d572:	2c2b      	cmp	r4, #43	; 0x2b
 800d574:	bf04      	itt	eq
 800d576:	782c      	ldrbeq	r4, [r5, #0]
 800d578:	1cb5      	addeq	r5, r6, #2
 800d57a:	e7ca      	b.n	800d512 <_strtol_l.constprop.0+0x3a>
 800d57c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d580:	f1be 0f19 	cmp.w	lr, #25
 800d584:	d801      	bhi.n	800d58a <_strtol_l.constprop.0+0xb2>
 800d586:	3c37      	subs	r4, #55	; 0x37
 800d588:	e7e2      	b.n	800d550 <_strtol_l.constprop.0+0x78>
 800d58a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d58e:	f1be 0f19 	cmp.w	lr, #25
 800d592:	d804      	bhi.n	800d59e <_strtol_l.constprop.0+0xc6>
 800d594:	3c57      	subs	r4, #87	; 0x57
 800d596:	e7db      	b.n	800d550 <_strtol_l.constprop.0+0x78>
 800d598:	f04f 3cff 	mov.w	ip, #4294967295
 800d59c:	e7e6      	b.n	800d56c <_strtol_l.constprop.0+0x94>
 800d59e:	f1bc 0f00 	cmp.w	ip, #0
 800d5a2:	da05      	bge.n	800d5b0 <_strtol_l.constprop.0+0xd8>
 800d5a4:	2322      	movs	r3, #34	; 0x22
 800d5a6:	6003      	str	r3, [r0, #0]
 800d5a8:	4646      	mov	r6, r8
 800d5aa:	b942      	cbnz	r2, 800d5be <_strtol_l.constprop.0+0xe6>
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	e79e      	b.n	800d4ee <_strtol_l.constprop.0+0x16>
 800d5b0:	b107      	cbz	r7, 800d5b4 <_strtol_l.constprop.0+0xdc>
 800d5b2:	4276      	negs	r6, r6
 800d5b4:	2a00      	cmp	r2, #0
 800d5b6:	d0f9      	beq.n	800d5ac <_strtol_l.constprop.0+0xd4>
 800d5b8:	f1bc 0f00 	cmp.w	ip, #0
 800d5bc:	d000      	beq.n	800d5c0 <_strtol_l.constprop.0+0xe8>
 800d5be:	1e69      	subs	r1, r5, #1
 800d5c0:	6011      	str	r1, [r2, #0]
 800d5c2:	e7f3      	b.n	800d5ac <_strtol_l.constprop.0+0xd4>
 800d5c4:	2430      	movs	r4, #48	; 0x30
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d1b1      	bne.n	800d52e <_strtol_l.constprop.0+0x56>
 800d5ca:	2308      	movs	r3, #8
 800d5cc:	e7af      	b.n	800d52e <_strtol_l.constprop.0+0x56>
 800d5ce:	2c30      	cmp	r4, #48	; 0x30
 800d5d0:	d0a5      	beq.n	800d51e <_strtol_l.constprop.0+0x46>
 800d5d2:	230a      	movs	r3, #10
 800d5d4:	e7ab      	b.n	800d52e <_strtol_l.constprop.0+0x56>
 800d5d6:	bf00      	nop
 800d5d8:	08011141 	.word	0x08011141

0800d5dc <_strtol_r>:
 800d5dc:	f7ff bf7c 	b.w	800d4d8 <_strtol_l.constprop.0>

0800d5e0 <quorem>:
 800d5e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	6903      	ldr	r3, [r0, #16]
 800d5e6:	690c      	ldr	r4, [r1, #16]
 800d5e8:	42a3      	cmp	r3, r4
 800d5ea:	4607      	mov	r7, r0
 800d5ec:	f2c0 8081 	blt.w	800d6f2 <quorem+0x112>
 800d5f0:	3c01      	subs	r4, #1
 800d5f2:	f101 0814 	add.w	r8, r1, #20
 800d5f6:	f100 0514 	add.w	r5, r0, #20
 800d5fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5fe:	9301      	str	r3, [sp, #4]
 800d600:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d608:	3301      	adds	r3, #1
 800d60a:	429a      	cmp	r2, r3
 800d60c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d610:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d614:	fbb2 f6f3 	udiv	r6, r2, r3
 800d618:	d331      	bcc.n	800d67e <quorem+0x9e>
 800d61a:	f04f 0e00 	mov.w	lr, #0
 800d61e:	4640      	mov	r0, r8
 800d620:	46ac      	mov	ip, r5
 800d622:	46f2      	mov	sl, lr
 800d624:	f850 2b04 	ldr.w	r2, [r0], #4
 800d628:	b293      	uxth	r3, r2
 800d62a:	fb06 e303 	mla	r3, r6, r3, lr
 800d62e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d632:	b29b      	uxth	r3, r3
 800d634:	ebaa 0303 	sub.w	r3, sl, r3
 800d638:	f8dc a000 	ldr.w	sl, [ip]
 800d63c:	0c12      	lsrs	r2, r2, #16
 800d63e:	fa13 f38a 	uxtah	r3, r3, sl
 800d642:	fb06 e202 	mla	r2, r6, r2, lr
 800d646:	9300      	str	r3, [sp, #0]
 800d648:	9b00      	ldr	r3, [sp, #0]
 800d64a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d64e:	b292      	uxth	r2, r2
 800d650:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d654:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d658:	f8bd 3000 	ldrh.w	r3, [sp]
 800d65c:	4581      	cmp	r9, r0
 800d65e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d662:	f84c 3b04 	str.w	r3, [ip], #4
 800d666:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d66a:	d2db      	bcs.n	800d624 <quorem+0x44>
 800d66c:	f855 300b 	ldr.w	r3, [r5, fp]
 800d670:	b92b      	cbnz	r3, 800d67e <quorem+0x9e>
 800d672:	9b01      	ldr	r3, [sp, #4]
 800d674:	3b04      	subs	r3, #4
 800d676:	429d      	cmp	r5, r3
 800d678:	461a      	mov	r2, r3
 800d67a:	d32e      	bcc.n	800d6da <quorem+0xfa>
 800d67c:	613c      	str	r4, [r7, #16]
 800d67e:	4638      	mov	r0, r7
 800d680:	f001 fc82 	bl	800ef88 <__mcmp>
 800d684:	2800      	cmp	r0, #0
 800d686:	db24      	blt.n	800d6d2 <quorem+0xf2>
 800d688:	3601      	adds	r6, #1
 800d68a:	4628      	mov	r0, r5
 800d68c:	f04f 0c00 	mov.w	ip, #0
 800d690:	f858 2b04 	ldr.w	r2, [r8], #4
 800d694:	f8d0 e000 	ldr.w	lr, [r0]
 800d698:	b293      	uxth	r3, r2
 800d69a:	ebac 0303 	sub.w	r3, ip, r3
 800d69e:	0c12      	lsrs	r2, r2, #16
 800d6a0:	fa13 f38e 	uxtah	r3, r3, lr
 800d6a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d6a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6b2:	45c1      	cmp	r9, r8
 800d6b4:	f840 3b04 	str.w	r3, [r0], #4
 800d6b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d6bc:	d2e8      	bcs.n	800d690 <quorem+0xb0>
 800d6be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d6c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d6c6:	b922      	cbnz	r2, 800d6d2 <quorem+0xf2>
 800d6c8:	3b04      	subs	r3, #4
 800d6ca:	429d      	cmp	r5, r3
 800d6cc:	461a      	mov	r2, r3
 800d6ce:	d30a      	bcc.n	800d6e6 <quorem+0x106>
 800d6d0:	613c      	str	r4, [r7, #16]
 800d6d2:	4630      	mov	r0, r6
 800d6d4:	b003      	add	sp, #12
 800d6d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6da:	6812      	ldr	r2, [r2, #0]
 800d6dc:	3b04      	subs	r3, #4
 800d6de:	2a00      	cmp	r2, #0
 800d6e0:	d1cc      	bne.n	800d67c <quorem+0x9c>
 800d6e2:	3c01      	subs	r4, #1
 800d6e4:	e7c7      	b.n	800d676 <quorem+0x96>
 800d6e6:	6812      	ldr	r2, [r2, #0]
 800d6e8:	3b04      	subs	r3, #4
 800d6ea:	2a00      	cmp	r2, #0
 800d6ec:	d1f0      	bne.n	800d6d0 <quorem+0xf0>
 800d6ee:	3c01      	subs	r4, #1
 800d6f0:	e7eb      	b.n	800d6ca <quorem+0xea>
 800d6f2:	2000      	movs	r0, #0
 800d6f4:	e7ee      	b.n	800d6d4 <quorem+0xf4>
	...

0800d6f8 <_dtoa_r>:
 800d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	ed2d 8b04 	vpush	{d8-d9}
 800d700:	ec57 6b10 	vmov	r6, r7, d0
 800d704:	b093      	sub	sp, #76	; 0x4c
 800d706:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d708:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d70c:	9106      	str	r1, [sp, #24]
 800d70e:	ee10 aa10 	vmov	sl, s0
 800d712:	4604      	mov	r4, r0
 800d714:	9209      	str	r2, [sp, #36]	; 0x24
 800d716:	930c      	str	r3, [sp, #48]	; 0x30
 800d718:	46bb      	mov	fp, r7
 800d71a:	b975      	cbnz	r5, 800d73a <_dtoa_r+0x42>
 800d71c:	2010      	movs	r0, #16
 800d71e:	f001 f94d 	bl	800e9bc <malloc>
 800d722:	4602      	mov	r2, r0
 800d724:	6260      	str	r0, [r4, #36]	; 0x24
 800d726:	b920      	cbnz	r0, 800d732 <_dtoa_r+0x3a>
 800d728:	4ba7      	ldr	r3, [pc, #668]	; (800d9c8 <_dtoa_r+0x2d0>)
 800d72a:	21ea      	movs	r1, #234	; 0xea
 800d72c:	48a7      	ldr	r0, [pc, #668]	; (800d9cc <_dtoa_r+0x2d4>)
 800d72e:	f002 f8ad 	bl	800f88c <__assert_func>
 800d732:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d736:	6005      	str	r5, [r0, #0]
 800d738:	60c5      	str	r5, [r0, #12]
 800d73a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d73c:	6819      	ldr	r1, [r3, #0]
 800d73e:	b151      	cbz	r1, 800d756 <_dtoa_r+0x5e>
 800d740:	685a      	ldr	r2, [r3, #4]
 800d742:	604a      	str	r2, [r1, #4]
 800d744:	2301      	movs	r3, #1
 800d746:	4093      	lsls	r3, r2
 800d748:	608b      	str	r3, [r1, #8]
 800d74a:	4620      	mov	r0, r4
 800d74c:	f001 f990 	bl	800ea70 <_Bfree>
 800d750:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d752:	2200      	movs	r2, #0
 800d754:	601a      	str	r2, [r3, #0]
 800d756:	1e3b      	subs	r3, r7, #0
 800d758:	bfaa      	itet	ge
 800d75a:	2300      	movge	r3, #0
 800d75c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d760:	f8c8 3000 	strge.w	r3, [r8]
 800d764:	4b9a      	ldr	r3, [pc, #616]	; (800d9d0 <_dtoa_r+0x2d8>)
 800d766:	bfbc      	itt	lt
 800d768:	2201      	movlt	r2, #1
 800d76a:	f8c8 2000 	strlt.w	r2, [r8]
 800d76e:	ea33 030b 	bics.w	r3, r3, fp
 800d772:	d11b      	bne.n	800d7ac <_dtoa_r+0xb4>
 800d774:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d776:	f242 730f 	movw	r3, #9999	; 0x270f
 800d77a:	6013      	str	r3, [r2, #0]
 800d77c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d780:	4333      	orrs	r3, r6
 800d782:	f000 8592 	beq.w	800e2aa <_dtoa_r+0xbb2>
 800d786:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d788:	b963      	cbnz	r3, 800d7a4 <_dtoa_r+0xac>
 800d78a:	4b92      	ldr	r3, [pc, #584]	; (800d9d4 <_dtoa_r+0x2dc>)
 800d78c:	e022      	b.n	800d7d4 <_dtoa_r+0xdc>
 800d78e:	4b92      	ldr	r3, [pc, #584]	; (800d9d8 <_dtoa_r+0x2e0>)
 800d790:	9301      	str	r3, [sp, #4]
 800d792:	3308      	adds	r3, #8
 800d794:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d796:	6013      	str	r3, [r2, #0]
 800d798:	9801      	ldr	r0, [sp, #4]
 800d79a:	b013      	add	sp, #76	; 0x4c
 800d79c:	ecbd 8b04 	vpop	{d8-d9}
 800d7a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7a4:	4b8b      	ldr	r3, [pc, #556]	; (800d9d4 <_dtoa_r+0x2dc>)
 800d7a6:	9301      	str	r3, [sp, #4]
 800d7a8:	3303      	adds	r3, #3
 800d7aa:	e7f3      	b.n	800d794 <_dtoa_r+0x9c>
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	4650      	mov	r0, sl
 800d7b2:	4659      	mov	r1, fp
 800d7b4:	f7f3 f988 	bl	8000ac8 <__aeabi_dcmpeq>
 800d7b8:	ec4b ab19 	vmov	d9, sl, fp
 800d7bc:	4680      	mov	r8, r0
 800d7be:	b158      	cbz	r0, 800d7d8 <_dtoa_r+0xe0>
 800d7c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	6013      	str	r3, [r2, #0]
 800d7c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f000 856b 	beq.w	800e2a4 <_dtoa_r+0xbac>
 800d7ce:	4883      	ldr	r0, [pc, #524]	; (800d9dc <_dtoa_r+0x2e4>)
 800d7d0:	6018      	str	r0, [r3, #0]
 800d7d2:	1e43      	subs	r3, r0, #1
 800d7d4:	9301      	str	r3, [sp, #4]
 800d7d6:	e7df      	b.n	800d798 <_dtoa_r+0xa0>
 800d7d8:	ec4b ab10 	vmov	d0, sl, fp
 800d7dc:	aa10      	add	r2, sp, #64	; 0x40
 800d7de:	a911      	add	r1, sp, #68	; 0x44
 800d7e0:	4620      	mov	r0, r4
 800d7e2:	f001 fcf3 	bl	800f1cc <__d2b>
 800d7e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d7ea:	ee08 0a10 	vmov	s16, r0
 800d7ee:	2d00      	cmp	r5, #0
 800d7f0:	f000 8084 	beq.w	800d8fc <_dtoa_r+0x204>
 800d7f4:	ee19 3a90 	vmov	r3, s19
 800d7f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d7fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d800:	4656      	mov	r6, sl
 800d802:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d806:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d80a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d80e:	4b74      	ldr	r3, [pc, #464]	; (800d9e0 <_dtoa_r+0x2e8>)
 800d810:	2200      	movs	r2, #0
 800d812:	4630      	mov	r0, r6
 800d814:	4639      	mov	r1, r7
 800d816:	f7f2 fd37 	bl	8000288 <__aeabi_dsub>
 800d81a:	a365      	add	r3, pc, #404	; (adr r3, 800d9b0 <_dtoa_r+0x2b8>)
 800d81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d820:	f7f2 feea 	bl	80005f8 <__aeabi_dmul>
 800d824:	a364      	add	r3, pc, #400	; (adr r3, 800d9b8 <_dtoa_r+0x2c0>)
 800d826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d82a:	f7f2 fd2f 	bl	800028c <__adddf3>
 800d82e:	4606      	mov	r6, r0
 800d830:	4628      	mov	r0, r5
 800d832:	460f      	mov	r7, r1
 800d834:	f7f2 fe76 	bl	8000524 <__aeabi_i2d>
 800d838:	a361      	add	r3, pc, #388	; (adr r3, 800d9c0 <_dtoa_r+0x2c8>)
 800d83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d83e:	f7f2 fedb 	bl	80005f8 <__aeabi_dmul>
 800d842:	4602      	mov	r2, r0
 800d844:	460b      	mov	r3, r1
 800d846:	4630      	mov	r0, r6
 800d848:	4639      	mov	r1, r7
 800d84a:	f7f2 fd1f 	bl	800028c <__adddf3>
 800d84e:	4606      	mov	r6, r0
 800d850:	460f      	mov	r7, r1
 800d852:	f7f3 f981 	bl	8000b58 <__aeabi_d2iz>
 800d856:	2200      	movs	r2, #0
 800d858:	9000      	str	r0, [sp, #0]
 800d85a:	2300      	movs	r3, #0
 800d85c:	4630      	mov	r0, r6
 800d85e:	4639      	mov	r1, r7
 800d860:	f7f3 f93c 	bl	8000adc <__aeabi_dcmplt>
 800d864:	b150      	cbz	r0, 800d87c <_dtoa_r+0x184>
 800d866:	9800      	ldr	r0, [sp, #0]
 800d868:	f7f2 fe5c 	bl	8000524 <__aeabi_i2d>
 800d86c:	4632      	mov	r2, r6
 800d86e:	463b      	mov	r3, r7
 800d870:	f7f3 f92a 	bl	8000ac8 <__aeabi_dcmpeq>
 800d874:	b910      	cbnz	r0, 800d87c <_dtoa_r+0x184>
 800d876:	9b00      	ldr	r3, [sp, #0]
 800d878:	3b01      	subs	r3, #1
 800d87a:	9300      	str	r3, [sp, #0]
 800d87c:	9b00      	ldr	r3, [sp, #0]
 800d87e:	2b16      	cmp	r3, #22
 800d880:	d85a      	bhi.n	800d938 <_dtoa_r+0x240>
 800d882:	9a00      	ldr	r2, [sp, #0]
 800d884:	4b57      	ldr	r3, [pc, #348]	; (800d9e4 <_dtoa_r+0x2ec>)
 800d886:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d88a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d88e:	ec51 0b19 	vmov	r0, r1, d9
 800d892:	f7f3 f923 	bl	8000adc <__aeabi_dcmplt>
 800d896:	2800      	cmp	r0, #0
 800d898:	d050      	beq.n	800d93c <_dtoa_r+0x244>
 800d89a:	9b00      	ldr	r3, [sp, #0]
 800d89c:	3b01      	subs	r3, #1
 800d89e:	9300      	str	r3, [sp, #0]
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d8a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d8a6:	1b5d      	subs	r5, r3, r5
 800d8a8:	1e6b      	subs	r3, r5, #1
 800d8aa:	9305      	str	r3, [sp, #20]
 800d8ac:	bf45      	ittet	mi
 800d8ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800d8b2:	9304      	strmi	r3, [sp, #16]
 800d8b4:	2300      	movpl	r3, #0
 800d8b6:	2300      	movmi	r3, #0
 800d8b8:	bf4c      	ite	mi
 800d8ba:	9305      	strmi	r3, [sp, #20]
 800d8bc:	9304      	strpl	r3, [sp, #16]
 800d8be:	9b00      	ldr	r3, [sp, #0]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	db3d      	blt.n	800d940 <_dtoa_r+0x248>
 800d8c4:	9b05      	ldr	r3, [sp, #20]
 800d8c6:	9a00      	ldr	r2, [sp, #0]
 800d8c8:	920a      	str	r2, [sp, #40]	; 0x28
 800d8ca:	4413      	add	r3, r2
 800d8cc:	9305      	str	r3, [sp, #20]
 800d8ce:	2300      	movs	r3, #0
 800d8d0:	9307      	str	r3, [sp, #28]
 800d8d2:	9b06      	ldr	r3, [sp, #24]
 800d8d4:	2b09      	cmp	r3, #9
 800d8d6:	f200 8089 	bhi.w	800d9ec <_dtoa_r+0x2f4>
 800d8da:	2b05      	cmp	r3, #5
 800d8dc:	bfc4      	itt	gt
 800d8de:	3b04      	subgt	r3, #4
 800d8e0:	9306      	strgt	r3, [sp, #24]
 800d8e2:	9b06      	ldr	r3, [sp, #24]
 800d8e4:	f1a3 0302 	sub.w	r3, r3, #2
 800d8e8:	bfcc      	ite	gt
 800d8ea:	2500      	movgt	r5, #0
 800d8ec:	2501      	movle	r5, #1
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	f200 8087 	bhi.w	800da02 <_dtoa_r+0x30a>
 800d8f4:	e8df f003 	tbb	[pc, r3]
 800d8f8:	59383a2d 	.word	0x59383a2d
 800d8fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d900:	441d      	add	r5, r3
 800d902:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d906:	2b20      	cmp	r3, #32
 800d908:	bfc1      	itttt	gt
 800d90a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d90e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d912:	fa0b f303 	lslgt.w	r3, fp, r3
 800d916:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d91a:	bfda      	itte	le
 800d91c:	f1c3 0320 	rsble	r3, r3, #32
 800d920:	fa06 f003 	lslle.w	r0, r6, r3
 800d924:	4318      	orrgt	r0, r3
 800d926:	f7f2 fded 	bl	8000504 <__aeabi_ui2d>
 800d92a:	2301      	movs	r3, #1
 800d92c:	4606      	mov	r6, r0
 800d92e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d932:	3d01      	subs	r5, #1
 800d934:	930e      	str	r3, [sp, #56]	; 0x38
 800d936:	e76a      	b.n	800d80e <_dtoa_r+0x116>
 800d938:	2301      	movs	r3, #1
 800d93a:	e7b2      	b.n	800d8a2 <_dtoa_r+0x1aa>
 800d93c:	900b      	str	r0, [sp, #44]	; 0x2c
 800d93e:	e7b1      	b.n	800d8a4 <_dtoa_r+0x1ac>
 800d940:	9b04      	ldr	r3, [sp, #16]
 800d942:	9a00      	ldr	r2, [sp, #0]
 800d944:	1a9b      	subs	r3, r3, r2
 800d946:	9304      	str	r3, [sp, #16]
 800d948:	4253      	negs	r3, r2
 800d94a:	9307      	str	r3, [sp, #28]
 800d94c:	2300      	movs	r3, #0
 800d94e:	930a      	str	r3, [sp, #40]	; 0x28
 800d950:	e7bf      	b.n	800d8d2 <_dtoa_r+0x1da>
 800d952:	2300      	movs	r3, #0
 800d954:	9308      	str	r3, [sp, #32]
 800d956:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d958:	2b00      	cmp	r3, #0
 800d95a:	dc55      	bgt.n	800da08 <_dtoa_r+0x310>
 800d95c:	2301      	movs	r3, #1
 800d95e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d962:	461a      	mov	r2, r3
 800d964:	9209      	str	r2, [sp, #36]	; 0x24
 800d966:	e00c      	b.n	800d982 <_dtoa_r+0x28a>
 800d968:	2301      	movs	r3, #1
 800d96a:	e7f3      	b.n	800d954 <_dtoa_r+0x25c>
 800d96c:	2300      	movs	r3, #0
 800d96e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d970:	9308      	str	r3, [sp, #32]
 800d972:	9b00      	ldr	r3, [sp, #0]
 800d974:	4413      	add	r3, r2
 800d976:	9302      	str	r3, [sp, #8]
 800d978:	3301      	adds	r3, #1
 800d97a:	2b01      	cmp	r3, #1
 800d97c:	9303      	str	r3, [sp, #12]
 800d97e:	bfb8      	it	lt
 800d980:	2301      	movlt	r3, #1
 800d982:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d984:	2200      	movs	r2, #0
 800d986:	6042      	str	r2, [r0, #4]
 800d988:	2204      	movs	r2, #4
 800d98a:	f102 0614 	add.w	r6, r2, #20
 800d98e:	429e      	cmp	r6, r3
 800d990:	6841      	ldr	r1, [r0, #4]
 800d992:	d93d      	bls.n	800da10 <_dtoa_r+0x318>
 800d994:	4620      	mov	r0, r4
 800d996:	f001 f82b 	bl	800e9f0 <_Balloc>
 800d99a:	9001      	str	r0, [sp, #4]
 800d99c:	2800      	cmp	r0, #0
 800d99e:	d13b      	bne.n	800da18 <_dtoa_r+0x320>
 800d9a0:	4b11      	ldr	r3, [pc, #68]	; (800d9e8 <_dtoa_r+0x2f0>)
 800d9a2:	4602      	mov	r2, r0
 800d9a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d9a8:	e6c0      	b.n	800d72c <_dtoa_r+0x34>
 800d9aa:	2301      	movs	r3, #1
 800d9ac:	e7df      	b.n	800d96e <_dtoa_r+0x276>
 800d9ae:	bf00      	nop
 800d9b0:	636f4361 	.word	0x636f4361
 800d9b4:	3fd287a7 	.word	0x3fd287a7
 800d9b8:	8b60c8b3 	.word	0x8b60c8b3
 800d9bc:	3fc68a28 	.word	0x3fc68a28
 800d9c0:	509f79fb 	.word	0x509f79fb
 800d9c4:	3fd34413 	.word	0x3fd34413
 800d9c8:	0801124e 	.word	0x0801124e
 800d9cc:	08011265 	.word	0x08011265
 800d9d0:	7ff00000 	.word	0x7ff00000
 800d9d4:	0801124a 	.word	0x0801124a
 800d9d8:	08011241 	.word	0x08011241
 800d9dc:	080110c5 	.word	0x080110c5
 800d9e0:	3ff80000 	.word	0x3ff80000
 800d9e4:	080113d0 	.word	0x080113d0
 800d9e8:	080112c0 	.word	0x080112c0
 800d9ec:	2501      	movs	r5, #1
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	9306      	str	r3, [sp, #24]
 800d9f2:	9508      	str	r5, [sp, #32]
 800d9f4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	2312      	movs	r3, #18
 800da00:	e7b0      	b.n	800d964 <_dtoa_r+0x26c>
 800da02:	2301      	movs	r3, #1
 800da04:	9308      	str	r3, [sp, #32]
 800da06:	e7f5      	b.n	800d9f4 <_dtoa_r+0x2fc>
 800da08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da0a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800da0e:	e7b8      	b.n	800d982 <_dtoa_r+0x28a>
 800da10:	3101      	adds	r1, #1
 800da12:	6041      	str	r1, [r0, #4]
 800da14:	0052      	lsls	r2, r2, #1
 800da16:	e7b8      	b.n	800d98a <_dtoa_r+0x292>
 800da18:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800da1a:	9a01      	ldr	r2, [sp, #4]
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	9b03      	ldr	r3, [sp, #12]
 800da20:	2b0e      	cmp	r3, #14
 800da22:	f200 809d 	bhi.w	800db60 <_dtoa_r+0x468>
 800da26:	2d00      	cmp	r5, #0
 800da28:	f000 809a 	beq.w	800db60 <_dtoa_r+0x468>
 800da2c:	9b00      	ldr	r3, [sp, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	dd32      	ble.n	800da98 <_dtoa_r+0x3a0>
 800da32:	4ab7      	ldr	r2, [pc, #732]	; (800dd10 <_dtoa_r+0x618>)
 800da34:	f003 030f 	and.w	r3, r3, #15
 800da38:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da40:	9b00      	ldr	r3, [sp, #0]
 800da42:	05d8      	lsls	r0, r3, #23
 800da44:	ea4f 1723 	mov.w	r7, r3, asr #4
 800da48:	d516      	bpl.n	800da78 <_dtoa_r+0x380>
 800da4a:	4bb2      	ldr	r3, [pc, #712]	; (800dd14 <_dtoa_r+0x61c>)
 800da4c:	ec51 0b19 	vmov	r0, r1, d9
 800da50:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da54:	f7f2 fefa 	bl	800084c <__aeabi_ddiv>
 800da58:	f007 070f 	and.w	r7, r7, #15
 800da5c:	4682      	mov	sl, r0
 800da5e:	468b      	mov	fp, r1
 800da60:	2503      	movs	r5, #3
 800da62:	4eac      	ldr	r6, [pc, #688]	; (800dd14 <_dtoa_r+0x61c>)
 800da64:	b957      	cbnz	r7, 800da7c <_dtoa_r+0x384>
 800da66:	4642      	mov	r2, r8
 800da68:	464b      	mov	r3, r9
 800da6a:	4650      	mov	r0, sl
 800da6c:	4659      	mov	r1, fp
 800da6e:	f7f2 feed 	bl	800084c <__aeabi_ddiv>
 800da72:	4682      	mov	sl, r0
 800da74:	468b      	mov	fp, r1
 800da76:	e028      	b.n	800daca <_dtoa_r+0x3d2>
 800da78:	2502      	movs	r5, #2
 800da7a:	e7f2      	b.n	800da62 <_dtoa_r+0x36a>
 800da7c:	07f9      	lsls	r1, r7, #31
 800da7e:	d508      	bpl.n	800da92 <_dtoa_r+0x39a>
 800da80:	4640      	mov	r0, r8
 800da82:	4649      	mov	r1, r9
 800da84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800da88:	f7f2 fdb6 	bl	80005f8 <__aeabi_dmul>
 800da8c:	3501      	adds	r5, #1
 800da8e:	4680      	mov	r8, r0
 800da90:	4689      	mov	r9, r1
 800da92:	107f      	asrs	r7, r7, #1
 800da94:	3608      	adds	r6, #8
 800da96:	e7e5      	b.n	800da64 <_dtoa_r+0x36c>
 800da98:	f000 809b 	beq.w	800dbd2 <_dtoa_r+0x4da>
 800da9c:	9b00      	ldr	r3, [sp, #0]
 800da9e:	4f9d      	ldr	r7, [pc, #628]	; (800dd14 <_dtoa_r+0x61c>)
 800daa0:	425e      	negs	r6, r3
 800daa2:	4b9b      	ldr	r3, [pc, #620]	; (800dd10 <_dtoa_r+0x618>)
 800daa4:	f006 020f 	and.w	r2, r6, #15
 800daa8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800daac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab0:	ec51 0b19 	vmov	r0, r1, d9
 800dab4:	f7f2 fda0 	bl	80005f8 <__aeabi_dmul>
 800dab8:	1136      	asrs	r6, r6, #4
 800daba:	4682      	mov	sl, r0
 800dabc:	468b      	mov	fp, r1
 800dabe:	2300      	movs	r3, #0
 800dac0:	2502      	movs	r5, #2
 800dac2:	2e00      	cmp	r6, #0
 800dac4:	d17a      	bne.n	800dbbc <_dtoa_r+0x4c4>
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	d1d3      	bne.n	800da72 <_dtoa_r+0x37a>
 800daca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dacc:	2b00      	cmp	r3, #0
 800dace:	f000 8082 	beq.w	800dbd6 <_dtoa_r+0x4de>
 800dad2:	4b91      	ldr	r3, [pc, #580]	; (800dd18 <_dtoa_r+0x620>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	4650      	mov	r0, sl
 800dad8:	4659      	mov	r1, fp
 800dada:	f7f2 ffff 	bl	8000adc <__aeabi_dcmplt>
 800dade:	2800      	cmp	r0, #0
 800dae0:	d079      	beq.n	800dbd6 <_dtoa_r+0x4de>
 800dae2:	9b03      	ldr	r3, [sp, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d076      	beq.n	800dbd6 <_dtoa_r+0x4de>
 800dae8:	9b02      	ldr	r3, [sp, #8]
 800daea:	2b00      	cmp	r3, #0
 800daec:	dd36      	ble.n	800db5c <_dtoa_r+0x464>
 800daee:	9b00      	ldr	r3, [sp, #0]
 800daf0:	4650      	mov	r0, sl
 800daf2:	4659      	mov	r1, fp
 800daf4:	1e5f      	subs	r7, r3, #1
 800daf6:	2200      	movs	r2, #0
 800daf8:	4b88      	ldr	r3, [pc, #544]	; (800dd1c <_dtoa_r+0x624>)
 800dafa:	f7f2 fd7d 	bl	80005f8 <__aeabi_dmul>
 800dafe:	9e02      	ldr	r6, [sp, #8]
 800db00:	4682      	mov	sl, r0
 800db02:	468b      	mov	fp, r1
 800db04:	3501      	adds	r5, #1
 800db06:	4628      	mov	r0, r5
 800db08:	f7f2 fd0c 	bl	8000524 <__aeabi_i2d>
 800db0c:	4652      	mov	r2, sl
 800db0e:	465b      	mov	r3, fp
 800db10:	f7f2 fd72 	bl	80005f8 <__aeabi_dmul>
 800db14:	4b82      	ldr	r3, [pc, #520]	; (800dd20 <_dtoa_r+0x628>)
 800db16:	2200      	movs	r2, #0
 800db18:	f7f2 fbb8 	bl	800028c <__adddf3>
 800db1c:	46d0      	mov	r8, sl
 800db1e:	46d9      	mov	r9, fp
 800db20:	4682      	mov	sl, r0
 800db22:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800db26:	2e00      	cmp	r6, #0
 800db28:	d158      	bne.n	800dbdc <_dtoa_r+0x4e4>
 800db2a:	4b7e      	ldr	r3, [pc, #504]	; (800dd24 <_dtoa_r+0x62c>)
 800db2c:	2200      	movs	r2, #0
 800db2e:	4640      	mov	r0, r8
 800db30:	4649      	mov	r1, r9
 800db32:	f7f2 fba9 	bl	8000288 <__aeabi_dsub>
 800db36:	4652      	mov	r2, sl
 800db38:	465b      	mov	r3, fp
 800db3a:	4680      	mov	r8, r0
 800db3c:	4689      	mov	r9, r1
 800db3e:	f7f2 ffeb 	bl	8000b18 <__aeabi_dcmpgt>
 800db42:	2800      	cmp	r0, #0
 800db44:	f040 8295 	bne.w	800e072 <_dtoa_r+0x97a>
 800db48:	4652      	mov	r2, sl
 800db4a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800db4e:	4640      	mov	r0, r8
 800db50:	4649      	mov	r1, r9
 800db52:	f7f2 ffc3 	bl	8000adc <__aeabi_dcmplt>
 800db56:	2800      	cmp	r0, #0
 800db58:	f040 8289 	bne.w	800e06e <_dtoa_r+0x976>
 800db5c:	ec5b ab19 	vmov	sl, fp, d9
 800db60:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800db62:	2b00      	cmp	r3, #0
 800db64:	f2c0 8148 	blt.w	800ddf8 <_dtoa_r+0x700>
 800db68:	9a00      	ldr	r2, [sp, #0]
 800db6a:	2a0e      	cmp	r2, #14
 800db6c:	f300 8144 	bgt.w	800ddf8 <_dtoa_r+0x700>
 800db70:	4b67      	ldr	r3, [pc, #412]	; (800dd10 <_dtoa_r+0x618>)
 800db72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db76:	e9d3 8900 	ldrd	r8, r9, [r3]
 800db7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	f280 80d5 	bge.w	800dd2c <_dtoa_r+0x634>
 800db82:	9b03      	ldr	r3, [sp, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	f300 80d1 	bgt.w	800dd2c <_dtoa_r+0x634>
 800db8a:	f040 826f 	bne.w	800e06c <_dtoa_r+0x974>
 800db8e:	4b65      	ldr	r3, [pc, #404]	; (800dd24 <_dtoa_r+0x62c>)
 800db90:	2200      	movs	r2, #0
 800db92:	4640      	mov	r0, r8
 800db94:	4649      	mov	r1, r9
 800db96:	f7f2 fd2f 	bl	80005f8 <__aeabi_dmul>
 800db9a:	4652      	mov	r2, sl
 800db9c:	465b      	mov	r3, fp
 800db9e:	f7f2 ffb1 	bl	8000b04 <__aeabi_dcmpge>
 800dba2:	9e03      	ldr	r6, [sp, #12]
 800dba4:	4637      	mov	r7, r6
 800dba6:	2800      	cmp	r0, #0
 800dba8:	f040 8245 	bne.w	800e036 <_dtoa_r+0x93e>
 800dbac:	9d01      	ldr	r5, [sp, #4]
 800dbae:	2331      	movs	r3, #49	; 0x31
 800dbb0:	f805 3b01 	strb.w	r3, [r5], #1
 800dbb4:	9b00      	ldr	r3, [sp, #0]
 800dbb6:	3301      	adds	r3, #1
 800dbb8:	9300      	str	r3, [sp, #0]
 800dbba:	e240      	b.n	800e03e <_dtoa_r+0x946>
 800dbbc:	07f2      	lsls	r2, r6, #31
 800dbbe:	d505      	bpl.n	800dbcc <_dtoa_r+0x4d4>
 800dbc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dbc4:	f7f2 fd18 	bl	80005f8 <__aeabi_dmul>
 800dbc8:	3501      	adds	r5, #1
 800dbca:	2301      	movs	r3, #1
 800dbcc:	1076      	asrs	r6, r6, #1
 800dbce:	3708      	adds	r7, #8
 800dbd0:	e777      	b.n	800dac2 <_dtoa_r+0x3ca>
 800dbd2:	2502      	movs	r5, #2
 800dbd4:	e779      	b.n	800daca <_dtoa_r+0x3d2>
 800dbd6:	9f00      	ldr	r7, [sp, #0]
 800dbd8:	9e03      	ldr	r6, [sp, #12]
 800dbda:	e794      	b.n	800db06 <_dtoa_r+0x40e>
 800dbdc:	9901      	ldr	r1, [sp, #4]
 800dbde:	4b4c      	ldr	r3, [pc, #304]	; (800dd10 <_dtoa_r+0x618>)
 800dbe0:	4431      	add	r1, r6
 800dbe2:	910d      	str	r1, [sp, #52]	; 0x34
 800dbe4:	9908      	ldr	r1, [sp, #32]
 800dbe6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800dbea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800dbee:	2900      	cmp	r1, #0
 800dbf0:	d043      	beq.n	800dc7a <_dtoa_r+0x582>
 800dbf2:	494d      	ldr	r1, [pc, #308]	; (800dd28 <_dtoa_r+0x630>)
 800dbf4:	2000      	movs	r0, #0
 800dbf6:	f7f2 fe29 	bl	800084c <__aeabi_ddiv>
 800dbfa:	4652      	mov	r2, sl
 800dbfc:	465b      	mov	r3, fp
 800dbfe:	f7f2 fb43 	bl	8000288 <__aeabi_dsub>
 800dc02:	9d01      	ldr	r5, [sp, #4]
 800dc04:	4682      	mov	sl, r0
 800dc06:	468b      	mov	fp, r1
 800dc08:	4649      	mov	r1, r9
 800dc0a:	4640      	mov	r0, r8
 800dc0c:	f7f2 ffa4 	bl	8000b58 <__aeabi_d2iz>
 800dc10:	4606      	mov	r6, r0
 800dc12:	f7f2 fc87 	bl	8000524 <__aeabi_i2d>
 800dc16:	4602      	mov	r2, r0
 800dc18:	460b      	mov	r3, r1
 800dc1a:	4640      	mov	r0, r8
 800dc1c:	4649      	mov	r1, r9
 800dc1e:	f7f2 fb33 	bl	8000288 <__aeabi_dsub>
 800dc22:	3630      	adds	r6, #48	; 0x30
 800dc24:	f805 6b01 	strb.w	r6, [r5], #1
 800dc28:	4652      	mov	r2, sl
 800dc2a:	465b      	mov	r3, fp
 800dc2c:	4680      	mov	r8, r0
 800dc2e:	4689      	mov	r9, r1
 800dc30:	f7f2 ff54 	bl	8000adc <__aeabi_dcmplt>
 800dc34:	2800      	cmp	r0, #0
 800dc36:	d163      	bne.n	800dd00 <_dtoa_r+0x608>
 800dc38:	4642      	mov	r2, r8
 800dc3a:	464b      	mov	r3, r9
 800dc3c:	4936      	ldr	r1, [pc, #216]	; (800dd18 <_dtoa_r+0x620>)
 800dc3e:	2000      	movs	r0, #0
 800dc40:	f7f2 fb22 	bl	8000288 <__aeabi_dsub>
 800dc44:	4652      	mov	r2, sl
 800dc46:	465b      	mov	r3, fp
 800dc48:	f7f2 ff48 	bl	8000adc <__aeabi_dcmplt>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	f040 80b5 	bne.w	800ddbc <_dtoa_r+0x6c4>
 800dc52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc54:	429d      	cmp	r5, r3
 800dc56:	d081      	beq.n	800db5c <_dtoa_r+0x464>
 800dc58:	4b30      	ldr	r3, [pc, #192]	; (800dd1c <_dtoa_r+0x624>)
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	4650      	mov	r0, sl
 800dc5e:	4659      	mov	r1, fp
 800dc60:	f7f2 fcca 	bl	80005f8 <__aeabi_dmul>
 800dc64:	4b2d      	ldr	r3, [pc, #180]	; (800dd1c <_dtoa_r+0x624>)
 800dc66:	4682      	mov	sl, r0
 800dc68:	468b      	mov	fp, r1
 800dc6a:	4640      	mov	r0, r8
 800dc6c:	4649      	mov	r1, r9
 800dc6e:	2200      	movs	r2, #0
 800dc70:	f7f2 fcc2 	bl	80005f8 <__aeabi_dmul>
 800dc74:	4680      	mov	r8, r0
 800dc76:	4689      	mov	r9, r1
 800dc78:	e7c6      	b.n	800dc08 <_dtoa_r+0x510>
 800dc7a:	4650      	mov	r0, sl
 800dc7c:	4659      	mov	r1, fp
 800dc7e:	f7f2 fcbb 	bl	80005f8 <__aeabi_dmul>
 800dc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc84:	9d01      	ldr	r5, [sp, #4]
 800dc86:	930f      	str	r3, [sp, #60]	; 0x3c
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	4649      	mov	r1, r9
 800dc8e:	4640      	mov	r0, r8
 800dc90:	f7f2 ff62 	bl	8000b58 <__aeabi_d2iz>
 800dc94:	4606      	mov	r6, r0
 800dc96:	f7f2 fc45 	bl	8000524 <__aeabi_i2d>
 800dc9a:	3630      	adds	r6, #48	; 0x30
 800dc9c:	4602      	mov	r2, r0
 800dc9e:	460b      	mov	r3, r1
 800dca0:	4640      	mov	r0, r8
 800dca2:	4649      	mov	r1, r9
 800dca4:	f7f2 faf0 	bl	8000288 <__aeabi_dsub>
 800dca8:	f805 6b01 	strb.w	r6, [r5], #1
 800dcac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcae:	429d      	cmp	r5, r3
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	4689      	mov	r9, r1
 800dcb4:	f04f 0200 	mov.w	r2, #0
 800dcb8:	d124      	bne.n	800dd04 <_dtoa_r+0x60c>
 800dcba:	4b1b      	ldr	r3, [pc, #108]	; (800dd28 <_dtoa_r+0x630>)
 800dcbc:	4650      	mov	r0, sl
 800dcbe:	4659      	mov	r1, fp
 800dcc0:	f7f2 fae4 	bl	800028c <__adddf3>
 800dcc4:	4602      	mov	r2, r0
 800dcc6:	460b      	mov	r3, r1
 800dcc8:	4640      	mov	r0, r8
 800dcca:	4649      	mov	r1, r9
 800dccc:	f7f2 ff24 	bl	8000b18 <__aeabi_dcmpgt>
 800dcd0:	2800      	cmp	r0, #0
 800dcd2:	d173      	bne.n	800ddbc <_dtoa_r+0x6c4>
 800dcd4:	4652      	mov	r2, sl
 800dcd6:	465b      	mov	r3, fp
 800dcd8:	4913      	ldr	r1, [pc, #76]	; (800dd28 <_dtoa_r+0x630>)
 800dcda:	2000      	movs	r0, #0
 800dcdc:	f7f2 fad4 	bl	8000288 <__aeabi_dsub>
 800dce0:	4602      	mov	r2, r0
 800dce2:	460b      	mov	r3, r1
 800dce4:	4640      	mov	r0, r8
 800dce6:	4649      	mov	r1, r9
 800dce8:	f7f2 fef8 	bl	8000adc <__aeabi_dcmplt>
 800dcec:	2800      	cmp	r0, #0
 800dcee:	f43f af35 	beq.w	800db5c <_dtoa_r+0x464>
 800dcf2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800dcf4:	1e6b      	subs	r3, r5, #1
 800dcf6:	930f      	str	r3, [sp, #60]	; 0x3c
 800dcf8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dcfc:	2b30      	cmp	r3, #48	; 0x30
 800dcfe:	d0f8      	beq.n	800dcf2 <_dtoa_r+0x5fa>
 800dd00:	9700      	str	r7, [sp, #0]
 800dd02:	e049      	b.n	800dd98 <_dtoa_r+0x6a0>
 800dd04:	4b05      	ldr	r3, [pc, #20]	; (800dd1c <_dtoa_r+0x624>)
 800dd06:	f7f2 fc77 	bl	80005f8 <__aeabi_dmul>
 800dd0a:	4680      	mov	r8, r0
 800dd0c:	4689      	mov	r9, r1
 800dd0e:	e7bd      	b.n	800dc8c <_dtoa_r+0x594>
 800dd10:	080113d0 	.word	0x080113d0
 800dd14:	080113a8 	.word	0x080113a8
 800dd18:	3ff00000 	.word	0x3ff00000
 800dd1c:	40240000 	.word	0x40240000
 800dd20:	401c0000 	.word	0x401c0000
 800dd24:	40140000 	.word	0x40140000
 800dd28:	3fe00000 	.word	0x3fe00000
 800dd2c:	9d01      	ldr	r5, [sp, #4]
 800dd2e:	4656      	mov	r6, sl
 800dd30:	465f      	mov	r7, fp
 800dd32:	4642      	mov	r2, r8
 800dd34:	464b      	mov	r3, r9
 800dd36:	4630      	mov	r0, r6
 800dd38:	4639      	mov	r1, r7
 800dd3a:	f7f2 fd87 	bl	800084c <__aeabi_ddiv>
 800dd3e:	f7f2 ff0b 	bl	8000b58 <__aeabi_d2iz>
 800dd42:	4682      	mov	sl, r0
 800dd44:	f7f2 fbee 	bl	8000524 <__aeabi_i2d>
 800dd48:	4642      	mov	r2, r8
 800dd4a:	464b      	mov	r3, r9
 800dd4c:	f7f2 fc54 	bl	80005f8 <__aeabi_dmul>
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	4630      	mov	r0, r6
 800dd56:	4639      	mov	r1, r7
 800dd58:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800dd5c:	f7f2 fa94 	bl	8000288 <__aeabi_dsub>
 800dd60:	f805 6b01 	strb.w	r6, [r5], #1
 800dd64:	9e01      	ldr	r6, [sp, #4]
 800dd66:	9f03      	ldr	r7, [sp, #12]
 800dd68:	1bae      	subs	r6, r5, r6
 800dd6a:	42b7      	cmp	r7, r6
 800dd6c:	4602      	mov	r2, r0
 800dd6e:	460b      	mov	r3, r1
 800dd70:	d135      	bne.n	800ddde <_dtoa_r+0x6e6>
 800dd72:	f7f2 fa8b 	bl	800028c <__adddf3>
 800dd76:	4642      	mov	r2, r8
 800dd78:	464b      	mov	r3, r9
 800dd7a:	4606      	mov	r6, r0
 800dd7c:	460f      	mov	r7, r1
 800dd7e:	f7f2 fecb 	bl	8000b18 <__aeabi_dcmpgt>
 800dd82:	b9d0      	cbnz	r0, 800ddba <_dtoa_r+0x6c2>
 800dd84:	4642      	mov	r2, r8
 800dd86:	464b      	mov	r3, r9
 800dd88:	4630      	mov	r0, r6
 800dd8a:	4639      	mov	r1, r7
 800dd8c:	f7f2 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd90:	b110      	cbz	r0, 800dd98 <_dtoa_r+0x6a0>
 800dd92:	f01a 0f01 	tst.w	sl, #1
 800dd96:	d110      	bne.n	800ddba <_dtoa_r+0x6c2>
 800dd98:	4620      	mov	r0, r4
 800dd9a:	ee18 1a10 	vmov	r1, s16
 800dd9e:	f000 fe67 	bl	800ea70 <_Bfree>
 800dda2:	2300      	movs	r3, #0
 800dda4:	9800      	ldr	r0, [sp, #0]
 800dda6:	702b      	strb	r3, [r5, #0]
 800dda8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ddaa:	3001      	adds	r0, #1
 800ddac:	6018      	str	r0, [r3, #0]
 800ddae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	f43f acf1 	beq.w	800d798 <_dtoa_r+0xa0>
 800ddb6:	601d      	str	r5, [r3, #0]
 800ddb8:	e4ee      	b.n	800d798 <_dtoa_r+0xa0>
 800ddba:	9f00      	ldr	r7, [sp, #0]
 800ddbc:	462b      	mov	r3, r5
 800ddbe:	461d      	mov	r5, r3
 800ddc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ddc4:	2a39      	cmp	r2, #57	; 0x39
 800ddc6:	d106      	bne.n	800ddd6 <_dtoa_r+0x6de>
 800ddc8:	9a01      	ldr	r2, [sp, #4]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d1f7      	bne.n	800ddbe <_dtoa_r+0x6c6>
 800ddce:	9901      	ldr	r1, [sp, #4]
 800ddd0:	2230      	movs	r2, #48	; 0x30
 800ddd2:	3701      	adds	r7, #1
 800ddd4:	700a      	strb	r2, [r1, #0]
 800ddd6:	781a      	ldrb	r2, [r3, #0]
 800ddd8:	3201      	adds	r2, #1
 800ddda:	701a      	strb	r2, [r3, #0]
 800dddc:	e790      	b.n	800dd00 <_dtoa_r+0x608>
 800ddde:	4ba6      	ldr	r3, [pc, #664]	; (800e078 <_dtoa_r+0x980>)
 800dde0:	2200      	movs	r2, #0
 800dde2:	f7f2 fc09 	bl	80005f8 <__aeabi_dmul>
 800dde6:	2200      	movs	r2, #0
 800dde8:	2300      	movs	r3, #0
 800ddea:	4606      	mov	r6, r0
 800ddec:	460f      	mov	r7, r1
 800ddee:	f7f2 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 800ddf2:	2800      	cmp	r0, #0
 800ddf4:	d09d      	beq.n	800dd32 <_dtoa_r+0x63a>
 800ddf6:	e7cf      	b.n	800dd98 <_dtoa_r+0x6a0>
 800ddf8:	9a08      	ldr	r2, [sp, #32]
 800ddfa:	2a00      	cmp	r2, #0
 800ddfc:	f000 80d7 	beq.w	800dfae <_dtoa_r+0x8b6>
 800de00:	9a06      	ldr	r2, [sp, #24]
 800de02:	2a01      	cmp	r2, #1
 800de04:	f300 80ba 	bgt.w	800df7c <_dtoa_r+0x884>
 800de08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800de0a:	2a00      	cmp	r2, #0
 800de0c:	f000 80b2 	beq.w	800df74 <_dtoa_r+0x87c>
 800de10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de14:	9e07      	ldr	r6, [sp, #28]
 800de16:	9d04      	ldr	r5, [sp, #16]
 800de18:	9a04      	ldr	r2, [sp, #16]
 800de1a:	441a      	add	r2, r3
 800de1c:	9204      	str	r2, [sp, #16]
 800de1e:	9a05      	ldr	r2, [sp, #20]
 800de20:	2101      	movs	r1, #1
 800de22:	441a      	add	r2, r3
 800de24:	4620      	mov	r0, r4
 800de26:	9205      	str	r2, [sp, #20]
 800de28:	f000 ff24 	bl	800ec74 <__i2b>
 800de2c:	4607      	mov	r7, r0
 800de2e:	2d00      	cmp	r5, #0
 800de30:	dd0c      	ble.n	800de4c <_dtoa_r+0x754>
 800de32:	9b05      	ldr	r3, [sp, #20]
 800de34:	2b00      	cmp	r3, #0
 800de36:	dd09      	ble.n	800de4c <_dtoa_r+0x754>
 800de38:	42ab      	cmp	r3, r5
 800de3a:	9a04      	ldr	r2, [sp, #16]
 800de3c:	bfa8      	it	ge
 800de3e:	462b      	movge	r3, r5
 800de40:	1ad2      	subs	r2, r2, r3
 800de42:	9204      	str	r2, [sp, #16]
 800de44:	9a05      	ldr	r2, [sp, #20]
 800de46:	1aed      	subs	r5, r5, r3
 800de48:	1ad3      	subs	r3, r2, r3
 800de4a:	9305      	str	r3, [sp, #20]
 800de4c:	9b07      	ldr	r3, [sp, #28]
 800de4e:	b31b      	cbz	r3, 800de98 <_dtoa_r+0x7a0>
 800de50:	9b08      	ldr	r3, [sp, #32]
 800de52:	2b00      	cmp	r3, #0
 800de54:	f000 80af 	beq.w	800dfb6 <_dtoa_r+0x8be>
 800de58:	2e00      	cmp	r6, #0
 800de5a:	dd13      	ble.n	800de84 <_dtoa_r+0x78c>
 800de5c:	4639      	mov	r1, r7
 800de5e:	4632      	mov	r2, r6
 800de60:	4620      	mov	r0, r4
 800de62:	f000 ffc7 	bl	800edf4 <__pow5mult>
 800de66:	ee18 2a10 	vmov	r2, s16
 800de6a:	4601      	mov	r1, r0
 800de6c:	4607      	mov	r7, r0
 800de6e:	4620      	mov	r0, r4
 800de70:	f000 ff16 	bl	800eca0 <__multiply>
 800de74:	ee18 1a10 	vmov	r1, s16
 800de78:	4680      	mov	r8, r0
 800de7a:	4620      	mov	r0, r4
 800de7c:	f000 fdf8 	bl	800ea70 <_Bfree>
 800de80:	ee08 8a10 	vmov	s16, r8
 800de84:	9b07      	ldr	r3, [sp, #28]
 800de86:	1b9a      	subs	r2, r3, r6
 800de88:	d006      	beq.n	800de98 <_dtoa_r+0x7a0>
 800de8a:	ee18 1a10 	vmov	r1, s16
 800de8e:	4620      	mov	r0, r4
 800de90:	f000 ffb0 	bl	800edf4 <__pow5mult>
 800de94:	ee08 0a10 	vmov	s16, r0
 800de98:	2101      	movs	r1, #1
 800de9a:	4620      	mov	r0, r4
 800de9c:	f000 feea 	bl	800ec74 <__i2b>
 800dea0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	4606      	mov	r6, r0
 800dea6:	f340 8088 	ble.w	800dfba <_dtoa_r+0x8c2>
 800deaa:	461a      	mov	r2, r3
 800deac:	4601      	mov	r1, r0
 800deae:	4620      	mov	r0, r4
 800deb0:	f000 ffa0 	bl	800edf4 <__pow5mult>
 800deb4:	9b06      	ldr	r3, [sp, #24]
 800deb6:	2b01      	cmp	r3, #1
 800deb8:	4606      	mov	r6, r0
 800deba:	f340 8081 	ble.w	800dfc0 <_dtoa_r+0x8c8>
 800debe:	f04f 0800 	mov.w	r8, #0
 800dec2:	6933      	ldr	r3, [r6, #16]
 800dec4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800dec8:	6918      	ldr	r0, [r3, #16]
 800deca:	f000 fe83 	bl	800ebd4 <__hi0bits>
 800dece:	f1c0 0020 	rsb	r0, r0, #32
 800ded2:	9b05      	ldr	r3, [sp, #20]
 800ded4:	4418      	add	r0, r3
 800ded6:	f010 001f 	ands.w	r0, r0, #31
 800deda:	f000 8092 	beq.w	800e002 <_dtoa_r+0x90a>
 800dede:	f1c0 0320 	rsb	r3, r0, #32
 800dee2:	2b04      	cmp	r3, #4
 800dee4:	f340 808a 	ble.w	800dffc <_dtoa_r+0x904>
 800dee8:	f1c0 001c 	rsb	r0, r0, #28
 800deec:	9b04      	ldr	r3, [sp, #16]
 800deee:	4403      	add	r3, r0
 800def0:	9304      	str	r3, [sp, #16]
 800def2:	9b05      	ldr	r3, [sp, #20]
 800def4:	4403      	add	r3, r0
 800def6:	4405      	add	r5, r0
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	9b04      	ldr	r3, [sp, #16]
 800defc:	2b00      	cmp	r3, #0
 800defe:	dd07      	ble.n	800df10 <_dtoa_r+0x818>
 800df00:	ee18 1a10 	vmov	r1, s16
 800df04:	461a      	mov	r2, r3
 800df06:	4620      	mov	r0, r4
 800df08:	f000 ffce 	bl	800eea8 <__lshift>
 800df0c:	ee08 0a10 	vmov	s16, r0
 800df10:	9b05      	ldr	r3, [sp, #20]
 800df12:	2b00      	cmp	r3, #0
 800df14:	dd05      	ble.n	800df22 <_dtoa_r+0x82a>
 800df16:	4631      	mov	r1, r6
 800df18:	461a      	mov	r2, r3
 800df1a:	4620      	mov	r0, r4
 800df1c:	f000 ffc4 	bl	800eea8 <__lshift>
 800df20:	4606      	mov	r6, r0
 800df22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df24:	2b00      	cmp	r3, #0
 800df26:	d06e      	beq.n	800e006 <_dtoa_r+0x90e>
 800df28:	ee18 0a10 	vmov	r0, s16
 800df2c:	4631      	mov	r1, r6
 800df2e:	f001 f82b 	bl	800ef88 <__mcmp>
 800df32:	2800      	cmp	r0, #0
 800df34:	da67      	bge.n	800e006 <_dtoa_r+0x90e>
 800df36:	9b00      	ldr	r3, [sp, #0]
 800df38:	3b01      	subs	r3, #1
 800df3a:	ee18 1a10 	vmov	r1, s16
 800df3e:	9300      	str	r3, [sp, #0]
 800df40:	220a      	movs	r2, #10
 800df42:	2300      	movs	r3, #0
 800df44:	4620      	mov	r0, r4
 800df46:	f000 fdb5 	bl	800eab4 <__multadd>
 800df4a:	9b08      	ldr	r3, [sp, #32]
 800df4c:	ee08 0a10 	vmov	s16, r0
 800df50:	2b00      	cmp	r3, #0
 800df52:	f000 81b1 	beq.w	800e2b8 <_dtoa_r+0xbc0>
 800df56:	2300      	movs	r3, #0
 800df58:	4639      	mov	r1, r7
 800df5a:	220a      	movs	r2, #10
 800df5c:	4620      	mov	r0, r4
 800df5e:	f000 fda9 	bl	800eab4 <__multadd>
 800df62:	9b02      	ldr	r3, [sp, #8]
 800df64:	2b00      	cmp	r3, #0
 800df66:	4607      	mov	r7, r0
 800df68:	f300 808e 	bgt.w	800e088 <_dtoa_r+0x990>
 800df6c:	9b06      	ldr	r3, [sp, #24]
 800df6e:	2b02      	cmp	r3, #2
 800df70:	dc51      	bgt.n	800e016 <_dtoa_r+0x91e>
 800df72:	e089      	b.n	800e088 <_dtoa_r+0x990>
 800df74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800df76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df7a:	e74b      	b.n	800de14 <_dtoa_r+0x71c>
 800df7c:	9b03      	ldr	r3, [sp, #12]
 800df7e:	1e5e      	subs	r6, r3, #1
 800df80:	9b07      	ldr	r3, [sp, #28]
 800df82:	42b3      	cmp	r3, r6
 800df84:	bfbf      	itttt	lt
 800df86:	9b07      	ldrlt	r3, [sp, #28]
 800df88:	9607      	strlt	r6, [sp, #28]
 800df8a:	1af2      	sublt	r2, r6, r3
 800df8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800df8e:	bfb6      	itet	lt
 800df90:	189b      	addlt	r3, r3, r2
 800df92:	1b9e      	subge	r6, r3, r6
 800df94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800df96:	9b03      	ldr	r3, [sp, #12]
 800df98:	bfb8      	it	lt
 800df9a:	2600      	movlt	r6, #0
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	bfb7      	itett	lt
 800dfa0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dfa4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dfa8:	1a9d      	sublt	r5, r3, r2
 800dfaa:	2300      	movlt	r3, #0
 800dfac:	e734      	b.n	800de18 <_dtoa_r+0x720>
 800dfae:	9e07      	ldr	r6, [sp, #28]
 800dfb0:	9d04      	ldr	r5, [sp, #16]
 800dfb2:	9f08      	ldr	r7, [sp, #32]
 800dfb4:	e73b      	b.n	800de2e <_dtoa_r+0x736>
 800dfb6:	9a07      	ldr	r2, [sp, #28]
 800dfb8:	e767      	b.n	800de8a <_dtoa_r+0x792>
 800dfba:	9b06      	ldr	r3, [sp, #24]
 800dfbc:	2b01      	cmp	r3, #1
 800dfbe:	dc18      	bgt.n	800dff2 <_dtoa_r+0x8fa>
 800dfc0:	f1ba 0f00 	cmp.w	sl, #0
 800dfc4:	d115      	bne.n	800dff2 <_dtoa_r+0x8fa>
 800dfc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dfca:	b993      	cbnz	r3, 800dff2 <_dtoa_r+0x8fa>
 800dfcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dfd0:	0d1b      	lsrs	r3, r3, #20
 800dfd2:	051b      	lsls	r3, r3, #20
 800dfd4:	b183      	cbz	r3, 800dff8 <_dtoa_r+0x900>
 800dfd6:	9b04      	ldr	r3, [sp, #16]
 800dfd8:	3301      	adds	r3, #1
 800dfda:	9304      	str	r3, [sp, #16]
 800dfdc:	9b05      	ldr	r3, [sp, #20]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	9305      	str	r3, [sp, #20]
 800dfe2:	f04f 0801 	mov.w	r8, #1
 800dfe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dfe8:	2b00      	cmp	r3, #0
 800dfea:	f47f af6a 	bne.w	800dec2 <_dtoa_r+0x7ca>
 800dfee:	2001      	movs	r0, #1
 800dff0:	e76f      	b.n	800ded2 <_dtoa_r+0x7da>
 800dff2:	f04f 0800 	mov.w	r8, #0
 800dff6:	e7f6      	b.n	800dfe6 <_dtoa_r+0x8ee>
 800dff8:	4698      	mov	r8, r3
 800dffa:	e7f4      	b.n	800dfe6 <_dtoa_r+0x8ee>
 800dffc:	f43f af7d 	beq.w	800defa <_dtoa_r+0x802>
 800e000:	4618      	mov	r0, r3
 800e002:	301c      	adds	r0, #28
 800e004:	e772      	b.n	800deec <_dtoa_r+0x7f4>
 800e006:	9b03      	ldr	r3, [sp, #12]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	dc37      	bgt.n	800e07c <_dtoa_r+0x984>
 800e00c:	9b06      	ldr	r3, [sp, #24]
 800e00e:	2b02      	cmp	r3, #2
 800e010:	dd34      	ble.n	800e07c <_dtoa_r+0x984>
 800e012:	9b03      	ldr	r3, [sp, #12]
 800e014:	9302      	str	r3, [sp, #8]
 800e016:	9b02      	ldr	r3, [sp, #8]
 800e018:	b96b      	cbnz	r3, 800e036 <_dtoa_r+0x93e>
 800e01a:	4631      	mov	r1, r6
 800e01c:	2205      	movs	r2, #5
 800e01e:	4620      	mov	r0, r4
 800e020:	f000 fd48 	bl	800eab4 <__multadd>
 800e024:	4601      	mov	r1, r0
 800e026:	4606      	mov	r6, r0
 800e028:	ee18 0a10 	vmov	r0, s16
 800e02c:	f000 ffac 	bl	800ef88 <__mcmp>
 800e030:	2800      	cmp	r0, #0
 800e032:	f73f adbb 	bgt.w	800dbac <_dtoa_r+0x4b4>
 800e036:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e038:	9d01      	ldr	r5, [sp, #4]
 800e03a:	43db      	mvns	r3, r3
 800e03c:	9300      	str	r3, [sp, #0]
 800e03e:	f04f 0800 	mov.w	r8, #0
 800e042:	4631      	mov	r1, r6
 800e044:	4620      	mov	r0, r4
 800e046:	f000 fd13 	bl	800ea70 <_Bfree>
 800e04a:	2f00      	cmp	r7, #0
 800e04c:	f43f aea4 	beq.w	800dd98 <_dtoa_r+0x6a0>
 800e050:	f1b8 0f00 	cmp.w	r8, #0
 800e054:	d005      	beq.n	800e062 <_dtoa_r+0x96a>
 800e056:	45b8      	cmp	r8, r7
 800e058:	d003      	beq.n	800e062 <_dtoa_r+0x96a>
 800e05a:	4641      	mov	r1, r8
 800e05c:	4620      	mov	r0, r4
 800e05e:	f000 fd07 	bl	800ea70 <_Bfree>
 800e062:	4639      	mov	r1, r7
 800e064:	4620      	mov	r0, r4
 800e066:	f000 fd03 	bl	800ea70 <_Bfree>
 800e06a:	e695      	b.n	800dd98 <_dtoa_r+0x6a0>
 800e06c:	2600      	movs	r6, #0
 800e06e:	4637      	mov	r7, r6
 800e070:	e7e1      	b.n	800e036 <_dtoa_r+0x93e>
 800e072:	9700      	str	r7, [sp, #0]
 800e074:	4637      	mov	r7, r6
 800e076:	e599      	b.n	800dbac <_dtoa_r+0x4b4>
 800e078:	40240000 	.word	0x40240000
 800e07c:	9b08      	ldr	r3, [sp, #32]
 800e07e:	2b00      	cmp	r3, #0
 800e080:	f000 80ca 	beq.w	800e218 <_dtoa_r+0xb20>
 800e084:	9b03      	ldr	r3, [sp, #12]
 800e086:	9302      	str	r3, [sp, #8]
 800e088:	2d00      	cmp	r5, #0
 800e08a:	dd05      	ble.n	800e098 <_dtoa_r+0x9a0>
 800e08c:	4639      	mov	r1, r7
 800e08e:	462a      	mov	r2, r5
 800e090:	4620      	mov	r0, r4
 800e092:	f000 ff09 	bl	800eea8 <__lshift>
 800e096:	4607      	mov	r7, r0
 800e098:	f1b8 0f00 	cmp.w	r8, #0
 800e09c:	d05b      	beq.n	800e156 <_dtoa_r+0xa5e>
 800e09e:	6879      	ldr	r1, [r7, #4]
 800e0a0:	4620      	mov	r0, r4
 800e0a2:	f000 fca5 	bl	800e9f0 <_Balloc>
 800e0a6:	4605      	mov	r5, r0
 800e0a8:	b928      	cbnz	r0, 800e0b6 <_dtoa_r+0x9be>
 800e0aa:	4b87      	ldr	r3, [pc, #540]	; (800e2c8 <_dtoa_r+0xbd0>)
 800e0ac:	4602      	mov	r2, r0
 800e0ae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800e0b2:	f7ff bb3b 	b.w	800d72c <_dtoa_r+0x34>
 800e0b6:	693a      	ldr	r2, [r7, #16]
 800e0b8:	3202      	adds	r2, #2
 800e0ba:	0092      	lsls	r2, r2, #2
 800e0bc:	f107 010c 	add.w	r1, r7, #12
 800e0c0:	300c      	adds	r0, #12
 800e0c2:	f7fd fd21 	bl	800bb08 <memcpy>
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	4629      	mov	r1, r5
 800e0ca:	4620      	mov	r0, r4
 800e0cc:	f000 feec 	bl	800eea8 <__lshift>
 800e0d0:	9b01      	ldr	r3, [sp, #4]
 800e0d2:	f103 0901 	add.w	r9, r3, #1
 800e0d6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800e0da:	4413      	add	r3, r2
 800e0dc:	9305      	str	r3, [sp, #20]
 800e0de:	f00a 0301 	and.w	r3, sl, #1
 800e0e2:	46b8      	mov	r8, r7
 800e0e4:	9304      	str	r3, [sp, #16]
 800e0e6:	4607      	mov	r7, r0
 800e0e8:	4631      	mov	r1, r6
 800e0ea:	ee18 0a10 	vmov	r0, s16
 800e0ee:	f7ff fa77 	bl	800d5e0 <quorem>
 800e0f2:	4641      	mov	r1, r8
 800e0f4:	9002      	str	r0, [sp, #8]
 800e0f6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e0fa:	ee18 0a10 	vmov	r0, s16
 800e0fe:	f000 ff43 	bl	800ef88 <__mcmp>
 800e102:	463a      	mov	r2, r7
 800e104:	9003      	str	r0, [sp, #12]
 800e106:	4631      	mov	r1, r6
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 ff59 	bl	800efc0 <__mdiff>
 800e10e:	68c2      	ldr	r2, [r0, #12]
 800e110:	f109 3bff 	add.w	fp, r9, #4294967295
 800e114:	4605      	mov	r5, r0
 800e116:	bb02      	cbnz	r2, 800e15a <_dtoa_r+0xa62>
 800e118:	4601      	mov	r1, r0
 800e11a:	ee18 0a10 	vmov	r0, s16
 800e11e:	f000 ff33 	bl	800ef88 <__mcmp>
 800e122:	4602      	mov	r2, r0
 800e124:	4629      	mov	r1, r5
 800e126:	4620      	mov	r0, r4
 800e128:	9207      	str	r2, [sp, #28]
 800e12a:	f000 fca1 	bl	800ea70 <_Bfree>
 800e12e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800e132:	ea43 0102 	orr.w	r1, r3, r2
 800e136:	9b04      	ldr	r3, [sp, #16]
 800e138:	430b      	orrs	r3, r1
 800e13a:	464d      	mov	r5, r9
 800e13c:	d10f      	bne.n	800e15e <_dtoa_r+0xa66>
 800e13e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e142:	d02a      	beq.n	800e19a <_dtoa_r+0xaa2>
 800e144:	9b03      	ldr	r3, [sp, #12]
 800e146:	2b00      	cmp	r3, #0
 800e148:	dd02      	ble.n	800e150 <_dtoa_r+0xa58>
 800e14a:	9b02      	ldr	r3, [sp, #8]
 800e14c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800e150:	f88b a000 	strb.w	sl, [fp]
 800e154:	e775      	b.n	800e042 <_dtoa_r+0x94a>
 800e156:	4638      	mov	r0, r7
 800e158:	e7ba      	b.n	800e0d0 <_dtoa_r+0x9d8>
 800e15a:	2201      	movs	r2, #1
 800e15c:	e7e2      	b.n	800e124 <_dtoa_r+0xa2c>
 800e15e:	9b03      	ldr	r3, [sp, #12]
 800e160:	2b00      	cmp	r3, #0
 800e162:	db04      	blt.n	800e16e <_dtoa_r+0xa76>
 800e164:	9906      	ldr	r1, [sp, #24]
 800e166:	430b      	orrs	r3, r1
 800e168:	9904      	ldr	r1, [sp, #16]
 800e16a:	430b      	orrs	r3, r1
 800e16c:	d122      	bne.n	800e1b4 <_dtoa_r+0xabc>
 800e16e:	2a00      	cmp	r2, #0
 800e170:	ddee      	ble.n	800e150 <_dtoa_r+0xa58>
 800e172:	ee18 1a10 	vmov	r1, s16
 800e176:	2201      	movs	r2, #1
 800e178:	4620      	mov	r0, r4
 800e17a:	f000 fe95 	bl	800eea8 <__lshift>
 800e17e:	4631      	mov	r1, r6
 800e180:	ee08 0a10 	vmov	s16, r0
 800e184:	f000 ff00 	bl	800ef88 <__mcmp>
 800e188:	2800      	cmp	r0, #0
 800e18a:	dc03      	bgt.n	800e194 <_dtoa_r+0xa9c>
 800e18c:	d1e0      	bne.n	800e150 <_dtoa_r+0xa58>
 800e18e:	f01a 0f01 	tst.w	sl, #1
 800e192:	d0dd      	beq.n	800e150 <_dtoa_r+0xa58>
 800e194:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e198:	d1d7      	bne.n	800e14a <_dtoa_r+0xa52>
 800e19a:	2339      	movs	r3, #57	; 0x39
 800e19c:	f88b 3000 	strb.w	r3, [fp]
 800e1a0:	462b      	mov	r3, r5
 800e1a2:	461d      	mov	r5, r3
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e1aa:	2a39      	cmp	r2, #57	; 0x39
 800e1ac:	d071      	beq.n	800e292 <_dtoa_r+0xb9a>
 800e1ae:	3201      	adds	r2, #1
 800e1b0:	701a      	strb	r2, [r3, #0]
 800e1b2:	e746      	b.n	800e042 <_dtoa_r+0x94a>
 800e1b4:	2a00      	cmp	r2, #0
 800e1b6:	dd07      	ble.n	800e1c8 <_dtoa_r+0xad0>
 800e1b8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800e1bc:	d0ed      	beq.n	800e19a <_dtoa_r+0xaa2>
 800e1be:	f10a 0301 	add.w	r3, sl, #1
 800e1c2:	f88b 3000 	strb.w	r3, [fp]
 800e1c6:	e73c      	b.n	800e042 <_dtoa_r+0x94a>
 800e1c8:	9b05      	ldr	r3, [sp, #20]
 800e1ca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800e1ce:	4599      	cmp	r9, r3
 800e1d0:	d047      	beq.n	800e262 <_dtoa_r+0xb6a>
 800e1d2:	ee18 1a10 	vmov	r1, s16
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	220a      	movs	r2, #10
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f000 fc6a 	bl	800eab4 <__multadd>
 800e1e0:	45b8      	cmp	r8, r7
 800e1e2:	ee08 0a10 	vmov	s16, r0
 800e1e6:	f04f 0300 	mov.w	r3, #0
 800e1ea:	f04f 020a 	mov.w	r2, #10
 800e1ee:	4641      	mov	r1, r8
 800e1f0:	4620      	mov	r0, r4
 800e1f2:	d106      	bne.n	800e202 <_dtoa_r+0xb0a>
 800e1f4:	f000 fc5e 	bl	800eab4 <__multadd>
 800e1f8:	4680      	mov	r8, r0
 800e1fa:	4607      	mov	r7, r0
 800e1fc:	f109 0901 	add.w	r9, r9, #1
 800e200:	e772      	b.n	800e0e8 <_dtoa_r+0x9f0>
 800e202:	f000 fc57 	bl	800eab4 <__multadd>
 800e206:	4639      	mov	r1, r7
 800e208:	4680      	mov	r8, r0
 800e20a:	2300      	movs	r3, #0
 800e20c:	220a      	movs	r2, #10
 800e20e:	4620      	mov	r0, r4
 800e210:	f000 fc50 	bl	800eab4 <__multadd>
 800e214:	4607      	mov	r7, r0
 800e216:	e7f1      	b.n	800e1fc <_dtoa_r+0xb04>
 800e218:	9b03      	ldr	r3, [sp, #12]
 800e21a:	9302      	str	r3, [sp, #8]
 800e21c:	9d01      	ldr	r5, [sp, #4]
 800e21e:	ee18 0a10 	vmov	r0, s16
 800e222:	4631      	mov	r1, r6
 800e224:	f7ff f9dc 	bl	800d5e0 <quorem>
 800e228:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800e22c:	9b01      	ldr	r3, [sp, #4]
 800e22e:	f805 ab01 	strb.w	sl, [r5], #1
 800e232:	1aea      	subs	r2, r5, r3
 800e234:	9b02      	ldr	r3, [sp, #8]
 800e236:	4293      	cmp	r3, r2
 800e238:	dd09      	ble.n	800e24e <_dtoa_r+0xb56>
 800e23a:	ee18 1a10 	vmov	r1, s16
 800e23e:	2300      	movs	r3, #0
 800e240:	220a      	movs	r2, #10
 800e242:	4620      	mov	r0, r4
 800e244:	f000 fc36 	bl	800eab4 <__multadd>
 800e248:	ee08 0a10 	vmov	s16, r0
 800e24c:	e7e7      	b.n	800e21e <_dtoa_r+0xb26>
 800e24e:	9b02      	ldr	r3, [sp, #8]
 800e250:	2b00      	cmp	r3, #0
 800e252:	bfc8      	it	gt
 800e254:	461d      	movgt	r5, r3
 800e256:	9b01      	ldr	r3, [sp, #4]
 800e258:	bfd8      	it	le
 800e25a:	2501      	movle	r5, #1
 800e25c:	441d      	add	r5, r3
 800e25e:	f04f 0800 	mov.w	r8, #0
 800e262:	ee18 1a10 	vmov	r1, s16
 800e266:	2201      	movs	r2, #1
 800e268:	4620      	mov	r0, r4
 800e26a:	f000 fe1d 	bl	800eea8 <__lshift>
 800e26e:	4631      	mov	r1, r6
 800e270:	ee08 0a10 	vmov	s16, r0
 800e274:	f000 fe88 	bl	800ef88 <__mcmp>
 800e278:	2800      	cmp	r0, #0
 800e27a:	dc91      	bgt.n	800e1a0 <_dtoa_r+0xaa8>
 800e27c:	d102      	bne.n	800e284 <_dtoa_r+0xb8c>
 800e27e:	f01a 0f01 	tst.w	sl, #1
 800e282:	d18d      	bne.n	800e1a0 <_dtoa_r+0xaa8>
 800e284:	462b      	mov	r3, r5
 800e286:	461d      	mov	r5, r3
 800e288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e28c:	2a30      	cmp	r2, #48	; 0x30
 800e28e:	d0fa      	beq.n	800e286 <_dtoa_r+0xb8e>
 800e290:	e6d7      	b.n	800e042 <_dtoa_r+0x94a>
 800e292:	9a01      	ldr	r2, [sp, #4]
 800e294:	429a      	cmp	r2, r3
 800e296:	d184      	bne.n	800e1a2 <_dtoa_r+0xaaa>
 800e298:	9b00      	ldr	r3, [sp, #0]
 800e29a:	3301      	adds	r3, #1
 800e29c:	9300      	str	r3, [sp, #0]
 800e29e:	2331      	movs	r3, #49	; 0x31
 800e2a0:	7013      	strb	r3, [r2, #0]
 800e2a2:	e6ce      	b.n	800e042 <_dtoa_r+0x94a>
 800e2a4:	4b09      	ldr	r3, [pc, #36]	; (800e2cc <_dtoa_r+0xbd4>)
 800e2a6:	f7ff ba95 	b.w	800d7d4 <_dtoa_r+0xdc>
 800e2aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	f47f aa6e 	bne.w	800d78e <_dtoa_r+0x96>
 800e2b2:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <_dtoa_r+0xbd8>)
 800e2b4:	f7ff ba8e 	b.w	800d7d4 <_dtoa_r+0xdc>
 800e2b8:	9b02      	ldr	r3, [sp, #8]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	dcae      	bgt.n	800e21c <_dtoa_r+0xb24>
 800e2be:	9b06      	ldr	r3, [sp, #24]
 800e2c0:	2b02      	cmp	r3, #2
 800e2c2:	f73f aea8 	bgt.w	800e016 <_dtoa_r+0x91e>
 800e2c6:	e7a9      	b.n	800e21c <_dtoa_r+0xb24>
 800e2c8:	080112c0 	.word	0x080112c0
 800e2cc:	080110c4 	.word	0x080110c4
 800e2d0:	08011241 	.word	0x08011241

0800e2d4 <rshift>:
 800e2d4:	6903      	ldr	r3, [r0, #16]
 800e2d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e2da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e2de:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e2e2:	f100 0414 	add.w	r4, r0, #20
 800e2e6:	dd45      	ble.n	800e374 <rshift+0xa0>
 800e2e8:	f011 011f 	ands.w	r1, r1, #31
 800e2ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e2f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e2f4:	d10c      	bne.n	800e310 <rshift+0x3c>
 800e2f6:	f100 0710 	add.w	r7, r0, #16
 800e2fa:	4629      	mov	r1, r5
 800e2fc:	42b1      	cmp	r1, r6
 800e2fe:	d334      	bcc.n	800e36a <rshift+0x96>
 800e300:	1a9b      	subs	r3, r3, r2
 800e302:	009b      	lsls	r3, r3, #2
 800e304:	1eea      	subs	r2, r5, #3
 800e306:	4296      	cmp	r6, r2
 800e308:	bf38      	it	cc
 800e30a:	2300      	movcc	r3, #0
 800e30c:	4423      	add	r3, r4
 800e30e:	e015      	b.n	800e33c <rshift+0x68>
 800e310:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e314:	f1c1 0820 	rsb	r8, r1, #32
 800e318:	40cf      	lsrs	r7, r1
 800e31a:	f105 0e04 	add.w	lr, r5, #4
 800e31e:	46a1      	mov	r9, r4
 800e320:	4576      	cmp	r6, lr
 800e322:	46f4      	mov	ip, lr
 800e324:	d815      	bhi.n	800e352 <rshift+0x7e>
 800e326:	1a9a      	subs	r2, r3, r2
 800e328:	0092      	lsls	r2, r2, #2
 800e32a:	3a04      	subs	r2, #4
 800e32c:	3501      	adds	r5, #1
 800e32e:	42ae      	cmp	r6, r5
 800e330:	bf38      	it	cc
 800e332:	2200      	movcc	r2, #0
 800e334:	18a3      	adds	r3, r4, r2
 800e336:	50a7      	str	r7, [r4, r2]
 800e338:	b107      	cbz	r7, 800e33c <rshift+0x68>
 800e33a:	3304      	adds	r3, #4
 800e33c:	1b1a      	subs	r2, r3, r4
 800e33e:	42a3      	cmp	r3, r4
 800e340:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e344:	bf08      	it	eq
 800e346:	2300      	moveq	r3, #0
 800e348:	6102      	str	r2, [r0, #16]
 800e34a:	bf08      	it	eq
 800e34c:	6143      	streq	r3, [r0, #20]
 800e34e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e352:	f8dc c000 	ldr.w	ip, [ip]
 800e356:	fa0c fc08 	lsl.w	ip, ip, r8
 800e35a:	ea4c 0707 	orr.w	r7, ip, r7
 800e35e:	f849 7b04 	str.w	r7, [r9], #4
 800e362:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e366:	40cf      	lsrs	r7, r1
 800e368:	e7da      	b.n	800e320 <rshift+0x4c>
 800e36a:	f851 cb04 	ldr.w	ip, [r1], #4
 800e36e:	f847 cf04 	str.w	ip, [r7, #4]!
 800e372:	e7c3      	b.n	800e2fc <rshift+0x28>
 800e374:	4623      	mov	r3, r4
 800e376:	e7e1      	b.n	800e33c <rshift+0x68>

0800e378 <__hexdig_fun>:
 800e378:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e37c:	2b09      	cmp	r3, #9
 800e37e:	d802      	bhi.n	800e386 <__hexdig_fun+0xe>
 800e380:	3820      	subs	r0, #32
 800e382:	b2c0      	uxtb	r0, r0
 800e384:	4770      	bx	lr
 800e386:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	d801      	bhi.n	800e392 <__hexdig_fun+0x1a>
 800e38e:	3847      	subs	r0, #71	; 0x47
 800e390:	e7f7      	b.n	800e382 <__hexdig_fun+0xa>
 800e392:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e396:	2b05      	cmp	r3, #5
 800e398:	d801      	bhi.n	800e39e <__hexdig_fun+0x26>
 800e39a:	3827      	subs	r0, #39	; 0x27
 800e39c:	e7f1      	b.n	800e382 <__hexdig_fun+0xa>
 800e39e:	2000      	movs	r0, #0
 800e3a0:	4770      	bx	lr
	...

0800e3a4 <__gethex>:
 800e3a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3a8:	ed2d 8b02 	vpush	{d8}
 800e3ac:	b089      	sub	sp, #36	; 0x24
 800e3ae:	ee08 0a10 	vmov	s16, r0
 800e3b2:	9304      	str	r3, [sp, #16]
 800e3b4:	4bb4      	ldr	r3, [pc, #720]	; (800e688 <__gethex+0x2e4>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	9301      	str	r3, [sp, #4]
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	468b      	mov	fp, r1
 800e3be:	4690      	mov	r8, r2
 800e3c0:	f7f1 ff06 	bl	80001d0 <strlen>
 800e3c4:	9b01      	ldr	r3, [sp, #4]
 800e3c6:	f8db 2000 	ldr.w	r2, [fp]
 800e3ca:	4403      	add	r3, r0
 800e3cc:	4682      	mov	sl, r0
 800e3ce:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e3d2:	9305      	str	r3, [sp, #20]
 800e3d4:	1c93      	adds	r3, r2, #2
 800e3d6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e3da:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e3de:	32fe      	adds	r2, #254	; 0xfe
 800e3e0:	18d1      	adds	r1, r2, r3
 800e3e2:	461f      	mov	r7, r3
 800e3e4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e3e8:	9100      	str	r1, [sp, #0]
 800e3ea:	2830      	cmp	r0, #48	; 0x30
 800e3ec:	d0f8      	beq.n	800e3e0 <__gethex+0x3c>
 800e3ee:	f7ff ffc3 	bl	800e378 <__hexdig_fun>
 800e3f2:	4604      	mov	r4, r0
 800e3f4:	2800      	cmp	r0, #0
 800e3f6:	d13a      	bne.n	800e46e <__gethex+0xca>
 800e3f8:	9901      	ldr	r1, [sp, #4]
 800e3fa:	4652      	mov	r2, sl
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	f001 fa23 	bl	800f848 <strncmp>
 800e402:	4605      	mov	r5, r0
 800e404:	2800      	cmp	r0, #0
 800e406:	d168      	bne.n	800e4da <__gethex+0x136>
 800e408:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e40c:	eb07 060a 	add.w	r6, r7, sl
 800e410:	f7ff ffb2 	bl	800e378 <__hexdig_fun>
 800e414:	2800      	cmp	r0, #0
 800e416:	d062      	beq.n	800e4de <__gethex+0x13a>
 800e418:	4633      	mov	r3, r6
 800e41a:	7818      	ldrb	r0, [r3, #0]
 800e41c:	2830      	cmp	r0, #48	; 0x30
 800e41e:	461f      	mov	r7, r3
 800e420:	f103 0301 	add.w	r3, r3, #1
 800e424:	d0f9      	beq.n	800e41a <__gethex+0x76>
 800e426:	f7ff ffa7 	bl	800e378 <__hexdig_fun>
 800e42a:	2301      	movs	r3, #1
 800e42c:	fab0 f480 	clz	r4, r0
 800e430:	0964      	lsrs	r4, r4, #5
 800e432:	4635      	mov	r5, r6
 800e434:	9300      	str	r3, [sp, #0]
 800e436:	463a      	mov	r2, r7
 800e438:	4616      	mov	r6, r2
 800e43a:	3201      	adds	r2, #1
 800e43c:	7830      	ldrb	r0, [r6, #0]
 800e43e:	f7ff ff9b 	bl	800e378 <__hexdig_fun>
 800e442:	2800      	cmp	r0, #0
 800e444:	d1f8      	bne.n	800e438 <__gethex+0x94>
 800e446:	9901      	ldr	r1, [sp, #4]
 800e448:	4652      	mov	r2, sl
 800e44a:	4630      	mov	r0, r6
 800e44c:	f001 f9fc 	bl	800f848 <strncmp>
 800e450:	b980      	cbnz	r0, 800e474 <__gethex+0xd0>
 800e452:	b94d      	cbnz	r5, 800e468 <__gethex+0xc4>
 800e454:	eb06 050a 	add.w	r5, r6, sl
 800e458:	462a      	mov	r2, r5
 800e45a:	4616      	mov	r6, r2
 800e45c:	3201      	adds	r2, #1
 800e45e:	7830      	ldrb	r0, [r6, #0]
 800e460:	f7ff ff8a 	bl	800e378 <__hexdig_fun>
 800e464:	2800      	cmp	r0, #0
 800e466:	d1f8      	bne.n	800e45a <__gethex+0xb6>
 800e468:	1bad      	subs	r5, r5, r6
 800e46a:	00ad      	lsls	r5, r5, #2
 800e46c:	e004      	b.n	800e478 <__gethex+0xd4>
 800e46e:	2400      	movs	r4, #0
 800e470:	4625      	mov	r5, r4
 800e472:	e7e0      	b.n	800e436 <__gethex+0x92>
 800e474:	2d00      	cmp	r5, #0
 800e476:	d1f7      	bne.n	800e468 <__gethex+0xc4>
 800e478:	7833      	ldrb	r3, [r6, #0]
 800e47a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e47e:	2b50      	cmp	r3, #80	; 0x50
 800e480:	d13b      	bne.n	800e4fa <__gethex+0x156>
 800e482:	7873      	ldrb	r3, [r6, #1]
 800e484:	2b2b      	cmp	r3, #43	; 0x2b
 800e486:	d02c      	beq.n	800e4e2 <__gethex+0x13e>
 800e488:	2b2d      	cmp	r3, #45	; 0x2d
 800e48a:	d02e      	beq.n	800e4ea <__gethex+0x146>
 800e48c:	1c71      	adds	r1, r6, #1
 800e48e:	f04f 0900 	mov.w	r9, #0
 800e492:	7808      	ldrb	r0, [r1, #0]
 800e494:	f7ff ff70 	bl	800e378 <__hexdig_fun>
 800e498:	1e43      	subs	r3, r0, #1
 800e49a:	b2db      	uxtb	r3, r3
 800e49c:	2b18      	cmp	r3, #24
 800e49e:	d82c      	bhi.n	800e4fa <__gethex+0x156>
 800e4a0:	f1a0 0210 	sub.w	r2, r0, #16
 800e4a4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e4a8:	f7ff ff66 	bl	800e378 <__hexdig_fun>
 800e4ac:	1e43      	subs	r3, r0, #1
 800e4ae:	b2db      	uxtb	r3, r3
 800e4b0:	2b18      	cmp	r3, #24
 800e4b2:	d91d      	bls.n	800e4f0 <__gethex+0x14c>
 800e4b4:	f1b9 0f00 	cmp.w	r9, #0
 800e4b8:	d000      	beq.n	800e4bc <__gethex+0x118>
 800e4ba:	4252      	negs	r2, r2
 800e4bc:	4415      	add	r5, r2
 800e4be:	f8cb 1000 	str.w	r1, [fp]
 800e4c2:	b1e4      	cbz	r4, 800e4fe <__gethex+0x15a>
 800e4c4:	9b00      	ldr	r3, [sp, #0]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	bf14      	ite	ne
 800e4ca:	2700      	movne	r7, #0
 800e4cc:	2706      	moveq	r7, #6
 800e4ce:	4638      	mov	r0, r7
 800e4d0:	b009      	add	sp, #36	; 0x24
 800e4d2:	ecbd 8b02 	vpop	{d8}
 800e4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4da:	463e      	mov	r6, r7
 800e4dc:	4625      	mov	r5, r4
 800e4de:	2401      	movs	r4, #1
 800e4e0:	e7ca      	b.n	800e478 <__gethex+0xd4>
 800e4e2:	f04f 0900 	mov.w	r9, #0
 800e4e6:	1cb1      	adds	r1, r6, #2
 800e4e8:	e7d3      	b.n	800e492 <__gethex+0xee>
 800e4ea:	f04f 0901 	mov.w	r9, #1
 800e4ee:	e7fa      	b.n	800e4e6 <__gethex+0x142>
 800e4f0:	230a      	movs	r3, #10
 800e4f2:	fb03 0202 	mla	r2, r3, r2, r0
 800e4f6:	3a10      	subs	r2, #16
 800e4f8:	e7d4      	b.n	800e4a4 <__gethex+0x100>
 800e4fa:	4631      	mov	r1, r6
 800e4fc:	e7df      	b.n	800e4be <__gethex+0x11a>
 800e4fe:	1bf3      	subs	r3, r6, r7
 800e500:	3b01      	subs	r3, #1
 800e502:	4621      	mov	r1, r4
 800e504:	2b07      	cmp	r3, #7
 800e506:	dc0b      	bgt.n	800e520 <__gethex+0x17c>
 800e508:	ee18 0a10 	vmov	r0, s16
 800e50c:	f000 fa70 	bl	800e9f0 <_Balloc>
 800e510:	4604      	mov	r4, r0
 800e512:	b940      	cbnz	r0, 800e526 <__gethex+0x182>
 800e514:	4b5d      	ldr	r3, [pc, #372]	; (800e68c <__gethex+0x2e8>)
 800e516:	4602      	mov	r2, r0
 800e518:	21de      	movs	r1, #222	; 0xde
 800e51a:	485d      	ldr	r0, [pc, #372]	; (800e690 <__gethex+0x2ec>)
 800e51c:	f001 f9b6 	bl	800f88c <__assert_func>
 800e520:	3101      	adds	r1, #1
 800e522:	105b      	asrs	r3, r3, #1
 800e524:	e7ee      	b.n	800e504 <__gethex+0x160>
 800e526:	f100 0914 	add.w	r9, r0, #20
 800e52a:	f04f 0b00 	mov.w	fp, #0
 800e52e:	f1ca 0301 	rsb	r3, sl, #1
 800e532:	f8cd 9008 	str.w	r9, [sp, #8]
 800e536:	f8cd b000 	str.w	fp, [sp]
 800e53a:	9306      	str	r3, [sp, #24]
 800e53c:	42b7      	cmp	r7, r6
 800e53e:	d340      	bcc.n	800e5c2 <__gethex+0x21e>
 800e540:	9802      	ldr	r0, [sp, #8]
 800e542:	9b00      	ldr	r3, [sp, #0]
 800e544:	f840 3b04 	str.w	r3, [r0], #4
 800e548:	eba0 0009 	sub.w	r0, r0, r9
 800e54c:	1080      	asrs	r0, r0, #2
 800e54e:	0146      	lsls	r6, r0, #5
 800e550:	6120      	str	r0, [r4, #16]
 800e552:	4618      	mov	r0, r3
 800e554:	f000 fb3e 	bl	800ebd4 <__hi0bits>
 800e558:	1a30      	subs	r0, r6, r0
 800e55a:	f8d8 6000 	ldr.w	r6, [r8]
 800e55e:	42b0      	cmp	r0, r6
 800e560:	dd63      	ble.n	800e62a <__gethex+0x286>
 800e562:	1b87      	subs	r7, r0, r6
 800e564:	4639      	mov	r1, r7
 800e566:	4620      	mov	r0, r4
 800e568:	f000 fee2 	bl	800f330 <__any_on>
 800e56c:	4682      	mov	sl, r0
 800e56e:	b1a8      	cbz	r0, 800e59c <__gethex+0x1f8>
 800e570:	1e7b      	subs	r3, r7, #1
 800e572:	1159      	asrs	r1, r3, #5
 800e574:	f003 021f 	and.w	r2, r3, #31
 800e578:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e57c:	f04f 0a01 	mov.w	sl, #1
 800e580:	fa0a f202 	lsl.w	r2, sl, r2
 800e584:	420a      	tst	r2, r1
 800e586:	d009      	beq.n	800e59c <__gethex+0x1f8>
 800e588:	4553      	cmp	r3, sl
 800e58a:	dd05      	ble.n	800e598 <__gethex+0x1f4>
 800e58c:	1eb9      	subs	r1, r7, #2
 800e58e:	4620      	mov	r0, r4
 800e590:	f000 fece 	bl	800f330 <__any_on>
 800e594:	2800      	cmp	r0, #0
 800e596:	d145      	bne.n	800e624 <__gethex+0x280>
 800e598:	f04f 0a02 	mov.w	sl, #2
 800e59c:	4639      	mov	r1, r7
 800e59e:	4620      	mov	r0, r4
 800e5a0:	f7ff fe98 	bl	800e2d4 <rshift>
 800e5a4:	443d      	add	r5, r7
 800e5a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e5aa:	42ab      	cmp	r3, r5
 800e5ac:	da4c      	bge.n	800e648 <__gethex+0x2a4>
 800e5ae:	ee18 0a10 	vmov	r0, s16
 800e5b2:	4621      	mov	r1, r4
 800e5b4:	f000 fa5c 	bl	800ea70 <_Bfree>
 800e5b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	6013      	str	r3, [r2, #0]
 800e5be:	27a3      	movs	r7, #163	; 0xa3
 800e5c0:	e785      	b.n	800e4ce <__gethex+0x12a>
 800e5c2:	1e73      	subs	r3, r6, #1
 800e5c4:	9a05      	ldr	r2, [sp, #20]
 800e5c6:	9303      	str	r3, [sp, #12]
 800e5c8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e5cc:	4293      	cmp	r3, r2
 800e5ce:	d019      	beq.n	800e604 <__gethex+0x260>
 800e5d0:	f1bb 0f20 	cmp.w	fp, #32
 800e5d4:	d107      	bne.n	800e5e6 <__gethex+0x242>
 800e5d6:	9b02      	ldr	r3, [sp, #8]
 800e5d8:	9a00      	ldr	r2, [sp, #0]
 800e5da:	f843 2b04 	str.w	r2, [r3], #4
 800e5de:	9302      	str	r3, [sp, #8]
 800e5e0:	2300      	movs	r3, #0
 800e5e2:	9300      	str	r3, [sp, #0]
 800e5e4:	469b      	mov	fp, r3
 800e5e6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e5ea:	f7ff fec5 	bl	800e378 <__hexdig_fun>
 800e5ee:	9b00      	ldr	r3, [sp, #0]
 800e5f0:	f000 000f 	and.w	r0, r0, #15
 800e5f4:	fa00 f00b 	lsl.w	r0, r0, fp
 800e5f8:	4303      	orrs	r3, r0
 800e5fa:	9300      	str	r3, [sp, #0]
 800e5fc:	f10b 0b04 	add.w	fp, fp, #4
 800e600:	9b03      	ldr	r3, [sp, #12]
 800e602:	e00d      	b.n	800e620 <__gethex+0x27c>
 800e604:	9b03      	ldr	r3, [sp, #12]
 800e606:	9a06      	ldr	r2, [sp, #24]
 800e608:	4413      	add	r3, r2
 800e60a:	42bb      	cmp	r3, r7
 800e60c:	d3e0      	bcc.n	800e5d0 <__gethex+0x22c>
 800e60e:	4618      	mov	r0, r3
 800e610:	9901      	ldr	r1, [sp, #4]
 800e612:	9307      	str	r3, [sp, #28]
 800e614:	4652      	mov	r2, sl
 800e616:	f001 f917 	bl	800f848 <strncmp>
 800e61a:	9b07      	ldr	r3, [sp, #28]
 800e61c:	2800      	cmp	r0, #0
 800e61e:	d1d7      	bne.n	800e5d0 <__gethex+0x22c>
 800e620:	461e      	mov	r6, r3
 800e622:	e78b      	b.n	800e53c <__gethex+0x198>
 800e624:	f04f 0a03 	mov.w	sl, #3
 800e628:	e7b8      	b.n	800e59c <__gethex+0x1f8>
 800e62a:	da0a      	bge.n	800e642 <__gethex+0x29e>
 800e62c:	1a37      	subs	r7, r6, r0
 800e62e:	4621      	mov	r1, r4
 800e630:	ee18 0a10 	vmov	r0, s16
 800e634:	463a      	mov	r2, r7
 800e636:	f000 fc37 	bl	800eea8 <__lshift>
 800e63a:	1bed      	subs	r5, r5, r7
 800e63c:	4604      	mov	r4, r0
 800e63e:	f100 0914 	add.w	r9, r0, #20
 800e642:	f04f 0a00 	mov.w	sl, #0
 800e646:	e7ae      	b.n	800e5a6 <__gethex+0x202>
 800e648:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e64c:	42a8      	cmp	r0, r5
 800e64e:	dd72      	ble.n	800e736 <__gethex+0x392>
 800e650:	1b45      	subs	r5, r0, r5
 800e652:	42ae      	cmp	r6, r5
 800e654:	dc36      	bgt.n	800e6c4 <__gethex+0x320>
 800e656:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e65a:	2b02      	cmp	r3, #2
 800e65c:	d02a      	beq.n	800e6b4 <__gethex+0x310>
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d02c      	beq.n	800e6bc <__gethex+0x318>
 800e662:	2b01      	cmp	r3, #1
 800e664:	d11c      	bne.n	800e6a0 <__gethex+0x2fc>
 800e666:	42ae      	cmp	r6, r5
 800e668:	d11a      	bne.n	800e6a0 <__gethex+0x2fc>
 800e66a:	2e01      	cmp	r6, #1
 800e66c:	d112      	bne.n	800e694 <__gethex+0x2f0>
 800e66e:	9a04      	ldr	r2, [sp, #16]
 800e670:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e674:	6013      	str	r3, [r2, #0]
 800e676:	2301      	movs	r3, #1
 800e678:	6123      	str	r3, [r4, #16]
 800e67a:	f8c9 3000 	str.w	r3, [r9]
 800e67e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e680:	2762      	movs	r7, #98	; 0x62
 800e682:	601c      	str	r4, [r3, #0]
 800e684:	e723      	b.n	800e4ce <__gethex+0x12a>
 800e686:	bf00      	nop
 800e688:	08011338 	.word	0x08011338
 800e68c:	080112c0 	.word	0x080112c0
 800e690:	080112d1 	.word	0x080112d1
 800e694:	1e71      	subs	r1, r6, #1
 800e696:	4620      	mov	r0, r4
 800e698:	f000 fe4a 	bl	800f330 <__any_on>
 800e69c:	2800      	cmp	r0, #0
 800e69e:	d1e6      	bne.n	800e66e <__gethex+0x2ca>
 800e6a0:	ee18 0a10 	vmov	r0, s16
 800e6a4:	4621      	mov	r1, r4
 800e6a6:	f000 f9e3 	bl	800ea70 <_Bfree>
 800e6aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e6ac:	2300      	movs	r3, #0
 800e6ae:	6013      	str	r3, [r2, #0]
 800e6b0:	2750      	movs	r7, #80	; 0x50
 800e6b2:	e70c      	b.n	800e4ce <__gethex+0x12a>
 800e6b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6b6:	2b00      	cmp	r3, #0
 800e6b8:	d1f2      	bne.n	800e6a0 <__gethex+0x2fc>
 800e6ba:	e7d8      	b.n	800e66e <__gethex+0x2ca>
 800e6bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d1d5      	bne.n	800e66e <__gethex+0x2ca>
 800e6c2:	e7ed      	b.n	800e6a0 <__gethex+0x2fc>
 800e6c4:	1e6f      	subs	r7, r5, #1
 800e6c6:	f1ba 0f00 	cmp.w	sl, #0
 800e6ca:	d131      	bne.n	800e730 <__gethex+0x38c>
 800e6cc:	b127      	cbz	r7, 800e6d8 <__gethex+0x334>
 800e6ce:	4639      	mov	r1, r7
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f000 fe2d 	bl	800f330 <__any_on>
 800e6d6:	4682      	mov	sl, r0
 800e6d8:	117b      	asrs	r3, r7, #5
 800e6da:	2101      	movs	r1, #1
 800e6dc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e6e0:	f007 071f 	and.w	r7, r7, #31
 800e6e4:	fa01 f707 	lsl.w	r7, r1, r7
 800e6e8:	421f      	tst	r7, r3
 800e6ea:	4629      	mov	r1, r5
 800e6ec:	4620      	mov	r0, r4
 800e6ee:	bf18      	it	ne
 800e6f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800e6f4:	1b76      	subs	r6, r6, r5
 800e6f6:	f7ff fded 	bl	800e2d4 <rshift>
 800e6fa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e6fe:	2702      	movs	r7, #2
 800e700:	f1ba 0f00 	cmp.w	sl, #0
 800e704:	d048      	beq.n	800e798 <__gethex+0x3f4>
 800e706:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e70a:	2b02      	cmp	r3, #2
 800e70c:	d015      	beq.n	800e73a <__gethex+0x396>
 800e70e:	2b03      	cmp	r3, #3
 800e710:	d017      	beq.n	800e742 <__gethex+0x39e>
 800e712:	2b01      	cmp	r3, #1
 800e714:	d109      	bne.n	800e72a <__gethex+0x386>
 800e716:	f01a 0f02 	tst.w	sl, #2
 800e71a:	d006      	beq.n	800e72a <__gethex+0x386>
 800e71c:	f8d9 0000 	ldr.w	r0, [r9]
 800e720:	ea4a 0a00 	orr.w	sl, sl, r0
 800e724:	f01a 0f01 	tst.w	sl, #1
 800e728:	d10e      	bne.n	800e748 <__gethex+0x3a4>
 800e72a:	f047 0710 	orr.w	r7, r7, #16
 800e72e:	e033      	b.n	800e798 <__gethex+0x3f4>
 800e730:	f04f 0a01 	mov.w	sl, #1
 800e734:	e7d0      	b.n	800e6d8 <__gethex+0x334>
 800e736:	2701      	movs	r7, #1
 800e738:	e7e2      	b.n	800e700 <__gethex+0x35c>
 800e73a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e73c:	f1c3 0301 	rsb	r3, r3, #1
 800e740:	9315      	str	r3, [sp, #84]	; 0x54
 800e742:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e744:	2b00      	cmp	r3, #0
 800e746:	d0f0      	beq.n	800e72a <__gethex+0x386>
 800e748:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e74c:	f104 0314 	add.w	r3, r4, #20
 800e750:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e754:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e758:	f04f 0c00 	mov.w	ip, #0
 800e75c:	4618      	mov	r0, r3
 800e75e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e762:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e766:	d01c      	beq.n	800e7a2 <__gethex+0x3fe>
 800e768:	3201      	adds	r2, #1
 800e76a:	6002      	str	r2, [r0, #0]
 800e76c:	2f02      	cmp	r7, #2
 800e76e:	f104 0314 	add.w	r3, r4, #20
 800e772:	d13f      	bne.n	800e7f4 <__gethex+0x450>
 800e774:	f8d8 2000 	ldr.w	r2, [r8]
 800e778:	3a01      	subs	r2, #1
 800e77a:	42b2      	cmp	r2, r6
 800e77c:	d10a      	bne.n	800e794 <__gethex+0x3f0>
 800e77e:	1171      	asrs	r1, r6, #5
 800e780:	2201      	movs	r2, #1
 800e782:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e786:	f006 061f 	and.w	r6, r6, #31
 800e78a:	fa02 f606 	lsl.w	r6, r2, r6
 800e78e:	421e      	tst	r6, r3
 800e790:	bf18      	it	ne
 800e792:	4617      	movne	r7, r2
 800e794:	f047 0720 	orr.w	r7, r7, #32
 800e798:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e79a:	601c      	str	r4, [r3, #0]
 800e79c:	9b04      	ldr	r3, [sp, #16]
 800e79e:	601d      	str	r5, [r3, #0]
 800e7a0:	e695      	b.n	800e4ce <__gethex+0x12a>
 800e7a2:	4299      	cmp	r1, r3
 800e7a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800e7a8:	d8d8      	bhi.n	800e75c <__gethex+0x3b8>
 800e7aa:	68a3      	ldr	r3, [r4, #8]
 800e7ac:	459b      	cmp	fp, r3
 800e7ae:	db19      	blt.n	800e7e4 <__gethex+0x440>
 800e7b0:	6861      	ldr	r1, [r4, #4]
 800e7b2:	ee18 0a10 	vmov	r0, s16
 800e7b6:	3101      	adds	r1, #1
 800e7b8:	f000 f91a 	bl	800e9f0 <_Balloc>
 800e7bc:	4681      	mov	r9, r0
 800e7be:	b918      	cbnz	r0, 800e7c8 <__gethex+0x424>
 800e7c0:	4b1a      	ldr	r3, [pc, #104]	; (800e82c <__gethex+0x488>)
 800e7c2:	4602      	mov	r2, r0
 800e7c4:	2184      	movs	r1, #132	; 0x84
 800e7c6:	e6a8      	b.n	800e51a <__gethex+0x176>
 800e7c8:	6922      	ldr	r2, [r4, #16]
 800e7ca:	3202      	adds	r2, #2
 800e7cc:	f104 010c 	add.w	r1, r4, #12
 800e7d0:	0092      	lsls	r2, r2, #2
 800e7d2:	300c      	adds	r0, #12
 800e7d4:	f7fd f998 	bl	800bb08 <memcpy>
 800e7d8:	4621      	mov	r1, r4
 800e7da:	ee18 0a10 	vmov	r0, s16
 800e7de:	f000 f947 	bl	800ea70 <_Bfree>
 800e7e2:	464c      	mov	r4, r9
 800e7e4:	6923      	ldr	r3, [r4, #16]
 800e7e6:	1c5a      	adds	r2, r3, #1
 800e7e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e7ec:	6122      	str	r2, [r4, #16]
 800e7ee:	2201      	movs	r2, #1
 800e7f0:	615a      	str	r2, [r3, #20]
 800e7f2:	e7bb      	b.n	800e76c <__gethex+0x3c8>
 800e7f4:	6922      	ldr	r2, [r4, #16]
 800e7f6:	455a      	cmp	r2, fp
 800e7f8:	dd0b      	ble.n	800e812 <__gethex+0x46e>
 800e7fa:	2101      	movs	r1, #1
 800e7fc:	4620      	mov	r0, r4
 800e7fe:	f7ff fd69 	bl	800e2d4 <rshift>
 800e802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e806:	3501      	adds	r5, #1
 800e808:	42ab      	cmp	r3, r5
 800e80a:	f6ff aed0 	blt.w	800e5ae <__gethex+0x20a>
 800e80e:	2701      	movs	r7, #1
 800e810:	e7c0      	b.n	800e794 <__gethex+0x3f0>
 800e812:	f016 061f 	ands.w	r6, r6, #31
 800e816:	d0fa      	beq.n	800e80e <__gethex+0x46a>
 800e818:	4453      	add	r3, sl
 800e81a:	f1c6 0620 	rsb	r6, r6, #32
 800e81e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800e822:	f000 f9d7 	bl	800ebd4 <__hi0bits>
 800e826:	42b0      	cmp	r0, r6
 800e828:	dbe7      	blt.n	800e7fa <__gethex+0x456>
 800e82a:	e7f0      	b.n	800e80e <__gethex+0x46a>
 800e82c:	080112c0 	.word	0x080112c0

0800e830 <L_shift>:
 800e830:	f1c2 0208 	rsb	r2, r2, #8
 800e834:	0092      	lsls	r2, r2, #2
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	f1c2 0620 	rsb	r6, r2, #32
 800e83c:	6843      	ldr	r3, [r0, #4]
 800e83e:	6804      	ldr	r4, [r0, #0]
 800e840:	fa03 f506 	lsl.w	r5, r3, r6
 800e844:	432c      	orrs	r4, r5
 800e846:	40d3      	lsrs	r3, r2
 800e848:	6004      	str	r4, [r0, #0]
 800e84a:	f840 3f04 	str.w	r3, [r0, #4]!
 800e84e:	4288      	cmp	r0, r1
 800e850:	d3f4      	bcc.n	800e83c <L_shift+0xc>
 800e852:	bd70      	pop	{r4, r5, r6, pc}

0800e854 <__match>:
 800e854:	b530      	push	{r4, r5, lr}
 800e856:	6803      	ldr	r3, [r0, #0]
 800e858:	3301      	adds	r3, #1
 800e85a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e85e:	b914      	cbnz	r4, 800e866 <__match+0x12>
 800e860:	6003      	str	r3, [r0, #0]
 800e862:	2001      	movs	r0, #1
 800e864:	bd30      	pop	{r4, r5, pc}
 800e866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e86a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e86e:	2d19      	cmp	r5, #25
 800e870:	bf98      	it	ls
 800e872:	3220      	addls	r2, #32
 800e874:	42a2      	cmp	r2, r4
 800e876:	d0f0      	beq.n	800e85a <__match+0x6>
 800e878:	2000      	movs	r0, #0
 800e87a:	e7f3      	b.n	800e864 <__match+0x10>

0800e87c <__hexnan>:
 800e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e880:	680b      	ldr	r3, [r1, #0]
 800e882:	115e      	asrs	r6, r3, #5
 800e884:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e888:	f013 031f 	ands.w	r3, r3, #31
 800e88c:	b087      	sub	sp, #28
 800e88e:	bf18      	it	ne
 800e890:	3604      	addne	r6, #4
 800e892:	2500      	movs	r5, #0
 800e894:	1f37      	subs	r7, r6, #4
 800e896:	4690      	mov	r8, r2
 800e898:	6802      	ldr	r2, [r0, #0]
 800e89a:	9301      	str	r3, [sp, #4]
 800e89c:	4682      	mov	sl, r0
 800e89e:	f846 5c04 	str.w	r5, [r6, #-4]
 800e8a2:	46b9      	mov	r9, r7
 800e8a4:	463c      	mov	r4, r7
 800e8a6:	9502      	str	r5, [sp, #8]
 800e8a8:	46ab      	mov	fp, r5
 800e8aa:	7851      	ldrb	r1, [r2, #1]
 800e8ac:	1c53      	adds	r3, r2, #1
 800e8ae:	9303      	str	r3, [sp, #12]
 800e8b0:	b341      	cbz	r1, 800e904 <__hexnan+0x88>
 800e8b2:	4608      	mov	r0, r1
 800e8b4:	9205      	str	r2, [sp, #20]
 800e8b6:	9104      	str	r1, [sp, #16]
 800e8b8:	f7ff fd5e 	bl	800e378 <__hexdig_fun>
 800e8bc:	2800      	cmp	r0, #0
 800e8be:	d14f      	bne.n	800e960 <__hexnan+0xe4>
 800e8c0:	9904      	ldr	r1, [sp, #16]
 800e8c2:	9a05      	ldr	r2, [sp, #20]
 800e8c4:	2920      	cmp	r1, #32
 800e8c6:	d818      	bhi.n	800e8fa <__hexnan+0x7e>
 800e8c8:	9b02      	ldr	r3, [sp, #8]
 800e8ca:	459b      	cmp	fp, r3
 800e8cc:	dd13      	ble.n	800e8f6 <__hexnan+0x7a>
 800e8ce:	454c      	cmp	r4, r9
 800e8d0:	d206      	bcs.n	800e8e0 <__hexnan+0x64>
 800e8d2:	2d07      	cmp	r5, #7
 800e8d4:	dc04      	bgt.n	800e8e0 <__hexnan+0x64>
 800e8d6:	462a      	mov	r2, r5
 800e8d8:	4649      	mov	r1, r9
 800e8da:	4620      	mov	r0, r4
 800e8dc:	f7ff ffa8 	bl	800e830 <L_shift>
 800e8e0:	4544      	cmp	r4, r8
 800e8e2:	d950      	bls.n	800e986 <__hexnan+0x10a>
 800e8e4:	2300      	movs	r3, #0
 800e8e6:	f1a4 0904 	sub.w	r9, r4, #4
 800e8ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800e8ee:	f8cd b008 	str.w	fp, [sp, #8]
 800e8f2:	464c      	mov	r4, r9
 800e8f4:	461d      	mov	r5, r3
 800e8f6:	9a03      	ldr	r2, [sp, #12]
 800e8f8:	e7d7      	b.n	800e8aa <__hexnan+0x2e>
 800e8fa:	2929      	cmp	r1, #41	; 0x29
 800e8fc:	d156      	bne.n	800e9ac <__hexnan+0x130>
 800e8fe:	3202      	adds	r2, #2
 800e900:	f8ca 2000 	str.w	r2, [sl]
 800e904:	f1bb 0f00 	cmp.w	fp, #0
 800e908:	d050      	beq.n	800e9ac <__hexnan+0x130>
 800e90a:	454c      	cmp	r4, r9
 800e90c:	d206      	bcs.n	800e91c <__hexnan+0xa0>
 800e90e:	2d07      	cmp	r5, #7
 800e910:	dc04      	bgt.n	800e91c <__hexnan+0xa0>
 800e912:	462a      	mov	r2, r5
 800e914:	4649      	mov	r1, r9
 800e916:	4620      	mov	r0, r4
 800e918:	f7ff ff8a 	bl	800e830 <L_shift>
 800e91c:	4544      	cmp	r4, r8
 800e91e:	d934      	bls.n	800e98a <__hexnan+0x10e>
 800e920:	f1a8 0204 	sub.w	r2, r8, #4
 800e924:	4623      	mov	r3, r4
 800e926:	f853 1b04 	ldr.w	r1, [r3], #4
 800e92a:	f842 1f04 	str.w	r1, [r2, #4]!
 800e92e:	429f      	cmp	r7, r3
 800e930:	d2f9      	bcs.n	800e926 <__hexnan+0xaa>
 800e932:	1b3b      	subs	r3, r7, r4
 800e934:	f023 0303 	bic.w	r3, r3, #3
 800e938:	3304      	adds	r3, #4
 800e93a:	3401      	adds	r4, #1
 800e93c:	3e03      	subs	r6, #3
 800e93e:	42b4      	cmp	r4, r6
 800e940:	bf88      	it	hi
 800e942:	2304      	movhi	r3, #4
 800e944:	4443      	add	r3, r8
 800e946:	2200      	movs	r2, #0
 800e948:	f843 2b04 	str.w	r2, [r3], #4
 800e94c:	429f      	cmp	r7, r3
 800e94e:	d2fb      	bcs.n	800e948 <__hexnan+0xcc>
 800e950:	683b      	ldr	r3, [r7, #0]
 800e952:	b91b      	cbnz	r3, 800e95c <__hexnan+0xe0>
 800e954:	4547      	cmp	r7, r8
 800e956:	d127      	bne.n	800e9a8 <__hexnan+0x12c>
 800e958:	2301      	movs	r3, #1
 800e95a:	603b      	str	r3, [r7, #0]
 800e95c:	2005      	movs	r0, #5
 800e95e:	e026      	b.n	800e9ae <__hexnan+0x132>
 800e960:	3501      	adds	r5, #1
 800e962:	2d08      	cmp	r5, #8
 800e964:	f10b 0b01 	add.w	fp, fp, #1
 800e968:	dd06      	ble.n	800e978 <__hexnan+0xfc>
 800e96a:	4544      	cmp	r4, r8
 800e96c:	d9c3      	bls.n	800e8f6 <__hexnan+0x7a>
 800e96e:	2300      	movs	r3, #0
 800e970:	f844 3c04 	str.w	r3, [r4, #-4]
 800e974:	2501      	movs	r5, #1
 800e976:	3c04      	subs	r4, #4
 800e978:	6822      	ldr	r2, [r4, #0]
 800e97a:	f000 000f 	and.w	r0, r0, #15
 800e97e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e982:	6022      	str	r2, [r4, #0]
 800e984:	e7b7      	b.n	800e8f6 <__hexnan+0x7a>
 800e986:	2508      	movs	r5, #8
 800e988:	e7b5      	b.n	800e8f6 <__hexnan+0x7a>
 800e98a:	9b01      	ldr	r3, [sp, #4]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d0df      	beq.n	800e950 <__hexnan+0xd4>
 800e990:	f04f 32ff 	mov.w	r2, #4294967295
 800e994:	f1c3 0320 	rsb	r3, r3, #32
 800e998:	fa22 f303 	lsr.w	r3, r2, r3
 800e99c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e9a0:	401a      	ands	r2, r3
 800e9a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800e9a6:	e7d3      	b.n	800e950 <__hexnan+0xd4>
 800e9a8:	3f04      	subs	r7, #4
 800e9aa:	e7d1      	b.n	800e950 <__hexnan+0xd4>
 800e9ac:	2004      	movs	r0, #4
 800e9ae:	b007      	add	sp, #28
 800e9b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e9b4 <_localeconv_r>:
 800e9b4:	4800      	ldr	r0, [pc, #0]	; (800e9b8 <_localeconv_r+0x4>)
 800e9b6:	4770      	bx	lr
 800e9b8:	20000168 	.word	0x20000168

0800e9bc <malloc>:
 800e9bc:	4b02      	ldr	r3, [pc, #8]	; (800e9c8 <malloc+0xc>)
 800e9be:	4601      	mov	r1, r0
 800e9c0:	6818      	ldr	r0, [r3, #0]
 800e9c2:	f000 bd59 	b.w	800f478 <_malloc_r>
 800e9c6:	bf00      	nop
 800e9c8:	20000010 	.word	0x20000010

0800e9cc <__ascii_mbtowc>:
 800e9cc:	b082      	sub	sp, #8
 800e9ce:	b901      	cbnz	r1, 800e9d2 <__ascii_mbtowc+0x6>
 800e9d0:	a901      	add	r1, sp, #4
 800e9d2:	b142      	cbz	r2, 800e9e6 <__ascii_mbtowc+0x1a>
 800e9d4:	b14b      	cbz	r3, 800e9ea <__ascii_mbtowc+0x1e>
 800e9d6:	7813      	ldrb	r3, [r2, #0]
 800e9d8:	600b      	str	r3, [r1, #0]
 800e9da:	7812      	ldrb	r2, [r2, #0]
 800e9dc:	1e10      	subs	r0, r2, #0
 800e9de:	bf18      	it	ne
 800e9e0:	2001      	movne	r0, #1
 800e9e2:	b002      	add	sp, #8
 800e9e4:	4770      	bx	lr
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	e7fb      	b.n	800e9e2 <__ascii_mbtowc+0x16>
 800e9ea:	f06f 0001 	mvn.w	r0, #1
 800e9ee:	e7f8      	b.n	800e9e2 <__ascii_mbtowc+0x16>

0800e9f0 <_Balloc>:
 800e9f0:	b570      	push	{r4, r5, r6, lr}
 800e9f2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e9f4:	4604      	mov	r4, r0
 800e9f6:	460d      	mov	r5, r1
 800e9f8:	b976      	cbnz	r6, 800ea18 <_Balloc+0x28>
 800e9fa:	2010      	movs	r0, #16
 800e9fc:	f7ff ffde 	bl	800e9bc <malloc>
 800ea00:	4602      	mov	r2, r0
 800ea02:	6260      	str	r0, [r4, #36]	; 0x24
 800ea04:	b920      	cbnz	r0, 800ea10 <_Balloc+0x20>
 800ea06:	4b18      	ldr	r3, [pc, #96]	; (800ea68 <_Balloc+0x78>)
 800ea08:	4818      	ldr	r0, [pc, #96]	; (800ea6c <_Balloc+0x7c>)
 800ea0a:	2166      	movs	r1, #102	; 0x66
 800ea0c:	f000 ff3e 	bl	800f88c <__assert_func>
 800ea10:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea14:	6006      	str	r6, [r0, #0]
 800ea16:	60c6      	str	r6, [r0, #12]
 800ea18:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ea1a:	68f3      	ldr	r3, [r6, #12]
 800ea1c:	b183      	cbz	r3, 800ea40 <_Balloc+0x50>
 800ea1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea20:	68db      	ldr	r3, [r3, #12]
 800ea22:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ea26:	b9b8      	cbnz	r0, 800ea58 <_Balloc+0x68>
 800ea28:	2101      	movs	r1, #1
 800ea2a:	fa01 f605 	lsl.w	r6, r1, r5
 800ea2e:	1d72      	adds	r2, r6, #5
 800ea30:	0092      	lsls	r2, r2, #2
 800ea32:	4620      	mov	r0, r4
 800ea34:	f000 fc9d 	bl	800f372 <_calloc_r>
 800ea38:	b160      	cbz	r0, 800ea54 <_Balloc+0x64>
 800ea3a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ea3e:	e00e      	b.n	800ea5e <_Balloc+0x6e>
 800ea40:	2221      	movs	r2, #33	; 0x21
 800ea42:	2104      	movs	r1, #4
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 fc94 	bl	800f372 <_calloc_r>
 800ea4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea4c:	60f0      	str	r0, [r6, #12]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	2b00      	cmp	r3, #0
 800ea52:	d1e4      	bne.n	800ea1e <_Balloc+0x2e>
 800ea54:	2000      	movs	r0, #0
 800ea56:	bd70      	pop	{r4, r5, r6, pc}
 800ea58:	6802      	ldr	r2, [r0, #0]
 800ea5a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea5e:	2300      	movs	r3, #0
 800ea60:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea64:	e7f7      	b.n	800ea56 <_Balloc+0x66>
 800ea66:	bf00      	nop
 800ea68:	0801124e 	.word	0x0801124e
 800ea6c:	0801134c 	.word	0x0801134c

0800ea70 <_Bfree>:
 800ea70:	b570      	push	{r4, r5, r6, lr}
 800ea72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea74:	4605      	mov	r5, r0
 800ea76:	460c      	mov	r4, r1
 800ea78:	b976      	cbnz	r6, 800ea98 <_Bfree+0x28>
 800ea7a:	2010      	movs	r0, #16
 800ea7c:	f7ff ff9e 	bl	800e9bc <malloc>
 800ea80:	4602      	mov	r2, r0
 800ea82:	6268      	str	r0, [r5, #36]	; 0x24
 800ea84:	b920      	cbnz	r0, 800ea90 <_Bfree+0x20>
 800ea86:	4b09      	ldr	r3, [pc, #36]	; (800eaac <_Bfree+0x3c>)
 800ea88:	4809      	ldr	r0, [pc, #36]	; (800eab0 <_Bfree+0x40>)
 800ea8a:	218a      	movs	r1, #138	; 0x8a
 800ea8c:	f000 fefe 	bl	800f88c <__assert_func>
 800ea90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea94:	6006      	str	r6, [r0, #0]
 800ea96:	60c6      	str	r6, [r0, #12]
 800ea98:	b13c      	cbz	r4, 800eaaa <_Bfree+0x3a>
 800ea9a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ea9c:	6862      	ldr	r2, [r4, #4]
 800ea9e:	68db      	ldr	r3, [r3, #12]
 800eaa0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eaa4:	6021      	str	r1, [r4, #0]
 800eaa6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eaaa:	bd70      	pop	{r4, r5, r6, pc}
 800eaac:	0801124e 	.word	0x0801124e
 800eab0:	0801134c 	.word	0x0801134c

0800eab4 <__multadd>:
 800eab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eab8:	690d      	ldr	r5, [r1, #16]
 800eaba:	4607      	mov	r7, r0
 800eabc:	460c      	mov	r4, r1
 800eabe:	461e      	mov	r6, r3
 800eac0:	f101 0c14 	add.w	ip, r1, #20
 800eac4:	2000      	movs	r0, #0
 800eac6:	f8dc 3000 	ldr.w	r3, [ip]
 800eaca:	b299      	uxth	r1, r3
 800eacc:	fb02 6101 	mla	r1, r2, r1, r6
 800ead0:	0c1e      	lsrs	r6, r3, #16
 800ead2:	0c0b      	lsrs	r3, r1, #16
 800ead4:	fb02 3306 	mla	r3, r2, r6, r3
 800ead8:	b289      	uxth	r1, r1
 800eada:	3001      	adds	r0, #1
 800eadc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800eae0:	4285      	cmp	r5, r0
 800eae2:	f84c 1b04 	str.w	r1, [ip], #4
 800eae6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaea:	dcec      	bgt.n	800eac6 <__multadd+0x12>
 800eaec:	b30e      	cbz	r6, 800eb32 <__multadd+0x7e>
 800eaee:	68a3      	ldr	r3, [r4, #8]
 800eaf0:	42ab      	cmp	r3, r5
 800eaf2:	dc19      	bgt.n	800eb28 <__multadd+0x74>
 800eaf4:	6861      	ldr	r1, [r4, #4]
 800eaf6:	4638      	mov	r0, r7
 800eaf8:	3101      	adds	r1, #1
 800eafa:	f7ff ff79 	bl	800e9f0 <_Balloc>
 800eafe:	4680      	mov	r8, r0
 800eb00:	b928      	cbnz	r0, 800eb0e <__multadd+0x5a>
 800eb02:	4602      	mov	r2, r0
 800eb04:	4b0c      	ldr	r3, [pc, #48]	; (800eb38 <__multadd+0x84>)
 800eb06:	480d      	ldr	r0, [pc, #52]	; (800eb3c <__multadd+0x88>)
 800eb08:	21b5      	movs	r1, #181	; 0xb5
 800eb0a:	f000 febf 	bl	800f88c <__assert_func>
 800eb0e:	6922      	ldr	r2, [r4, #16]
 800eb10:	3202      	adds	r2, #2
 800eb12:	f104 010c 	add.w	r1, r4, #12
 800eb16:	0092      	lsls	r2, r2, #2
 800eb18:	300c      	adds	r0, #12
 800eb1a:	f7fc fff5 	bl	800bb08 <memcpy>
 800eb1e:	4621      	mov	r1, r4
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7ff ffa5 	bl	800ea70 <_Bfree>
 800eb26:	4644      	mov	r4, r8
 800eb28:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eb2c:	3501      	adds	r5, #1
 800eb2e:	615e      	str	r6, [r3, #20]
 800eb30:	6125      	str	r5, [r4, #16]
 800eb32:	4620      	mov	r0, r4
 800eb34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb38:	080112c0 	.word	0x080112c0
 800eb3c:	0801134c 	.word	0x0801134c

0800eb40 <__s2b>:
 800eb40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb44:	460c      	mov	r4, r1
 800eb46:	4615      	mov	r5, r2
 800eb48:	461f      	mov	r7, r3
 800eb4a:	2209      	movs	r2, #9
 800eb4c:	3308      	adds	r3, #8
 800eb4e:	4606      	mov	r6, r0
 800eb50:	fb93 f3f2 	sdiv	r3, r3, r2
 800eb54:	2100      	movs	r1, #0
 800eb56:	2201      	movs	r2, #1
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	db09      	blt.n	800eb70 <__s2b+0x30>
 800eb5c:	4630      	mov	r0, r6
 800eb5e:	f7ff ff47 	bl	800e9f0 <_Balloc>
 800eb62:	b940      	cbnz	r0, 800eb76 <__s2b+0x36>
 800eb64:	4602      	mov	r2, r0
 800eb66:	4b19      	ldr	r3, [pc, #100]	; (800ebcc <__s2b+0x8c>)
 800eb68:	4819      	ldr	r0, [pc, #100]	; (800ebd0 <__s2b+0x90>)
 800eb6a:	21ce      	movs	r1, #206	; 0xce
 800eb6c:	f000 fe8e 	bl	800f88c <__assert_func>
 800eb70:	0052      	lsls	r2, r2, #1
 800eb72:	3101      	adds	r1, #1
 800eb74:	e7f0      	b.n	800eb58 <__s2b+0x18>
 800eb76:	9b08      	ldr	r3, [sp, #32]
 800eb78:	6143      	str	r3, [r0, #20]
 800eb7a:	2d09      	cmp	r5, #9
 800eb7c:	f04f 0301 	mov.w	r3, #1
 800eb80:	6103      	str	r3, [r0, #16]
 800eb82:	dd16      	ble.n	800ebb2 <__s2b+0x72>
 800eb84:	f104 0909 	add.w	r9, r4, #9
 800eb88:	46c8      	mov	r8, r9
 800eb8a:	442c      	add	r4, r5
 800eb8c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800eb90:	4601      	mov	r1, r0
 800eb92:	3b30      	subs	r3, #48	; 0x30
 800eb94:	220a      	movs	r2, #10
 800eb96:	4630      	mov	r0, r6
 800eb98:	f7ff ff8c 	bl	800eab4 <__multadd>
 800eb9c:	45a0      	cmp	r8, r4
 800eb9e:	d1f5      	bne.n	800eb8c <__s2b+0x4c>
 800eba0:	f1a5 0408 	sub.w	r4, r5, #8
 800eba4:	444c      	add	r4, r9
 800eba6:	1b2d      	subs	r5, r5, r4
 800eba8:	1963      	adds	r3, r4, r5
 800ebaa:	42bb      	cmp	r3, r7
 800ebac:	db04      	blt.n	800ebb8 <__s2b+0x78>
 800ebae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb2:	340a      	adds	r4, #10
 800ebb4:	2509      	movs	r5, #9
 800ebb6:	e7f6      	b.n	800eba6 <__s2b+0x66>
 800ebb8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ebbc:	4601      	mov	r1, r0
 800ebbe:	3b30      	subs	r3, #48	; 0x30
 800ebc0:	220a      	movs	r2, #10
 800ebc2:	4630      	mov	r0, r6
 800ebc4:	f7ff ff76 	bl	800eab4 <__multadd>
 800ebc8:	e7ee      	b.n	800eba8 <__s2b+0x68>
 800ebca:	bf00      	nop
 800ebcc:	080112c0 	.word	0x080112c0
 800ebd0:	0801134c 	.word	0x0801134c

0800ebd4 <__hi0bits>:
 800ebd4:	0c03      	lsrs	r3, r0, #16
 800ebd6:	041b      	lsls	r3, r3, #16
 800ebd8:	b9d3      	cbnz	r3, 800ec10 <__hi0bits+0x3c>
 800ebda:	0400      	lsls	r0, r0, #16
 800ebdc:	2310      	movs	r3, #16
 800ebde:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ebe2:	bf04      	itt	eq
 800ebe4:	0200      	lsleq	r0, r0, #8
 800ebe6:	3308      	addeq	r3, #8
 800ebe8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ebec:	bf04      	itt	eq
 800ebee:	0100      	lsleq	r0, r0, #4
 800ebf0:	3304      	addeq	r3, #4
 800ebf2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800ebf6:	bf04      	itt	eq
 800ebf8:	0080      	lsleq	r0, r0, #2
 800ebfa:	3302      	addeq	r3, #2
 800ebfc:	2800      	cmp	r0, #0
 800ebfe:	db05      	blt.n	800ec0c <__hi0bits+0x38>
 800ec00:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ec04:	f103 0301 	add.w	r3, r3, #1
 800ec08:	bf08      	it	eq
 800ec0a:	2320      	moveq	r3, #32
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	4770      	bx	lr
 800ec10:	2300      	movs	r3, #0
 800ec12:	e7e4      	b.n	800ebde <__hi0bits+0xa>

0800ec14 <__lo0bits>:
 800ec14:	6803      	ldr	r3, [r0, #0]
 800ec16:	f013 0207 	ands.w	r2, r3, #7
 800ec1a:	4601      	mov	r1, r0
 800ec1c:	d00b      	beq.n	800ec36 <__lo0bits+0x22>
 800ec1e:	07da      	lsls	r2, r3, #31
 800ec20:	d423      	bmi.n	800ec6a <__lo0bits+0x56>
 800ec22:	0798      	lsls	r0, r3, #30
 800ec24:	bf49      	itett	mi
 800ec26:	085b      	lsrmi	r3, r3, #1
 800ec28:	089b      	lsrpl	r3, r3, #2
 800ec2a:	2001      	movmi	r0, #1
 800ec2c:	600b      	strmi	r3, [r1, #0]
 800ec2e:	bf5c      	itt	pl
 800ec30:	600b      	strpl	r3, [r1, #0]
 800ec32:	2002      	movpl	r0, #2
 800ec34:	4770      	bx	lr
 800ec36:	b298      	uxth	r0, r3
 800ec38:	b9a8      	cbnz	r0, 800ec66 <__lo0bits+0x52>
 800ec3a:	0c1b      	lsrs	r3, r3, #16
 800ec3c:	2010      	movs	r0, #16
 800ec3e:	b2da      	uxtb	r2, r3
 800ec40:	b90a      	cbnz	r2, 800ec46 <__lo0bits+0x32>
 800ec42:	3008      	adds	r0, #8
 800ec44:	0a1b      	lsrs	r3, r3, #8
 800ec46:	071a      	lsls	r2, r3, #28
 800ec48:	bf04      	itt	eq
 800ec4a:	091b      	lsreq	r3, r3, #4
 800ec4c:	3004      	addeq	r0, #4
 800ec4e:	079a      	lsls	r2, r3, #30
 800ec50:	bf04      	itt	eq
 800ec52:	089b      	lsreq	r3, r3, #2
 800ec54:	3002      	addeq	r0, #2
 800ec56:	07da      	lsls	r2, r3, #31
 800ec58:	d403      	bmi.n	800ec62 <__lo0bits+0x4e>
 800ec5a:	085b      	lsrs	r3, r3, #1
 800ec5c:	f100 0001 	add.w	r0, r0, #1
 800ec60:	d005      	beq.n	800ec6e <__lo0bits+0x5a>
 800ec62:	600b      	str	r3, [r1, #0]
 800ec64:	4770      	bx	lr
 800ec66:	4610      	mov	r0, r2
 800ec68:	e7e9      	b.n	800ec3e <__lo0bits+0x2a>
 800ec6a:	2000      	movs	r0, #0
 800ec6c:	4770      	bx	lr
 800ec6e:	2020      	movs	r0, #32
 800ec70:	4770      	bx	lr
	...

0800ec74 <__i2b>:
 800ec74:	b510      	push	{r4, lr}
 800ec76:	460c      	mov	r4, r1
 800ec78:	2101      	movs	r1, #1
 800ec7a:	f7ff feb9 	bl	800e9f0 <_Balloc>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	b928      	cbnz	r0, 800ec8e <__i2b+0x1a>
 800ec82:	4b05      	ldr	r3, [pc, #20]	; (800ec98 <__i2b+0x24>)
 800ec84:	4805      	ldr	r0, [pc, #20]	; (800ec9c <__i2b+0x28>)
 800ec86:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ec8a:	f000 fdff 	bl	800f88c <__assert_func>
 800ec8e:	2301      	movs	r3, #1
 800ec90:	6144      	str	r4, [r0, #20]
 800ec92:	6103      	str	r3, [r0, #16]
 800ec94:	bd10      	pop	{r4, pc}
 800ec96:	bf00      	nop
 800ec98:	080112c0 	.word	0x080112c0
 800ec9c:	0801134c 	.word	0x0801134c

0800eca0 <__multiply>:
 800eca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eca4:	4691      	mov	r9, r2
 800eca6:	690a      	ldr	r2, [r1, #16]
 800eca8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ecac:	429a      	cmp	r2, r3
 800ecae:	bfb8      	it	lt
 800ecb0:	460b      	movlt	r3, r1
 800ecb2:	460c      	mov	r4, r1
 800ecb4:	bfbc      	itt	lt
 800ecb6:	464c      	movlt	r4, r9
 800ecb8:	4699      	movlt	r9, r3
 800ecba:	6927      	ldr	r7, [r4, #16]
 800ecbc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ecc0:	68a3      	ldr	r3, [r4, #8]
 800ecc2:	6861      	ldr	r1, [r4, #4]
 800ecc4:	eb07 060a 	add.w	r6, r7, sl
 800ecc8:	42b3      	cmp	r3, r6
 800ecca:	b085      	sub	sp, #20
 800eccc:	bfb8      	it	lt
 800ecce:	3101      	addlt	r1, #1
 800ecd0:	f7ff fe8e 	bl	800e9f0 <_Balloc>
 800ecd4:	b930      	cbnz	r0, 800ece4 <__multiply+0x44>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	4b44      	ldr	r3, [pc, #272]	; (800edec <__multiply+0x14c>)
 800ecda:	4845      	ldr	r0, [pc, #276]	; (800edf0 <__multiply+0x150>)
 800ecdc:	f240 115d 	movw	r1, #349	; 0x15d
 800ece0:	f000 fdd4 	bl	800f88c <__assert_func>
 800ece4:	f100 0514 	add.w	r5, r0, #20
 800ece8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ecec:	462b      	mov	r3, r5
 800ecee:	2200      	movs	r2, #0
 800ecf0:	4543      	cmp	r3, r8
 800ecf2:	d321      	bcc.n	800ed38 <__multiply+0x98>
 800ecf4:	f104 0314 	add.w	r3, r4, #20
 800ecf8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ecfc:	f109 0314 	add.w	r3, r9, #20
 800ed00:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ed04:	9202      	str	r2, [sp, #8]
 800ed06:	1b3a      	subs	r2, r7, r4
 800ed08:	3a15      	subs	r2, #21
 800ed0a:	f022 0203 	bic.w	r2, r2, #3
 800ed0e:	3204      	adds	r2, #4
 800ed10:	f104 0115 	add.w	r1, r4, #21
 800ed14:	428f      	cmp	r7, r1
 800ed16:	bf38      	it	cc
 800ed18:	2204      	movcc	r2, #4
 800ed1a:	9201      	str	r2, [sp, #4]
 800ed1c:	9a02      	ldr	r2, [sp, #8]
 800ed1e:	9303      	str	r3, [sp, #12]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d80c      	bhi.n	800ed3e <__multiply+0x9e>
 800ed24:	2e00      	cmp	r6, #0
 800ed26:	dd03      	ble.n	800ed30 <__multiply+0x90>
 800ed28:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d05a      	beq.n	800ede6 <__multiply+0x146>
 800ed30:	6106      	str	r6, [r0, #16]
 800ed32:	b005      	add	sp, #20
 800ed34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed38:	f843 2b04 	str.w	r2, [r3], #4
 800ed3c:	e7d8      	b.n	800ecf0 <__multiply+0x50>
 800ed3e:	f8b3 a000 	ldrh.w	sl, [r3]
 800ed42:	f1ba 0f00 	cmp.w	sl, #0
 800ed46:	d024      	beq.n	800ed92 <__multiply+0xf2>
 800ed48:	f104 0e14 	add.w	lr, r4, #20
 800ed4c:	46a9      	mov	r9, r5
 800ed4e:	f04f 0c00 	mov.w	ip, #0
 800ed52:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ed56:	f8d9 1000 	ldr.w	r1, [r9]
 800ed5a:	fa1f fb82 	uxth.w	fp, r2
 800ed5e:	b289      	uxth	r1, r1
 800ed60:	fb0a 110b 	mla	r1, sl, fp, r1
 800ed64:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ed68:	f8d9 2000 	ldr.w	r2, [r9]
 800ed6c:	4461      	add	r1, ip
 800ed6e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed72:	fb0a c20b 	mla	r2, sl, fp, ip
 800ed76:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ed7a:	b289      	uxth	r1, r1
 800ed7c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ed80:	4577      	cmp	r7, lr
 800ed82:	f849 1b04 	str.w	r1, [r9], #4
 800ed86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ed8a:	d8e2      	bhi.n	800ed52 <__multiply+0xb2>
 800ed8c:	9a01      	ldr	r2, [sp, #4]
 800ed8e:	f845 c002 	str.w	ip, [r5, r2]
 800ed92:	9a03      	ldr	r2, [sp, #12]
 800ed94:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	f1b9 0f00 	cmp.w	r9, #0
 800ed9e:	d020      	beq.n	800ede2 <__multiply+0x142>
 800eda0:	6829      	ldr	r1, [r5, #0]
 800eda2:	f104 0c14 	add.w	ip, r4, #20
 800eda6:	46ae      	mov	lr, r5
 800eda8:	f04f 0a00 	mov.w	sl, #0
 800edac:	f8bc b000 	ldrh.w	fp, [ip]
 800edb0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800edb4:	fb09 220b 	mla	r2, r9, fp, r2
 800edb8:	4492      	add	sl, r2
 800edba:	b289      	uxth	r1, r1
 800edbc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800edc0:	f84e 1b04 	str.w	r1, [lr], #4
 800edc4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800edc8:	f8be 1000 	ldrh.w	r1, [lr]
 800edcc:	0c12      	lsrs	r2, r2, #16
 800edce:	fb09 1102 	mla	r1, r9, r2, r1
 800edd2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800edd6:	4567      	cmp	r7, ip
 800edd8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800eddc:	d8e6      	bhi.n	800edac <__multiply+0x10c>
 800edde:	9a01      	ldr	r2, [sp, #4]
 800ede0:	50a9      	str	r1, [r5, r2]
 800ede2:	3504      	adds	r5, #4
 800ede4:	e79a      	b.n	800ed1c <__multiply+0x7c>
 800ede6:	3e01      	subs	r6, #1
 800ede8:	e79c      	b.n	800ed24 <__multiply+0x84>
 800edea:	bf00      	nop
 800edec:	080112c0 	.word	0x080112c0
 800edf0:	0801134c 	.word	0x0801134c

0800edf4 <__pow5mult>:
 800edf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800edf8:	4615      	mov	r5, r2
 800edfa:	f012 0203 	ands.w	r2, r2, #3
 800edfe:	4606      	mov	r6, r0
 800ee00:	460f      	mov	r7, r1
 800ee02:	d007      	beq.n	800ee14 <__pow5mult+0x20>
 800ee04:	4c25      	ldr	r4, [pc, #148]	; (800ee9c <__pow5mult+0xa8>)
 800ee06:	3a01      	subs	r2, #1
 800ee08:	2300      	movs	r3, #0
 800ee0a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee0e:	f7ff fe51 	bl	800eab4 <__multadd>
 800ee12:	4607      	mov	r7, r0
 800ee14:	10ad      	asrs	r5, r5, #2
 800ee16:	d03d      	beq.n	800ee94 <__pow5mult+0xa0>
 800ee18:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ee1a:	b97c      	cbnz	r4, 800ee3c <__pow5mult+0x48>
 800ee1c:	2010      	movs	r0, #16
 800ee1e:	f7ff fdcd 	bl	800e9bc <malloc>
 800ee22:	4602      	mov	r2, r0
 800ee24:	6270      	str	r0, [r6, #36]	; 0x24
 800ee26:	b928      	cbnz	r0, 800ee34 <__pow5mult+0x40>
 800ee28:	4b1d      	ldr	r3, [pc, #116]	; (800eea0 <__pow5mult+0xac>)
 800ee2a:	481e      	ldr	r0, [pc, #120]	; (800eea4 <__pow5mult+0xb0>)
 800ee2c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ee30:	f000 fd2c 	bl	800f88c <__assert_func>
 800ee34:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee38:	6004      	str	r4, [r0, #0]
 800ee3a:	60c4      	str	r4, [r0, #12]
 800ee3c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ee40:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ee44:	b94c      	cbnz	r4, 800ee5a <__pow5mult+0x66>
 800ee46:	f240 2171 	movw	r1, #625	; 0x271
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f7ff ff12 	bl	800ec74 <__i2b>
 800ee50:	2300      	movs	r3, #0
 800ee52:	f8c8 0008 	str.w	r0, [r8, #8]
 800ee56:	4604      	mov	r4, r0
 800ee58:	6003      	str	r3, [r0, #0]
 800ee5a:	f04f 0900 	mov.w	r9, #0
 800ee5e:	07eb      	lsls	r3, r5, #31
 800ee60:	d50a      	bpl.n	800ee78 <__pow5mult+0x84>
 800ee62:	4639      	mov	r1, r7
 800ee64:	4622      	mov	r2, r4
 800ee66:	4630      	mov	r0, r6
 800ee68:	f7ff ff1a 	bl	800eca0 <__multiply>
 800ee6c:	4639      	mov	r1, r7
 800ee6e:	4680      	mov	r8, r0
 800ee70:	4630      	mov	r0, r6
 800ee72:	f7ff fdfd 	bl	800ea70 <_Bfree>
 800ee76:	4647      	mov	r7, r8
 800ee78:	106d      	asrs	r5, r5, #1
 800ee7a:	d00b      	beq.n	800ee94 <__pow5mult+0xa0>
 800ee7c:	6820      	ldr	r0, [r4, #0]
 800ee7e:	b938      	cbnz	r0, 800ee90 <__pow5mult+0x9c>
 800ee80:	4622      	mov	r2, r4
 800ee82:	4621      	mov	r1, r4
 800ee84:	4630      	mov	r0, r6
 800ee86:	f7ff ff0b 	bl	800eca0 <__multiply>
 800ee8a:	6020      	str	r0, [r4, #0]
 800ee8c:	f8c0 9000 	str.w	r9, [r0]
 800ee90:	4604      	mov	r4, r0
 800ee92:	e7e4      	b.n	800ee5e <__pow5mult+0x6a>
 800ee94:	4638      	mov	r0, r7
 800ee96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ee9a:	bf00      	nop
 800ee9c:	08011498 	.word	0x08011498
 800eea0:	0801124e 	.word	0x0801124e
 800eea4:	0801134c 	.word	0x0801134c

0800eea8 <__lshift>:
 800eea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eeac:	460c      	mov	r4, r1
 800eeae:	6849      	ldr	r1, [r1, #4]
 800eeb0:	6923      	ldr	r3, [r4, #16]
 800eeb2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800eeb6:	68a3      	ldr	r3, [r4, #8]
 800eeb8:	4607      	mov	r7, r0
 800eeba:	4691      	mov	r9, r2
 800eebc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eec0:	f108 0601 	add.w	r6, r8, #1
 800eec4:	42b3      	cmp	r3, r6
 800eec6:	db0b      	blt.n	800eee0 <__lshift+0x38>
 800eec8:	4638      	mov	r0, r7
 800eeca:	f7ff fd91 	bl	800e9f0 <_Balloc>
 800eece:	4605      	mov	r5, r0
 800eed0:	b948      	cbnz	r0, 800eee6 <__lshift+0x3e>
 800eed2:	4602      	mov	r2, r0
 800eed4:	4b2a      	ldr	r3, [pc, #168]	; (800ef80 <__lshift+0xd8>)
 800eed6:	482b      	ldr	r0, [pc, #172]	; (800ef84 <__lshift+0xdc>)
 800eed8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800eedc:	f000 fcd6 	bl	800f88c <__assert_func>
 800eee0:	3101      	adds	r1, #1
 800eee2:	005b      	lsls	r3, r3, #1
 800eee4:	e7ee      	b.n	800eec4 <__lshift+0x1c>
 800eee6:	2300      	movs	r3, #0
 800eee8:	f100 0114 	add.w	r1, r0, #20
 800eeec:	f100 0210 	add.w	r2, r0, #16
 800eef0:	4618      	mov	r0, r3
 800eef2:	4553      	cmp	r3, sl
 800eef4:	db37      	blt.n	800ef66 <__lshift+0xbe>
 800eef6:	6920      	ldr	r0, [r4, #16]
 800eef8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800eefc:	f104 0314 	add.w	r3, r4, #20
 800ef00:	f019 091f 	ands.w	r9, r9, #31
 800ef04:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef08:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ef0c:	d02f      	beq.n	800ef6e <__lshift+0xc6>
 800ef0e:	f1c9 0e20 	rsb	lr, r9, #32
 800ef12:	468a      	mov	sl, r1
 800ef14:	f04f 0c00 	mov.w	ip, #0
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	fa02 f209 	lsl.w	r2, r2, r9
 800ef1e:	ea42 020c 	orr.w	r2, r2, ip
 800ef22:	f84a 2b04 	str.w	r2, [sl], #4
 800ef26:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef2a:	4298      	cmp	r0, r3
 800ef2c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ef30:	d8f2      	bhi.n	800ef18 <__lshift+0x70>
 800ef32:	1b03      	subs	r3, r0, r4
 800ef34:	3b15      	subs	r3, #21
 800ef36:	f023 0303 	bic.w	r3, r3, #3
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	f104 0215 	add.w	r2, r4, #21
 800ef40:	4290      	cmp	r0, r2
 800ef42:	bf38      	it	cc
 800ef44:	2304      	movcc	r3, #4
 800ef46:	f841 c003 	str.w	ip, [r1, r3]
 800ef4a:	f1bc 0f00 	cmp.w	ip, #0
 800ef4e:	d001      	beq.n	800ef54 <__lshift+0xac>
 800ef50:	f108 0602 	add.w	r6, r8, #2
 800ef54:	3e01      	subs	r6, #1
 800ef56:	4638      	mov	r0, r7
 800ef58:	612e      	str	r6, [r5, #16]
 800ef5a:	4621      	mov	r1, r4
 800ef5c:	f7ff fd88 	bl	800ea70 <_Bfree>
 800ef60:	4628      	mov	r0, r5
 800ef62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ef66:	f842 0f04 	str.w	r0, [r2, #4]!
 800ef6a:	3301      	adds	r3, #1
 800ef6c:	e7c1      	b.n	800eef2 <__lshift+0x4a>
 800ef6e:	3904      	subs	r1, #4
 800ef70:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef74:	f841 2f04 	str.w	r2, [r1, #4]!
 800ef78:	4298      	cmp	r0, r3
 800ef7a:	d8f9      	bhi.n	800ef70 <__lshift+0xc8>
 800ef7c:	e7ea      	b.n	800ef54 <__lshift+0xac>
 800ef7e:	bf00      	nop
 800ef80:	080112c0 	.word	0x080112c0
 800ef84:	0801134c 	.word	0x0801134c

0800ef88 <__mcmp>:
 800ef88:	b530      	push	{r4, r5, lr}
 800ef8a:	6902      	ldr	r2, [r0, #16]
 800ef8c:	690c      	ldr	r4, [r1, #16]
 800ef8e:	1b12      	subs	r2, r2, r4
 800ef90:	d10e      	bne.n	800efb0 <__mcmp+0x28>
 800ef92:	f100 0314 	add.w	r3, r0, #20
 800ef96:	3114      	adds	r1, #20
 800ef98:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ef9c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800efa0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800efa4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800efa8:	42a5      	cmp	r5, r4
 800efaa:	d003      	beq.n	800efb4 <__mcmp+0x2c>
 800efac:	d305      	bcc.n	800efba <__mcmp+0x32>
 800efae:	2201      	movs	r2, #1
 800efb0:	4610      	mov	r0, r2
 800efb2:	bd30      	pop	{r4, r5, pc}
 800efb4:	4283      	cmp	r3, r0
 800efb6:	d3f3      	bcc.n	800efa0 <__mcmp+0x18>
 800efb8:	e7fa      	b.n	800efb0 <__mcmp+0x28>
 800efba:	f04f 32ff 	mov.w	r2, #4294967295
 800efbe:	e7f7      	b.n	800efb0 <__mcmp+0x28>

0800efc0 <__mdiff>:
 800efc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efc4:	460c      	mov	r4, r1
 800efc6:	4606      	mov	r6, r0
 800efc8:	4611      	mov	r1, r2
 800efca:	4620      	mov	r0, r4
 800efcc:	4690      	mov	r8, r2
 800efce:	f7ff ffdb 	bl	800ef88 <__mcmp>
 800efd2:	1e05      	subs	r5, r0, #0
 800efd4:	d110      	bne.n	800eff8 <__mdiff+0x38>
 800efd6:	4629      	mov	r1, r5
 800efd8:	4630      	mov	r0, r6
 800efda:	f7ff fd09 	bl	800e9f0 <_Balloc>
 800efde:	b930      	cbnz	r0, 800efee <__mdiff+0x2e>
 800efe0:	4b3a      	ldr	r3, [pc, #232]	; (800f0cc <__mdiff+0x10c>)
 800efe2:	4602      	mov	r2, r0
 800efe4:	f240 2132 	movw	r1, #562	; 0x232
 800efe8:	4839      	ldr	r0, [pc, #228]	; (800f0d0 <__mdiff+0x110>)
 800efea:	f000 fc4f 	bl	800f88c <__assert_func>
 800efee:	2301      	movs	r3, #1
 800eff0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800eff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eff8:	bfa4      	itt	ge
 800effa:	4643      	movge	r3, r8
 800effc:	46a0      	movge	r8, r4
 800effe:	4630      	mov	r0, r6
 800f000:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f004:	bfa6      	itte	ge
 800f006:	461c      	movge	r4, r3
 800f008:	2500      	movge	r5, #0
 800f00a:	2501      	movlt	r5, #1
 800f00c:	f7ff fcf0 	bl	800e9f0 <_Balloc>
 800f010:	b920      	cbnz	r0, 800f01c <__mdiff+0x5c>
 800f012:	4b2e      	ldr	r3, [pc, #184]	; (800f0cc <__mdiff+0x10c>)
 800f014:	4602      	mov	r2, r0
 800f016:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f01a:	e7e5      	b.n	800efe8 <__mdiff+0x28>
 800f01c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f020:	6926      	ldr	r6, [r4, #16]
 800f022:	60c5      	str	r5, [r0, #12]
 800f024:	f104 0914 	add.w	r9, r4, #20
 800f028:	f108 0514 	add.w	r5, r8, #20
 800f02c:	f100 0e14 	add.w	lr, r0, #20
 800f030:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800f034:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800f038:	f108 0210 	add.w	r2, r8, #16
 800f03c:	46f2      	mov	sl, lr
 800f03e:	2100      	movs	r1, #0
 800f040:	f859 3b04 	ldr.w	r3, [r9], #4
 800f044:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f048:	fa1f f883 	uxth.w	r8, r3
 800f04c:	fa11 f18b 	uxtah	r1, r1, fp
 800f050:	0c1b      	lsrs	r3, r3, #16
 800f052:	eba1 0808 	sub.w	r8, r1, r8
 800f056:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f05a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f05e:	fa1f f888 	uxth.w	r8, r8
 800f062:	1419      	asrs	r1, r3, #16
 800f064:	454e      	cmp	r6, r9
 800f066:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f06a:	f84a 3b04 	str.w	r3, [sl], #4
 800f06e:	d8e7      	bhi.n	800f040 <__mdiff+0x80>
 800f070:	1b33      	subs	r3, r6, r4
 800f072:	3b15      	subs	r3, #21
 800f074:	f023 0303 	bic.w	r3, r3, #3
 800f078:	3304      	adds	r3, #4
 800f07a:	3415      	adds	r4, #21
 800f07c:	42a6      	cmp	r6, r4
 800f07e:	bf38      	it	cc
 800f080:	2304      	movcc	r3, #4
 800f082:	441d      	add	r5, r3
 800f084:	4473      	add	r3, lr
 800f086:	469e      	mov	lr, r3
 800f088:	462e      	mov	r6, r5
 800f08a:	4566      	cmp	r6, ip
 800f08c:	d30e      	bcc.n	800f0ac <__mdiff+0xec>
 800f08e:	f10c 0203 	add.w	r2, ip, #3
 800f092:	1b52      	subs	r2, r2, r5
 800f094:	f022 0203 	bic.w	r2, r2, #3
 800f098:	3d03      	subs	r5, #3
 800f09a:	45ac      	cmp	ip, r5
 800f09c:	bf38      	it	cc
 800f09e:	2200      	movcc	r2, #0
 800f0a0:	441a      	add	r2, r3
 800f0a2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f0a6:	b17b      	cbz	r3, 800f0c8 <__mdiff+0x108>
 800f0a8:	6107      	str	r7, [r0, #16]
 800f0aa:	e7a3      	b.n	800eff4 <__mdiff+0x34>
 800f0ac:	f856 8b04 	ldr.w	r8, [r6], #4
 800f0b0:	fa11 f288 	uxtah	r2, r1, r8
 800f0b4:	1414      	asrs	r4, r2, #16
 800f0b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800f0ba:	b292      	uxth	r2, r2
 800f0bc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800f0c0:	f84e 2b04 	str.w	r2, [lr], #4
 800f0c4:	1421      	asrs	r1, r4, #16
 800f0c6:	e7e0      	b.n	800f08a <__mdiff+0xca>
 800f0c8:	3f01      	subs	r7, #1
 800f0ca:	e7ea      	b.n	800f0a2 <__mdiff+0xe2>
 800f0cc:	080112c0 	.word	0x080112c0
 800f0d0:	0801134c 	.word	0x0801134c

0800f0d4 <__ulp>:
 800f0d4:	b082      	sub	sp, #8
 800f0d6:	ed8d 0b00 	vstr	d0, [sp]
 800f0da:	9b01      	ldr	r3, [sp, #4]
 800f0dc:	4912      	ldr	r1, [pc, #72]	; (800f128 <__ulp+0x54>)
 800f0de:	4019      	ands	r1, r3
 800f0e0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f0e4:	2900      	cmp	r1, #0
 800f0e6:	dd05      	ble.n	800f0f4 <__ulp+0x20>
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	460b      	mov	r3, r1
 800f0ec:	ec43 2b10 	vmov	d0, r2, r3
 800f0f0:	b002      	add	sp, #8
 800f0f2:	4770      	bx	lr
 800f0f4:	4249      	negs	r1, r1
 800f0f6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f0fa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f0fe:	f04f 0200 	mov.w	r2, #0
 800f102:	f04f 0300 	mov.w	r3, #0
 800f106:	da04      	bge.n	800f112 <__ulp+0x3e>
 800f108:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f10c:	fa41 f300 	asr.w	r3, r1, r0
 800f110:	e7ec      	b.n	800f0ec <__ulp+0x18>
 800f112:	f1a0 0114 	sub.w	r1, r0, #20
 800f116:	291e      	cmp	r1, #30
 800f118:	bfda      	itte	le
 800f11a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f11e:	fa20 f101 	lsrle.w	r1, r0, r1
 800f122:	2101      	movgt	r1, #1
 800f124:	460a      	mov	r2, r1
 800f126:	e7e1      	b.n	800f0ec <__ulp+0x18>
 800f128:	7ff00000 	.word	0x7ff00000

0800f12c <__b2d>:
 800f12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f12e:	6905      	ldr	r5, [r0, #16]
 800f130:	f100 0714 	add.w	r7, r0, #20
 800f134:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f138:	1f2e      	subs	r6, r5, #4
 800f13a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f13e:	4620      	mov	r0, r4
 800f140:	f7ff fd48 	bl	800ebd4 <__hi0bits>
 800f144:	f1c0 0320 	rsb	r3, r0, #32
 800f148:	280a      	cmp	r0, #10
 800f14a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f1c8 <__b2d+0x9c>
 800f14e:	600b      	str	r3, [r1, #0]
 800f150:	dc14      	bgt.n	800f17c <__b2d+0x50>
 800f152:	f1c0 0e0b 	rsb	lr, r0, #11
 800f156:	fa24 f10e 	lsr.w	r1, r4, lr
 800f15a:	42b7      	cmp	r7, r6
 800f15c:	ea41 030c 	orr.w	r3, r1, ip
 800f160:	bf34      	ite	cc
 800f162:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f166:	2100      	movcs	r1, #0
 800f168:	3015      	adds	r0, #21
 800f16a:	fa04 f000 	lsl.w	r0, r4, r0
 800f16e:	fa21 f10e 	lsr.w	r1, r1, lr
 800f172:	ea40 0201 	orr.w	r2, r0, r1
 800f176:	ec43 2b10 	vmov	d0, r2, r3
 800f17a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f17c:	42b7      	cmp	r7, r6
 800f17e:	bf3a      	itte	cc
 800f180:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f184:	f1a5 0608 	subcc.w	r6, r5, #8
 800f188:	2100      	movcs	r1, #0
 800f18a:	380b      	subs	r0, #11
 800f18c:	d017      	beq.n	800f1be <__b2d+0x92>
 800f18e:	f1c0 0c20 	rsb	ip, r0, #32
 800f192:	fa04 f500 	lsl.w	r5, r4, r0
 800f196:	42be      	cmp	r6, r7
 800f198:	fa21 f40c 	lsr.w	r4, r1, ip
 800f19c:	ea45 0504 	orr.w	r5, r5, r4
 800f1a0:	bf8c      	ite	hi
 800f1a2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f1a6:	2400      	movls	r4, #0
 800f1a8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f1ac:	fa01 f000 	lsl.w	r0, r1, r0
 800f1b0:	fa24 f40c 	lsr.w	r4, r4, ip
 800f1b4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f1b8:	ea40 0204 	orr.w	r2, r0, r4
 800f1bc:	e7db      	b.n	800f176 <__b2d+0x4a>
 800f1be:	ea44 030c 	orr.w	r3, r4, ip
 800f1c2:	460a      	mov	r2, r1
 800f1c4:	e7d7      	b.n	800f176 <__b2d+0x4a>
 800f1c6:	bf00      	nop
 800f1c8:	3ff00000 	.word	0x3ff00000

0800f1cc <__d2b>:
 800f1cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f1d0:	4689      	mov	r9, r1
 800f1d2:	2101      	movs	r1, #1
 800f1d4:	ec57 6b10 	vmov	r6, r7, d0
 800f1d8:	4690      	mov	r8, r2
 800f1da:	f7ff fc09 	bl	800e9f0 <_Balloc>
 800f1de:	4604      	mov	r4, r0
 800f1e0:	b930      	cbnz	r0, 800f1f0 <__d2b+0x24>
 800f1e2:	4602      	mov	r2, r0
 800f1e4:	4b25      	ldr	r3, [pc, #148]	; (800f27c <__d2b+0xb0>)
 800f1e6:	4826      	ldr	r0, [pc, #152]	; (800f280 <__d2b+0xb4>)
 800f1e8:	f240 310a 	movw	r1, #778	; 0x30a
 800f1ec:	f000 fb4e 	bl	800f88c <__assert_func>
 800f1f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f1f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f1f8:	bb35      	cbnz	r5, 800f248 <__d2b+0x7c>
 800f1fa:	2e00      	cmp	r6, #0
 800f1fc:	9301      	str	r3, [sp, #4]
 800f1fe:	d028      	beq.n	800f252 <__d2b+0x86>
 800f200:	4668      	mov	r0, sp
 800f202:	9600      	str	r6, [sp, #0]
 800f204:	f7ff fd06 	bl	800ec14 <__lo0bits>
 800f208:	9900      	ldr	r1, [sp, #0]
 800f20a:	b300      	cbz	r0, 800f24e <__d2b+0x82>
 800f20c:	9a01      	ldr	r2, [sp, #4]
 800f20e:	f1c0 0320 	rsb	r3, r0, #32
 800f212:	fa02 f303 	lsl.w	r3, r2, r3
 800f216:	430b      	orrs	r3, r1
 800f218:	40c2      	lsrs	r2, r0
 800f21a:	6163      	str	r3, [r4, #20]
 800f21c:	9201      	str	r2, [sp, #4]
 800f21e:	9b01      	ldr	r3, [sp, #4]
 800f220:	61a3      	str	r3, [r4, #24]
 800f222:	2b00      	cmp	r3, #0
 800f224:	bf14      	ite	ne
 800f226:	2202      	movne	r2, #2
 800f228:	2201      	moveq	r2, #1
 800f22a:	6122      	str	r2, [r4, #16]
 800f22c:	b1d5      	cbz	r5, 800f264 <__d2b+0x98>
 800f22e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f232:	4405      	add	r5, r0
 800f234:	f8c9 5000 	str.w	r5, [r9]
 800f238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f23c:	f8c8 0000 	str.w	r0, [r8]
 800f240:	4620      	mov	r0, r4
 800f242:	b003      	add	sp, #12
 800f244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f24c:	e7d5      	b.n	800f1fa <__d2b+0x2e>
 800f24e:	6161      	str	r1, [r4, #20]
 800f250:	e7e5      	b.n	800f21e <__d2b+0x52>
 800f252:	a801      	add	r0, sp, #4
 800f254:	f7ff fcde 	bl	800ec14 <__lo0bits>
 800f258:	9b01      	ldr	r3, [sp, #4]
 800f25a:	6163      	str	r3, [r4, #20]
 800f25c:	2201      	movs	r2, #1
 800f25e:	6122      	str	r2, [r4, #16]
 800f260:	3020      	adds	r0, #32
 800f262:	e7e3      	b.n	800f22c <__d2b+0x60>
 800f264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f26c:	f8c9 0000 	str.w	r0, [r9]
 800f270:	6918      	ldr	r0, [r3, #16]
 800f272:	f7ff fcaf 	bl	800ebd4 <__hi0bits>
 800f276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f27a:	e7df      	b.n	800f23c <__d2b+0x70>
 800f27c:	080112c0 	.word	0x080112c0
 800f280:	0801134c 	.word	0x0801134c

0800f284 <__ratio>:
 800f284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f288:	4688      	mov	r8, r1
 800f28a:	4669      	mov	r1, sp
 800f28c:	4681      	mov	r9, r0
 800f28e:	f7ff ff4d 	bl	800f12c <__b2d>
 800f292:	a901      	add	r1, sp, #4
 800f294:	4640      	mov	r0, r8
 800f296:	ec55 4b10 	vmov	r4, r5, d0
 800f29a:	f7ff ff47 	bl	800f12c <__b2d>
 800f29e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f2a2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f2a6:	eba3 0c02 	sub.w	ip, r3, r2
 800f2aa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f2ae:	1a9b      	subs	r3, r3, r2
 800f2b0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f2b4:	ec51 0b10 	vmov	r0, r1, d0
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	bfd6      	itet	le
 800f2bc:	460a      	movle	r2, r1
 800f2be:	462a      	movgt	r2, r5
 800f2c0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f2c4:	468b      	mov	fp, r1
 800f2c6:	462f      	mov	r7, r5
 800f2c8:	bfd4      	ite	le
 800f2ca:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f2ce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f2d2:	4620      	mov	r0, r4
 800f2d4:	ee10 2a10 	vmov	r2, s0
 800f2d8:	465b      	mov	r3, fp
 800f2da:	4639      	mov	r1, r7
 800f2dc:	f7f1 fab6 	bl	800084c <__aeabi_ddiv>
 800f2e0:	ec41 0b10 	vmov	d0, r0, r1
 800f2e4:	b003      	add	sp, #12
 800f2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f2ea <__copybits>:
 800f2ea:	3901      	subs	r1, #1
 800f2ec:	b570      	push	{r4, r5, r6, lr}
 800f2ee:	1149      	asrs	r1, r1, #5
 800f2f0:	6914      	ldr	r4, [r2, #16]
 800f2f2:	3101      	adds	r1, #1
 800f2f4:	f102 0314 	add.w	r3, r2, #20
 800f2f8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f2fc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f300:	1f05      	subs	r5, r0, #4
 800f302:	42a3      	cmp	r3, r4
 800f304:	d30c      	bcc.n	800f320 <__copybits+0x36>
 800f306:	1aa3      	subs	r3, r4, r2
 800f308:	3b11      	subs	r3, #17
 800f30a:	f023 0303 	bic.w	r3, r3, #3
 800f30e:	3211      	adds	r2, #17
 800f310:	42a2      	cmp	r2, r4
 800f312:	bf88      	it	hi
 800f314:	2300      	movhi	r3, #0
 800f316:	4418      	add	r0, r3
 800f318:	2300      	movs	r3, #0
 800f31a:	4288      	cmp	r0, r1
 800f31c:	d305      	bcc.n	800f32a <__copybits+0x40>
 800f31e:	bd70      	pop	{r4, r5, r6, pc}
 800f320:	f853 6b04 	ldr.w	r6, [r3], #4
 800f324:	f845 6f04 	str.w	r6, [r5, #4]!
 800f328:	e7eb      	b.n	800f302 <__copybits+0x18>
 800f32a:	f840 3b04 	str.w	r3, [r0], #4
 800f32e:	e7f4      	b.n	800f31a <__copybits+0x30>

0800f330 <__any_on>:
 800f330:	f100 0214 	add.w	r2, r0, #20
 800f334:	6900      	ldr	r0, [r0, #16]
 800f336:	114b      	asrs	r3, r1, #5
 800f338:	4298      	cmp	r0, r3
 800f33a:	b510      	push	{r4, lr}
 800f33c:	db11      	blt.n	800f362 <__any_on+0x32>
 800f33e:	dd0a      	ble.n	800f356 <__any_on+0x26>
 800f340:	f011 011f 	ands.w	r1, r1, #31
 800f344:	d007      	beq.n	800f356 <__any_on+0x26>
 800f346:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f34a:	fa24 f001 	lsr.w	r0, r4, r1
 800f34e:	fa00 f101 	lsl.w	r1, r0, r1
 800f352:	428c      	cmp	r4, r1
 800f354:	d10b      	bne.n	800f36e <__any_on+0x3e>
 800f356:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f35a:	4293      	cmp	r3, r2
 800f35c:	d803      	bhi.n	800f366 <__any_on+0x36>
 800f35e:	2000      	movs	r0, #0
 800f360:	bd10      	pop	{r4, pc}
 800f362:	4603      	mov	r3, r0
 800f364:	e7f7      	b.n	800f356 <__any_on+0x26>
 800f366:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f36a:	2900      	cmp	r1, #0
 800f36c:	d0f5      	beq.n	800f35a <__any_on+0x2a>
 800f36e:	2001      	movs	r0, #1
 800f370:	e7f6      	b.n	800f360 <__any_on+0x30>

0800f372 <_calloc_r>:
 800f372:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f374:	fba1 2402 	umull	r2, r4, r1, r2
 800f378:	b94c      	cbnz	r4, 800f38e <_calloc_r+0x1c>
 800f37a:	4611      	mov	r1, r2
 800f37c:	9201      	str	r2, [sp, #4]
 800f37e:	f000 f87b 	bl	800f478 <_malloc_r>
 800f382:	9a01      	ldr	r2, [sp, #4]
 800f384:	4605      	mov	r5, r0
 800f386:	b930      	cbnz	r0, 800f396 <_calloc_r+0x24>
 800f388:	4628      	mov	r0, r5
 800f38a:	b003      	add	sp, #12
 800f38c:	bd30      	pop	{r4, r5, pc}
 800f38e:	220c      	movs	r2, #12
 800f390:	6002      	str	r2, [r0, #0]
 800f392:	2500      	movs	r5, #0
 800f394:	e7f8      	b.n	800f388 <_calloc_r+0x16>
 800f396:	4621      	mov	r1, r4
 800f398:	f7fc fbc4 	bl	800bb24 <memset>
 800f39c:	e7f4      	b.n	800f388 <_calloc_r+0x16>
	...

0800f3a0 <_free_r>:
 800f3a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f3a2:	2900      	cmp	r1, #0
 800f3a4:	d044      	beq.n	800f430 <_free_r+0x90>
 800f3a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f3aa:	9001      	str	r0, [sp, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	f1a1 0404 	sub.w	r4, r1, #4
 800f3b2:	bfb8      	it	lt
 800f3b4:	18e4      	addlt	r4, r4, r3
 800f3b6:	f000 fab3 	bl	800f920 <__malloc_lock>
 800f3ba:	4a1e      	ldr	r2, [pc, #120]	; (800f434 <_free_r+0x94>)
 800f3bc:	9801      	ldr	r0, [sp, #4]
 800f3be:	6813      	ldr	r3, [r2, #0]
 800f3c0:	b933      	cbnz	r3, 800f3d0 <_free_r+0x30>
 800f3c2:	6063      	str	r3, [r4, #4]
 800f3c4:	6014      	str	r4, [r2, #0]
 800f3c6:	b003      	add	sp, #12
 800f3c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f3cc:	f000 baae 	b.w	800f92c <__malloc_unlock>
 800f3d0:	42a3      	cmp	r3, r4
 800f3d2:	d908      	bls.n	800f3e6 <_free_r+0x46>
 800f3d4:	6825      	ldr	r5, [r4, #0]
 800f3d6:	1961      	adds	r1, r4, r5
 800f3d8:	428b      	cmp	r3, r1
 800f3da:	bf01      	itttt	eq
 800f3dc:	6819      	ldreq	r1, [r3, #0]
 800f3de:	685b      	ldreq	r3, [r3, #4]
 800f3e0:	1949      	addeq	r1, r1, r5
 800f3e2:	6021      	streq	r1, [r4, #0]
 800f3e4:	e7ed      	b.n	800f3c2 <_free_r+0x22>
 800f3e6:	461a      	mov	r2, r3
 800f3e8:	685b      	ldr	r3, [r3, #4]
 800f3ea:	b10b      	cbz	r3, 800f3f0 <_free_r+0x50>
 800f3ec:	42a3      	cmp	r3, r4
 800f3ee:	d9fa      	bls.n	800f3e6 <_free_r+0x46>
 800f3f0:	6811      	ldr	r1, [r2, #0]
 800f3f2:	1855      	adds	r5, r2, r1
 800f3f4:	42a5      	cmp	r5, r4
 800f3f6:	d10b      	bne.n	800f410 <_free_r+0x70>
 800f3f8:	6824      	ldr	r4, [r4, #0]
 800f3fa:	4421      	add	r1, r4
 800f3fc:	1854      	adds	r4, r2, r1
 800f3fe:	42a3      	cmp	r3, r4
 800f400:	6011      	str	r1, [r2, #0]
 800f402:	d1e0      	bne.n	800f3c6 <_free_r+0x26>
 800f404:	681c      	ldr	r4, [r3, #0]
 800f406:	685b      	ldr	r3, [r3, #4]
 800f408:	6053      	str	r3, [r2, #4]
 800f40a:	4421      	add	r1, r4
 800f40c:	6011      	str	r1, [r2, #0]
 800f40e:	e7da      	b.n	800f3c6 <_free_r+0x26>
 800f410:	d902      	bls.n	800f418 <_free_r+0x78>
 800f412:	230c      	movs	r3, #12
 800f414:	6003      	str	r3, [r0, #0]
 800f416:	e7d6      	b.n	800f3c6 <_free_r+0x26>
 800f418:	6825      	ldr	r5, [r4, #0]
 800f41a:	1961      	adds	r1, r4, r5
 800f41c:	428b      	cmp	r3, r1
 800f41e:	bf04      	itt	eq
 800f420:	6819      	ldreq	r1, [r3, #0]
 800f422:	685b      	ldreq	r3, [r3, #4]
 800f424:	6063      	str	r3, [r4, #4]
 800f426:	bf04      	itt	eq
 800f428:	1949      	addeq	r1, r1, r5
 800f42a:	6021      	streq	r1, [r4, #0]
 800f42c:	6054      	str	r4, [r2, #4]
 800f42e:	e7ca      	b.n	800f3c6 <_free_r+0x26>
 800f430:	b003      	add	sp, #12
 800f432:	bd30      	pop	{r4, r5, pc}
 800f434:	20006368 	.word	0x20006368

0800f438 <sbrk_aligned>:
 800f438:	b570      	push	{r4, r5, r6, lr}
 800f43a:	4e0e      	ldr	r6, [pc, #56]	; (800f474 <sbrk_aligned+0x3c>)
 800f43c:	460c      	mov	r4, r1
 800f43e:	6831      	ldr	r1, [r6, #0]
 800f440:	4605      	mov	r5, r0
 800f442:	b911      	cbnz	r1, 800f44a <sbrk_aligned+0x12>
 800f444:	f000 f9f0 	bl	800f828 <_sbrk_r>
 800f448:	6030      	str	r0, [r6, #0]
 800f44a:	4621      	mov	r1, r4
 800f44c:	4628      	mov	r0, r5
 800f44e:	f000 f9eb 	bl	800f828 <_sbrk_r>
 800f452:	1c43      	adds	r3, r0, #1
 800f454:	d00a      	beq.n	800f46c <sbrk_aligned+0x34>
 800f456:	1cc4      	adds	r4, r0, #3
 800f458:	f024 0403 	bic.w	r4, r4, #3
 800f45c:	42a0      	cmp	r0, r4
 800f45e:	d007      	beq.n	800f470 <sbrk_aligned+0x38>
 800f460:	1a21      	subs	r1, r4, r0
 800f462:	4628      	mov	r0, r5
 800f464:	f000 f9e0 	bl	800f828 <_sbrk_r>
 800f468:	3001      	adds	r0, #1
 800f46a:	d101      	bne.n	800f470 <sbrk_aligned+0x38>
 800f46c:	f04f 34ff 	mov.w	r4, #4294967295
 800f470:	4620      	mov	r0, r4
 800f472:	bd70      	pop	{r4, r5, r6, pc}
 800f474:	2000636c 	.word	0x2000636c

0800f478 <_malloc_r>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	1ccd      	adds	r5, r1, #3
 800f47e:	f025 0503 	bic.w	r5, r5, #3
 800f482:	3508      	adds	r5, #8
 800f484:	2d0c      	cmp	r5, #12
 800f486:	bf38      	it	cc
 800f488:	250c      	movcc	r5, #12
 800f48a:	2d00      	cmp	r5, #0
 800f48c:	4607      	mov	r7, r0
 800f48e:	db01      	blt.n	800f494 <_malloc_r+0x1c>
 800f490:	42a9      	cmp	r1, r5
 800f492:	d905      	bls.n	800f4a0 <_malloc_r+0x28>
 800f494:	230c      	movs	r3, #12
 800f496:	603b      	str	r3, [r7, #0]
 800f498:	2600      	movs	r6, #0
 800f49a:	4630      	mov	r0, r6
 800f49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f4a0:	4e2e      	ldr	r6, [pc, #184]	; (800f55c <_malloc_r+0xe4>)
 800f4a2:	f000 fa3d 	bl	800f920 <__malloc_lock>
 800f4a6:	6833      	ldr	r3, [r6, #0]
 800f4a8:	461c      	mov	r4, r3
 800f4aa:	bb34      	cbnz	r4, 800f4fa <_malloc_r+0x82>
 800f4ac:	4629      	mov	r1, r5
 800f4ae:	4638      	mov	r0, r7
 800f4b0:	f7ff ffc2 	bl	800f438 <sbrk_aligned>
 800f4b4:	1c43      	adds	r3, r0, #1
 800f4b6:	4604      	mov	r4, r0
 800f4b8:	d14d      	bne.n	800f556 <_malloc_r+0xde>
 800f4ba:	6834      	ldr	r4, [r6, #0]
 800f4bc:	4626      	mov	r6, r4
 800f4be:	2e00      	cmp	r6, #0
 800f4c0:	d140      	bne.n	800f544 <_malloc_r+0xcc>
 800f4c2:	6823      	ldr	r3, [r4, #0]
 800f4c4:	4631      	mov	r1, r6
 800f4c6:	4638      	mov	r0, r7
 800f4c8:	eb04 0803 	add.w	r8, r4, r3
 800f4cc:	f000 f9ac 	bl	800f828 <_sbrk_r>
 800f4d0:	4580      	cmp	r8, r0
 800f4d2:	d13a      	bne.n	800f54a <_malloc_r+0xd2>
 800f4d4:	6821      	ldr	r1, [r4, #0]
 800f4d6:	3503      	adds	r5, #3
 800f4d8:	1a6d      	subs	r5, r5, r1
 800f4da:	f025 0503 	bic.w	r5, r5, #3
 800f4de:	3508      	adds	r5, #8
 800f4e0:	2d0c      	cmp	r5, #12
 800f4e2:	bf38      	it	cc
 800f4e4:	250c      	movcc	r5, #12
 800f4e6:	4629      	mov	r1, r5
 800f4e8:	4638      	mov	r0, r7
 800f4ea:	f7ff ffa5 	bl	800f438 <sbrk_aligned>
 800f4ee:	3001      	adds	r0, #1
 800f4f0:	d02b      	beq.n	800f54a <_malloc_r+0xd2>
 800f4f2:	6823      	ldr	r3, [r4, #0]
 800f4f4:	442b      	add	r3, r5
 800f4f6:	6023      	str	r3, [r4, #0]
 800f4f8:	e00e      	b.n	800f518 <_malloc_r+0xa0>
 800f4fa:	6822      	ldr	r2, [r4, #0]
 800f4fc:	1b52      	subs	r2, r2, r5
 800f4fe:	d41e      	bmi.n	800f53e <_malloc_r+0xc6>
 800f500:	2a0b      	cmp	r2, #11
 800f502:	d916      	bls.n	800f532 <_malloc_r+0xba>
 800f504:	1961      	adds	r1, r4, r5
 800f506:	42a3      	cmp	r3, r4
 800f508:	6025      	str	r5, [r4, #0]
 800f50a:	bf18      	it	ne
 800f50c:	6059      	strne	r1, [r3, #4]
 800f50e:	6863      	ldr	r3, [r4, #4]
 800f510:	bf08      	it	eq
 800f512:	6031      	streq	r1, [r6, #0]
 800f514:	5162      	str	r2, [r4, r5]
 800f516:	604b      	str	r3, [r1, #4]
 800f518:	4638      	mov	r0, r7
 800f51a:	f104 060b 	add.w	r6, r4, #11
 800f51e:	f000 fa05 	bl	800f92c <__malloc_unlock>
 800f522:	f026 0607 	bic.w	r6, r6, #7
 800f526:	1d23      	adds	r3, r4, #4
 800f528:	1af2      	subs	r2, r6, r3
 800f52a:	d0b6      	beq.n	800f49a <_malloc_r+0x22>
 800f52c:	1b9b      	subs	r3, r3, r6
 800f52e:	50a3      	str	r3, [r4, r2]
 800f530:	e7b3      	b.n	800f49a <_malloc_r+0x22>
 800f532:	6862      	ldr	r2, [r4, #4]
 800f534:	42a3      	cmp	r3, r4
 800f536:	bf0c      	ite	eq
 800f538:	6032      	streq	r2, [r6, #0]
 800f53a:	605a      	strne	r2, [r3, #4]
 800f53c:	e7ec      	b.n	800f518 <_malloc_r+0xa0>
 800f53e:	4623      	mov	r3, r4
 800f540:	6864      	ldr	r4, [r4, #4]
 800f542:	e7b2      	b.n	800f4aa <_malloc_r+0x32>
 800f544:	4634      	mov	r4, r6
 800f546:	6876      	ldr	r6, [r6, #4]
 800f548:	e7b9      	b.n	800f4be <_malloc_r+0x46>
 800f54a:	230c      	movs	r3, #12
 800f54c:	603b      	str	r3, [r7, #0]
 800f54e:	4638      	mov	r0, r7
 800f550:	f000 f9ec 	bl	800f92c <__malloc_unlock>
 800f554:	e7a1      	b.n	800f49a <_malloc_r+0x22>
 800f556:	6025      	str	r5, [r4, #0]
 800f558:	e7de      	b.n	800f518 <_malloc_r+0xa0>
 800f55a:	bf00      	nop
 800f55c:	20006368 	.word	0x20006368

0800f560 <__ssputs_r>:
 800f560:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f564:	688e      	ldr	r6, [r1, #8]
 800f566:	429e      	cmp	r6, r3
 800f568:	4682      	mov	sl, r0
 800f56a:	460c      	mov	r4, r1
 800f56c:	4690      	mov	r8, r2
 800f56e:	461f      	mov	r7, r3
 800f570:	d838      	bhi.n	800f5e4 <__ssputs_r+0x84>
 800f572:	898a      	ldrh	r2, [r1, #12]
 800f574:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f578:	d032      	beq.n	800f5e0 <__ssputs_r+0x80>
 800f57a:	6825      	ldr	r5, [r4, #0]
 800f57c:	6909      	ldr	r1, [r1, #16]
 800f57e:	eba5 0901 	sub.w	r9, r5, r1
 800f582:	6965      	ldr	r5, [r4, #20]
 800f584:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f588:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f58c:	3301      	adds	r3, #1
 800f58e:	444b      	add	r3, r9
 800f590:	106d      	asrs	r5, r5, #1
 800f592:	429d      	cmp	r5, r3
 800f594:	bf38      	it	cc
 800f596:	461d      	movcc	r5, r3
 800f598:	0553      	lsls	r3, r2, #21
 800f59a:	d531      	bpl.n	800f600 <__ssputs_r+0xa0>
 800f59c:	4629      	mov	r1, r5
 800f59e:	f7ff ff6b 	bl	800f478 <_malloc_r>
 800f5a2:	4606      	mov	r6, r0
 800f5a4:	b950      	cbnz	r0, 800f5bc <__ssputs_r+0x5c>
 800f5a6:	230c      	movs	r3, #12
 800f5a8:	f8ca 3000 	str.w	r3, [sl]
 800f5ac:	89a3      	ldrh	r3, [r4, #12]
 800f5ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5b2:	81a3      	strh	r3, [r4, #12]
 800f5b4:	f04f 30ff 	mov.w	r0, #4294967295
 800f5b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f5bc:	6921      	ldr	r1, [r4, #16]
 800f5be:	464a      	mov	r2, r9
 800f5c0:	f7fc faa2 	bl	800bb08 <memcpy>
 800f5c4:	89a3      	ldrh	r3, [r4, #12]
 800f5c6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f5ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f5ce:	81a3      	strh	r3, [r4, #12]
 800f5d0:	6126      	str	r6, [r4, #16]
 800f5d2:	6165      	str	r5, [r4, #20]
 800f5d4:	444e      	add	r6, r9
 800f5d6:	eba5 0509 	sub.w	r5, r5, r9
 800f5da:	6026      	str	r6, [r4, #0]
 800f5dc:	60a5      	str	r5, [r4, #8]
 800f5de:	463e      	mov	r6, r7
 800f5e0:	42be      	cmp	r6, r7
 800f5e2:	d900      	bls.n	800f5e6 <__ssputs_r+0x86>
 800f5e4:	463e      	mov	r6, r7
 800f5e6:	6820      	ldr	r0, [r4, #0]
 800f5e8:	4632      	mov	r2, r6
 800f5ea:	4641      	mov	r1, r8
 800f5ec:	f000 f97e 	bl	800f8ec <memmove>
 800f5f0:	68a3      	ldr	r3, [r4, #8]
 800f5f2:	1b9b      	subs	r3, r3, r6
 800f5f4:	60a3      	str	r3, [r4, #8]
 800f5f6:	6823      	ldr	r3, [r4, #0]
 800f5f8:	4433      	add	r3, r6
 800f5fa:	6023      	str	r3, [r4, #0]
 800f5fc:	2000      	movs	r0, #0
 800f5fe:	e7db      	b.n	800f5b8 <__ssputs_r+0x58>
 800f600:	462a      	mov	r2, r5
 800f602:	f000 f999 	bl	800f938 <_realloc_r>
 800f606:	4606      	mov	r6, r0
 800f608:	2800      	cmp	r0, #0
 800f60a:	d1e1      	bne.n	800f5d0 <__ssputs_r+0x70>
 800f60c:	6921      	ldr	r1, [r4, #16]
 800f60e:	4650      	mov	r0, sl
 800f610:	f7ff fec6 	bl	800f3a0 <_free_r>
 800f614:	e7c7      	b.n	800f5a6 <__ssputs_r+0x46>
	...

0800f618 <_svfiprintf_r>:
 800f618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f61c:	4698      	mov	r8, r3
 800f61e:	898b      	ldrh	r3, [r1, #12]
 800f620:	061b      	lsls	r3, r3, #24
 800f622:	b09d      	sub	sp, #116	; 0x74
 800f624:	4607      	mov	r7, r0
 800f626:	460d      	mov	r5, r1
 800f628:	4614      	mov	r4, r2
 800f62a:	d50e      	bpl.n	800f64a <_svfiprintf_r+0x32>
 800f62c:	690b      	ldr	r3, [r1, #16]
 800f62e:	b963      	cbnz	r3, 800f64a <_svfiprintf_r+0x32>
 800f630:	2140      	movs	r1, #64	; 0x40
 800f632:	f7ff ff21 	bl	800f478 <_malloc_r>
 800f636:	6028      	str	r0, [r5, #0]
 800f638:	6128      	str	r0, [r5, #16]
 800f63a:	b920      	cbnz	r0, 800f646 <_svfiprintf_r+0x2e>
 800f63c:	230c      	movs	r3, #12
 800f63e:	603b      	str	r3, [r7, #0]
 800f640:	f04f 30ff 	mov.w	r0, #4294967295
 800f644:	e0d1      	b.n	800f7ea <_svfiprintf_r+0x1d2>
 800f646:	2340      	movs	r3, #64	; 0x40
 800f648:	616b      	str	r3, [r5, #20]
 800f64a:	2300      	movs	r3, #0
 800f64c:	9309      	str	r3, [sp, #36]	; 0x24
 800f64e:	2320      	movs	r3, #32
 800f650:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f654:	f8cd 800c 	str.w	r8, [sp, #12]
 800f658:	2330      	movs	r3, #48	; 0x30
 800f65a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f804 <_svfiprintf_r+0x1ec>
 800f65e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f662:	f04f 0901 	mov.w	r9, #1
 800f666:	4623      	mov	r3, r4
 800f668:	469a      	mov	sl, r3
 800f66a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f66e:	b10a      	cbz	r2, 800f674 <_svfiprintf_r+0x5c>
 800f670:	2a25      	cmp	r2, #37	; 0x25
 800f672:	d1f9      	bne.n	800f668 <_svfiprintf_r+0x50>
 800f674:	ebba 0b04 	subs.w	fp, sl, r4
 800f678:	d00b      	beq.n	800f692 <_svfiprintf_r+0x7a>
 800f67a:	465b      	mov	r3, fp
 800f67c:	4622      	mov	r2, r4
 800f67e:	4629      	mov	r1, r5
 800f680:	4638      	mov	r0, r7
 800f682:	f7ff ff6d 	bl	800f560 <__ssputs_r>
 800f686:	3001      	adds	r0, #1
 800f688:	f000 80aa 	beq.w	800f7e0 <_svfiprintf_r+0x1c8>
 800f68c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f68e:	445a      	add	r2, fp
 800f690:	9209      	str	r2, [sp, #36]	; 0x24
 800f692:	f89a 3000 	ldrb.w	r3, [sl]
 800f696:	2b00      	cmp	r3, #0
 800f698:	f000 80a2 	beq.w	800f7e0 <_svfiprintf_r+0x1c8>
 800f69c:	2300      	movs	r3, #0
 800f69e:	f04f 32ff 	mov.w	r2, #4294967295
 800f6a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f6a6:	f10a 0a01 	add.w	sl, sl, #1
 800f6aa:	9304      	str	r3, [sp, #16]
 800f6ac:	9307      	str	r3, [sp, #28]
 800f6ae:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f6b2:	931a      	str	r3, [sp, #104]	; 0x68
 800f6b4:	4654      	mov	r4, sl
 800f6b6:	2205      	movs	r2, #5
 800f6b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6bc:	4851      	ldr	r0, [pc, #324]	; (800f804 <_svfiprintf_r+0x1ec>)
 800f6be:	f7f0 fd8f 	bl	80001e0 <memchr>
 800f6c2:	9a04      	ldr	r2, [sp, #16]
 800f6c4:	b9d8      	cbnz	r0, 800f6fe <_svfiprintf_r+0xe6>
 800f6c6:	06d0      	lsls	r0, r2, #27
 800f6c8:	bf44      	itt	mi
 800f6ca:	2320      	movmi	r3, #32
 800f6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6d0:	0711      	lsls	r1, r2, #28
 800f6d2:	bf44      	itt	mi
 800f6d4:	232b      	movmi	r3, #43	; 0x2b
 800f6d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f6da:	f89a 3000 	ldrb.w	r3, [sl]
 800f6de:	2b2a      	cmp	r3, #42	; 0x2a
 800f6e0:	d015      	beq.n	800f70e <_svfiprintf_r+0xf6>
 800f6e2:	9a07      	ldr	r2, [sp, #28]
 800f6e4:	4654      	mov	r4, sl
 800f6e6:	2000      	movs	r0, #0
 800f6e8:	f04f 0c0a 	mov.w	ip, #10
 800f6ec:	4621      	mov	r1, r4
 800f6ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f6f2:	3b30      	subs	r3, #48	; 0x30
 800f6f4:	2b09      	cmp	r3, #9
 800f6f6:	d94e      	bls.n	800f796 <_svfiprintf_r+0x17e>
 800f6f8:	b1b0      	cbz	r0, 800f728 <_svfiprintf_r+0x110>
 800f6fa:	9207      	str	r2, [sp, #28]
 800f6fc:	e014      	b.n	800f728 <_svfiprintf_r+0x110>
 800f6fe:	eba0 0308 	sub.w	r3, r0, r8
 800f702:	fa09 f303 	lsl.w	r3, r9, r3
 800f706:	4313      	orrs	r3, r2
 800f708:	9304      	str	r3, [sp, #16]
 800f70a:	46a2      	mov	sl, r4
 800f70c:	e7d2      	b.n	800f6b4 <_svfiprintf_r+0x9c>
 800f70e:	9b03      	ldr	r3, [sp, #12]
 800f710:	1d19      	adds	r1, r3, #4
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	9103      	str	r1, [sp, #12]
 800f716:	2b00      	cmp	r3, #0
 800f718:	bfbb      	ittet	lt
 800f71a:	425b      	neglt	r3, r3
 800f71c:	f042 0202 	orrlt.w	r2, r2, #2
 800f720:	9307      	strge	r3, [sp, #28]
 800f722:	9307      	strlt	r3, [sp, #28]
 800f724:	bfb8      	it	lt
 800f726:	9204      	strlt	r2, [sp, #16]
 800f728:	7823      	ldrb	r3, [r4, #0]
 800f72a:	2b2e      	cmp	r3, #46	; 0x2e
 800f72c:	d10c      	bne.n	800f748 <_svfiprintf_r+0x130>
 800f72e:	7863      	ldrb	r3, [r4, #1]
 800f730:	2b2a      	cmp	r3, #42	; 0x2a
 800f732:	d135      	bne.n	800f7a0 <_svfiprintf_r+0x188>
 800f734:	9b03      	ldr	r3, [sp, #12]
 800f736:	1d1a      	adds	r2, r3, #4
 800f738:	681b      	ldr	r3, [r3, #0]
 800f73a:	9203      	str	r2, [sp, #12]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	bfb8      	it	lt
 800f740:	f04f 33ff 	movlt.w	r3, #4294967295
 800f744:	3402      	adds	r4, #2
 800f746:	9305      	str	r3, [sp, #20]
 800f748:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f814 <_svfiprintf_r+0x1fc>
 800f74c:	7821      	ldrb	r1, [r4, #0]
 800f74e:	2203      	movs	r2, #3
 800f750:	4650      	mov	r0, sl
 800f752:	f7f0 fd45 	bl	80001e0 <memchr>
 800f756:	b140      	cbz	r0, 800f76a <_svfiprintf_r+0x152>
 800f758:	2340      	movs	r3, #64	; 0x40
 800f75a:	eba0 000a 	sub.w	r0, r0, sl
 800f75e:	fa03 f000 	lsl.w	r0, r3, r0
 800f762:	9b04      	ldr	r3, [sp, #16]
 800f764:	4303      	orrs	r3, r0
 800f766:	3401      	adds	r4, #1
 800f768:	9304      	str	r3, [sp, #16]
 800f76a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f76e:	4826      	ldr	r0, [pc, #152]	; (800f808 <_svfiprintf_r+0x1f0>)
 800f770:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f774:	2206      	movs	r2, #6
 800f776:	f7f0 fd33 	bl	80001e0 <memchr>
 800f77a:	2800      	cmp	r0, #0
 800f77c:	d038      	beq.n	800f7f0 <_svfiprintf_r+0x1d8>
 800f77e:	4b23      	ldr	r3, [pc, #140]	; (800f80c <_svfiprintf_r+0x1f4>)
 800f780:	bb1b      	cbnz	r3, 800f7ca <_svfiprintf_r+0x1b2>
 800f782:	9b03      	ldr	r3, [sp, #12]
 800f784:	3307      	adds	r3, #7
 800f786:	f023 0307 	bic.w	r3, r3, #7
 800f78a:	3308      	adds	r3, #8
 800f78c:	9303      	str	r3, [sp, #12]
 800f78e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f790:	4433      	add	r3, r6
 800f792:	9309      	str	r3, [sp, #36]	; 0x24
 800f794:	e767      	b.n	800f666 <_svfiprintf_r+0x4e>
 800f796:	fb0c 3202 	mla	r2, ip, r2, r3
 800f79a:	460c      	mov	r4, r1
 800f79c:	2001      	movs	r0, #1
 800f79e:	e7a5      	b.n	800f6ec <_svfiprintf_r+0xd4>
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	3401      	adds	r4, #1
 800f7a4:	9305      	str	r3, [sp, #20]
 800f7a6:	4619      	mov	r1, r3
 800f7a8:	f04f 0c0a 	mov.w	ip, #10
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f7b2:	3a30      	subs	r2, #48	; 0x30
 800f7b4:	2a09      	cmp	r2, #9
 800f7b6:	d903      	bls.n	800f7c0 <_svfiprintf_r+0x1a8>
 800f7b8:	2b00      	cmp	r3, #0
 800f7ba:	d0c5      	beq.n	800f748 <_svfiprintf_r+0x130>
 800f7bc:	9105      	str	r1, [sp, #20]
 800f7be:	e7c3      	b.n	800f748 <_svfiprintf_r+0x130>
 800f7c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f7c4:	4604      	mov	r4, r0
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	e7f0      	b.n	800f7ac <_svfiprintf_r+0x194>
 800f7ca:	ab03      	add	r3, sp, #12
 800f7cc:	9300      	str	r3, [sp, #0]
 800f7ce:	462a      	mov	r2, r5
 800f7d0:	4b0f      	ldr	r3, [pc, #60]	; (800f810 <_svfiprintf_r+0x1f8>)
 800f7d2:	a904      	add	r1, sp, #16
 800f7d4:	4638      	mov	r0, r7
 800f7d6:	f7fc fa4d 	bl	800bc74 <_printf_float>
 800f7da:	1c42      	adds	r2, r0, #1
 800f7dc:	4606      	mov	r6, r0
 800f7de:	d1d6      	bne.n	800f78e <_svfiprintf_r+0x176>
 800f7e0:	89ab      	ldrh	r3, [r5, #12]
 800f7e2:	065b      	lsls	r3, r3, #25
 800f7e4:	f53f af2c 	bmi.w	800f640 <_svfiprintf_r+0x28>
 800f7e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f7ea:	b01d      	add	sp, #116	; 0x74
 800f7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7f0:	ab03      	add	r3, sp, #12
 800f7f2:	9300      	str	r3, [sp, #0]
 800f7f4:	462a      	mov	r2, r5
 800f7f6:	4b06      	ldr	r3, [pc, #24]	; (800f810 <_svfiprintf_r+0x1f8>)
 800f7f8:	a904      	add	r1, sp, #16
 800f7fa:	4638      	mov	r0, r7
 800f7fc:	f7fc fcde 	bl	800c1bc <_printf_i>
 800f800:	e7eb      	b.n	800f7da <_svfiprintf_r+0x1c2>
 800f802:	bf00      	nop
 800f804:	080114a4 	.word	0x080114a4
 800f808:	080114ae 	.word	0x080114ae
 800f80c:	0800bc75 	.word	0x0800bc75
 800f810:	0800f561 	.word	0x0800f561
 800f814:	080114aa 	.word	0x080114aa

0800f818 <nan>:
 800f818:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f820 <nan+0x8>
 800f81c:	4770      	bx	lr
 800f81e:	bf00      	nop
 800f820:	00000000 	.word	0x00000000
 800f824:	7ff80000 	.word	0x7ff80000

0800f828 <_sbrk_r>:
 800f828:	b538      	push	{r3, r4, r5, lr}
 800f82a:	4d06      	ldr	r5, [pc, #24]	; (800f844 <_sbrk_r+0x1c>)
 800f82c:	2300      	movs	r3, #0
 800f82e:	4604      	mov	r4, r0
 800f830:	4608      	mov	r0, r1
 800f832:	602b      	str	r3, [r5, #0]
 800f834:	f7f3 fb82 	bl	8002f3c <_sbrk>
 800f838:	1c43      	adds	r3, r0, #1
 800f83a:	d102      	bne.n	800f842 <_sbrk_r+0x1a>
 800f83c:	682b      	ldr	r3, [r5, #0]
 800f83e:	b103      	cbz	r3, 800f842 <_sbrk_r+0x1a>
 800f840:	6023      	str	r3, [r4, #0]
 800f842:	bd38      	pop	{r3, r4, r5, pc}
 800f844:	20006370 	.word	0x20006370

0800f848 <strncmp>:
 800f848:	b510      	push	{r4, lr}
 800f84a:	b17a      	cbz	r2, 800f86c <strncmp+0x24>
 800f84c:	4603      	mov	r3, r0
 800f84e:	3901      	subs	r1, #1
 800f850:	1884      	adds	r4, r0, r2
 800f852:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f856:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f85a:	4290      	cmp	r0, r2
 800f85c:	d101      	bne.n	800f862 <strncmp+0x1a>
 800f85e:	42a3      	cmp	r3, r4
 800f860:	d101      	bne.n	800f866 <strncmp+0x1e>
 800f862:	1a80      	subs	r0, r0, r2
 800f864:	bd10      	pop	{r4, pc}
 800f866:	2800      	cmp	r0, #0
 800f868:	d1f3      	bne.n	800f852 <strncmp+0xa>
 800f86a:	e7fa      	b.n	800f862 <strncmp+0x1a>
 800f86c:	4610      	mov	r0, r2
 800f86e:	e7f9      	b.n	800f864 <strncmp+0x1c>

0800f870 <__ascii_wctomb>:
 800f870:	b149      	cbz	r1, 800f886 <__ascii_wctomb+0x16>
 800f872:	2aff      	cmp	r2, #255	; 0xff
 800f874:	bf85      	ittet	hi
 800f876:	238a      	movhi	r3, #138	; 0x8a
 800f878:	6003      	strhi	r3, [r0, #0]
 800f87a:	700a      	strbls	r2, [r1, #0]
 800f87c:	f04f 30ff 	movhi.w	r0, #4294967295
 800f880:	bf98      	it	ls
 800f882:	2001      	movls	r0, #1
 800f884:	4770      	bx	lr
 800f886:	4608      	mov	r0, r1
 800f888:	4770      	bx	lr
	...

0800f88c <__assert_func>:
 800f88c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f88e:	4614      	mov	r4, r2
 800f890:	461a      	mov	r2, r3
 800f892:	4b09      	ldr	r3, [pc, #36]	; (800f8b8 <__assert_func+0x2c>)
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	4605      	mov	r5, r0
 800f898:	68d8      	ldr	r0, [r3, #12]
 800f89a:	b14c      	cbz	r4, 800f8b0 <__assert_func+0x24>
 800f89c:	4b07      	ldr	r3, [pc, #28]	; (800f8bc <__assert_func+0x30>)
 800f89e:	9100      	str	r1, [sp, #0]
 800f8a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8a4:	4906      	ldr	r1, [pc, #24]	; (800f8c0 <__assert_func+0x34>)
 800f8a6:	462b      	mov	r3, r5
 800f8a8:	f000 f80e 	bl	800f8c8 <fiprintf>
 800f8ac:	f000 fa8c 	bl	800fdc8 <abort>
 800f8b0:	4b04      	ldr	r3, [pc, #16]	; (800f8c4 <__assert_func+0x38>)
 800f8b2:	461c      	mov	r4, r3
 800f8b4:	e7f3      	b.n	800f89e <__assert_func+0x12>
 800f8b6:	bf00      	nop
 800f8b8:	20000010 	.word	0x20000010
 800f8bc:	080114b5 	.word	0x080114b5
 800f8c0:	080114c2 	.word	0x080114c2
 800f8c4:	080114f0 	.word	0x080114f0

0800f8c8 <fiprintf>:
 800f8c8:	b40e      	push	{r1, r2, r3}
 800f8ca:	b503      	push	{r0, r1, lr}
 800f8cc:	4601      	mov	r1, r0
 800f8ce:	ab03      	add	r3, sp, #12
 800f8d0:	4805      	ldr	r0, [pc, #20]	; (800f8e8 <fiprintf+0x20>)
 800f8d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8d6:	6800      	ldr	r0, [r0, #0]
 800f8d8:	9301      	str	r3, [sp, #4]
 800f8da:	f000 f885 	bl	800f9e8 <_vfiprintf_r>
 800f8de:	b002      	add	sp, #8
 800f8e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8e4:	b003      	add	sp, #12
 800f8e6:	4770      	bx	lr
 800f8e8:	20000010 	.word	0x20000010

0800f8ec <memmove>:
 800f8ec:	4288      	cmp	r0, r1
 800f8ee:	b510      	push	{r4, lr}
 800f8f0:	eb01 0402 	add.w	r4, r1, r2
 800f8f4:	d902      	bls.n	800f8fc <memmove+0x10>
 800f8f6:	4284      	cmp	r4, r0
 800f8f8:	4623      	mov	r3, r4
 800f8fa:	d807      	bhi.n	800f90c <memmove+0x20>
 800f8fc:	1e43      	subs	r3, r0, #1
 800f8fe:	42a1      	cmp	r1, r4
 800f900:	d008      	beq.n	800f914 <memmove+0x28>
 800f902:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f906:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f90a:	e7f8      	b.n	800f8fe <memmove+0x12>
 800f90c:	4402      	add	r2, r0
 800f90e:	4601      	mov	r1, r0
 800f910:	428a      	cmp	r2, r1
 800f912:	d100      	bne.n	800f916 <memmove+0x2a>
 800f914:	bd10      	pop	{r4, pc}
 800f916:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f91a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f91e:	e7f7      	b.n	800f910 <memmove+0x24>

0800f920 <__malloc_lock>:
 800f920:	4801      	ldr	r0, [pc, #4]	; (800f928 <__malloc_lock+0x8>)
 800f922:	f000 bc11 	b.w	8010148 <__retarget_lock_acquire_recursive>
 800f926:	bf00      	nop
 800f928:	20006374 	.word	0x20006374

0800f92c <__malloc_unlock>:
 800f92c:	4801      	ldr	r0, [pc, #4]	; (800f934 <__malloc_unlock+0x8>)
 800f92e:	f000 bc0c 	b.w	801014a <__retarget_lock_release_recursive>
 800f932:	bf00      	nop
 800f934:	20006374 	.word	0x20006374

0800f938 <_realloc_r>:
 800f938:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f93c:	4680      	mov	r8, r0
 800f93e:	4614      	mov	r4, r2
 800f940:	460e      	mov	r6, r1
 800f942:	b921      	cbnz	r1, 800f94e <_realloc_r+0x16>
 800f944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f948:	4611      	mov	r1, r2
 800f94a:	f7ff bd95 	b.w	800f478 <_malloc_r>
 800f94e:	b92a      	cbnz	r2, 800f95c <_realloc_r+0x24>
 800f950:	f7ff fd26 	bl	800f3a0 <_free_r>
 800f954:	4625      	mov	r5, r4
 800f956:	4628      	mov	r0, r5
 800f958:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95c:	f000 fc5c 	bl	8010218 <_malloc_usable_size_r>
 800f960:	4284      	cmp	r4, r0
 800f962:	4607      	mov	r7, r0
 800f964:	d802      	bhi.n	800f96c <_realloc_r+0x34>
 800f966:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f96a:	d812      	bhi.n	800f992 <_realloc_r+0x5a>
 800f96c:	4621      	mov	r1, r4
 800f96e:	4640      	mov	r0, r8
 800f970:	f7ff fd82 	bl	800f478 <_malloc_r>
 800f974:	4605      	mov	r5, r0
 800f976:	2800      	cmp	r0, #0
 800f978:	d0ed      	beq.n	800f956 <_realloc_r+0x1e>
 800f97a:	42bc      	cmp	r4, r7
 800f97c:	4622      	mov	r2, r4
 800f97e:	4631      	mov	r1, r6
 800f980:	bf28      	it	cs
 800f982:	463a      	movcs	r2, r7
 800f984:	f7fc f8c0 	bl	800bb08 <memcpy>
 800f988:	4631      	mov	r1, r6
 800f98a:	4640      	mov	r0, r8
 800f98c:	f7ff fd08 	bl	800f3a0 <_free_r>
 800f990:	e7e1      	b.n	800f956 <_realloc_r+0x1e>
 800f992:	4635      	mov	r5, r6
 800f994:	e7df      	b.n	800f956 <_realloc_r+0x1e>

0800f996 <__sfputc_r>:
 800f996:	6893      	ldr	r3, [r2, #8]
 800f998:	3b01      	subs	r3, #1
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	b410      	push	{r4}
 800f99e:	6093      	str	r3, [r2, #8]
 800f9a0:	da08      	bge.n	800f9b4 <__sfputc_r+0x1e>
 800f9a2:	6994      	ldr	r4, [r2, #24]
 800f9a4:	42a3      	cmp	r3, r4
 800f9a6:	db01      	blt.n	800f9ac <__sfputc_r+0x16>
 800f9a8:	290a      	cmp	r1, #10
 800f9aa:	d103      	bne.n	800f9b4 <__sfputc_r+0x1e>
 800f9ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9b0:	f000 b94a 	b.w	800fc48 <__swbuf_r>
 800f9b4:	6813      	ldr	r3, [r2, #0]
 800f9b6:	1c58      	adds	r0, r3, #1
 800f9b8:	6010      	str	r0, [r2, #0]
 800f9ba:	7019      	strb	r1, [r3, #0]
 800f9bc:	4608      	mov	r0, r1
 800f9be:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f9c2:	4770      	bx	lr

0800f9c4 <__sfputs_r>:
 800f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9c6:	4606      	mov	r6, r0
 800f9c8:	460f      	mov	r7, r1
 800f9ca:	4614      	mov	r4, r2
 800f9cc:	18d5      	adds	r5, r2, r3
 800f9ce:	42ac      	cmp	r4, r5
 800f9d0:	d101      	bne.n	800f9d6 <__sfputs_r+0x12>
 800f9d2:	2000      	movs	r0, #0
 800f9d4:	e007      	b.n	800f9e6 <__sfputs_r+0x22>
 800f9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9da:	463a      	mov	r2, r7
 800f9dc:	4630      	mov	r0, r6
 800f9de:	f7ff ffda 	bl	800f996 <__sfputc_r>
 800f9e2:	1c43      	adds	r3, r0, #1
 800f9e4:	d1f3      	bne.n	800f9ce <__sfputs_r+0xa>
 800f9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800f9e8 <_vfiprintf_r>:
 800f9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9ec:	460d      	mov	r5, r1
 800f9ee:	b09d      	sub	sp, #116	; 0x74
 800f9f0:	4614      	mov	r4, r2
 800f9f2:	4698      	mov	r8, r3
 800f9f4:	4606      	mov	r6, r0
 800f9f6:	b118      	cbz	r0, 800fa00 <_vfiprintf_r+0x18>
 800f9f8:	6983      	ldr	r3, [r0, #24]
 800f9fa:	b90b      	cbnz	r3, 800fa00 <_vfiprintf_r+0x18>
 800f9fc:	f000 fb06 	bl	801000c <__sinit>
 800fa00:	4b89      	ldr	r3, [pc, #548]	; (800fc28 <_vfiprintf_r+0x240>)
 800fa02:	429d      	cmp	r5, r3
 800fa04:	d11b      	bne.n	800fa3e <_vfiprintf_r+0x56>
 800fa06:	6875      	ldr	r5, [r6, #4]
 800fa08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa0a:	07d9      	lsls	r1, r3, #31
 800fa0c:	d405      	bmi.n	800fa1a <_vfiprintf_r+0x32>
 800fa0e:	89ab      	ldrh	r3, [r5, #12]
 800fa10:	059a      	lsls	r2, r3, #22
 800fa12:	d402      	bmi.n	800fa1a <_vfiprintf_r+0x32>
 800fa14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa16:	f000 fb97 	bl	8010148 <__retarget_lock_acquire_recursive>
 800fa1a:	89ab      	ldrh	r3, [r5, #12]
 800fa1c:	071b      	lsls	r3, r3, #28
 800fa1e:	d501      	bpl.n	800fa24 <_vfiprintf_r+0x3c>
 800fa20:	692b      	ldr	r3, [r5, #16]
 800fa22:	b9eb      	cbnz	r3, 800fa60 <_vfiprintf_r+0x78>
 800fa24:	4629      	mov	r1, r5
 800fa26:	4630      	mov	r0, r6
 800fa28:	f000 f960 	bl	800fcec <__swsetup_r>
 800fa2c:	b1c0      	cbz	r0, 800fa60 <_vfiprintf_r+0x78>
 800fa2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fa30:	07dc      	lsls	r4, r3, #31
 800fa32:	d50e      	bpl.n	800fa52 <_vfiprintf_r+0x6a>
 800fa34:	f04f 30ff 	mov.w	r0, #4294967295
 800fa38:	b01d      	add	sp, #116	; 0x74
 800fa3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa3e:	4b7b      	ldr	r3, [pc, #492]	; (800fc2c <_vfiprintf_r+0x244>)
 800fa40:	429d      	cmp	r5, r3
 800fa42:	d101      	bne.n	800fa48 <_vfiprintf_r+0x60>
 800fa44:	68b5      	ldr	r5, [r6, #8]
 800fa46:	e7df      	b.n	800fa08 <_vfiprintf_r+0x20>
 800fa48:	4b79      	ldr	r3, [pc, #484]	; (800fc30 <_vfiprintf_r+0x248>)
 800fa4a:	429d      	cmp	r5, r3
 800fa4c:	bf08      	it	eq
 800fa4e:	68f5      	ldreq	r5, [r6, #12]
 800fa50:	e7da      	b.n	800fa08 <_vfiprintf_r+0x20>
 800fa52:	89ab      	ldrh	r3, [r5, #12]
 800fa54:	0598      	lsls	r0, r3, #22
 800fa56:	d4ed      	bmi.n	800fa34 <_vfiprintf_r+0x4c>
 800fa58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fa5a:	f000 fb76 	bl	801014a <__retarget_lock_release_recursive>
 800fa5e:	e7e9      	b.n	800fa34 <_vfiprintf_r+0x4c>
 800fa60:	2300      	movs	r3, #0
 800fa62:	9309      	str	r3, [sp, #36]	; 0x24
 800fa64:	2320      	movs	r3, #32
 800fa66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800fa6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800fa6e:	2330      	movs	r3, #48	; 0x30
 800fa70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fc34 <_vfiprintf_r+0x24c>
 800fa74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800fa78:	f04f 0901 	mov.w	r9, #1
 800fa7c:	4623      	mov	r3, r4
 800fa7e:	469a      	mov	sl, r3
 800fa80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fa84:	b10a      	cbz	r2, 800fa8a <_vfiprintf_r+0xa2>
 800fa86:	2a25      	cmp	r2, #37	; 0x25
 800fa88:	d1f9      	bne.n	800fa7e <_vfiprintf_r+0x96>
 800fa8a:	ebba 0b04 	subs.w	fp, sl, r4
 800fa8e:	d00b      	beq.n	800faa8 <_vfiprintf_r+0xc0>
 800fa90:	465b      	mov	r3, fp
 800fa92:	4622      	mov	r2, r4
 800fa94:	4629      	mov	r1, r5
 800fa96:	4630      	mov	r0, r6
 800fa98:	f7ff ff94 	bl	800f9c4 <__sfputs_r>
 800fa9c:	3001      	adds	r0, #1
 800fa9e:	f000 80aa 	beq.w	800fbf6 <_vfiprintf_r+0x20e>
 800faa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800faa4:	445a      	add	r2, fp
 800faa6:	9209      	str	r2, [sp, #36]	; 0x24
 800faa8:	f89a 3000 	ldrb.w	r3, [sl]
 800faac:	2b00      	cmp	r3, #0
 800faae:	f000 80a2 	beq.w	800fbf6 <_vfiprintf_r+0x20e>
 800fab2:	2300      	movs	r3, #0
 800fab4:	f04f 32ff 	mov.w	r2, #4294967295
 800fab8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fabc:	f10a 0a01 	add.w	sl, sl, #1
 800fac0:	9304      	str	r3, [sp, #16]
 800fac2:	9307      	str	r3, [sp, #28]
 800fac4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fac8:	931a      	str	r3, [sp, #104]	; 0x68
 800faca:	4654      	mov	r4, sl
 800facc:	2205      	movs	r2, #5
 800face:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fad2:	4858      	ldr	r0, [pc, #352]	; (800fc34 <_vfiprintf_r+0x24c>)
 800fad4:	f7f0 fb84 	bl	80001e0 <memchr>
 800fad8:	9a04      	ldr	r2, [sp, #16]
 800fada:	b9d8      	cbnz	r0, 800fb14 <_vfiprintf_r+0x12c>
 800fadc:	06d1      	lsls	r1, r2, #27
 800fade:	bf44      	itt	mi
 800fae0:	2320      	movmi	r3, #32
 800fae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fae6:	0713      	lsls	r3, r2, #28
 800fae8:	bf44      	itt	mi
 800faea:	232b      	movmi	r3, #43	; 0x2b
 800faec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800faf0:	f89a 3000 	ldrb.w	r3, [sl]
 800faf4:	2b2a      	cmp	r3, #42	; 0x2a
 800faf6:	d015      	beq.n	800fb24 <_vfiprintf_r+0x13c>
 800faf8:	9a07      	ldr	r2, [sp, #28]
 800fafa:	4654      	mov	r4, sl
 800fafc:	2000      	movs	r0, #0
 800fafe:	f04f 0c0a 	mov.w	ip, #10
 800fb02:	4621      	mov	r1, r4
 800fb04:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fb08:	3b30      	subs	r3, #48	; 0x30
 800fb0a:	2b09      	cmp	r3, #9
 800fb0c:	d94e      	bls.n	800fbac <_vfiprintf_r+0x1c4>
 800fb0e:	b1b0      	cbz	r0, 800fb3e <_vfiprintf_r+0x156>
 800fb10:	9207      	str	r2, [sp, #28]
 800fb12:	e014      	b.n	800fb3e <_vfiprintf_r+0x156>
 800fb14:	eba0 0308 	sub.w	r3, r0, r8
 800fb18:	fa09 f303 	lsl.w	r3, r9, r3
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	9304      	str	r3, [sp, #16]
 800fb20:	46a2      	mov	sl, r4
 800fb22:	e7d2      	b.n	800faca <_vfiprintf_r+0xe2>
 800fb24:	9b03      	ldr	r3, [sp, #12]
 800fb26:	1d19      	adds	r1, r3, #4
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	9103      	str	r1, [sp, #12]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	bfbb      	ittet	lt
 800fb30:	425b      	neglt	r3, r3
 800fb32:	f042 0202 	orrlt.w	r2, r2, #2
 800fb36:	9307      	strge	r3, [sp, #28]
 800fb38:	9307      	strlt	r3, [sp, #28]
 800fb3a:	bfb8      	it	lt
 800fb3c:	9204      	strlt	r2, [sp, #16]
 800fb3e:	7823      	ldrb	r3, [r4, #0]
 800fb40:	2b2e      	cmp	r3, #46	; 0x2e
 800fb42:	d10c      	bne.n	800fb5e <_vfiprintf_r+0x176>
 800fb44:	7863      	ldrb	r3, [r4, #1]
 800fb46:	2b2a      	cmp	r3, #42	; 0x2a
 800fb48:	d135      	bne.n	800fbb6 <_vfiprintf_r+0x1ce>
 800fb4a:	9b03      	ldr	r3, [sp, #12]
 800fb4c:	1d1a      	adds	r2, r3, #4
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	9203      	str	r2, [sp, #12]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	bfb8      	it	lt
 800fb56:	f04f 33ff 	movlt.w	r3, #4294967295
 800fb5a:	3402      	adds	r4, #2
 800fb5c:	9305      	str	r3, [sp, #20]
 800fb5e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fc44 <_vfiprintf_r+0x25c>
 800fb62:	7821      	ldrb	r1, [r4, #0]
 800fb64:	2203      	movs	r2, #3
 800fb66:	4650      	mov	r0, sl
 800fb68:	f7f0 fb3a 	bl	80001e0 <memchr>
 800fb6c:	b140      	cbz	r0, 800fb80 <_vfiprintf_r+0x198>
 800fb6e:	2340      	movs	r3, #64	; 0x40
 800fb70:	eba0 000a 	sub.w	r0, r0, sl
 800fb74:	fa03 f000 	lsl.w	r0, r3, r0
 800fb78:	9b04      	ldr	r3, [sp, #16]
 800fb7a:	4303      	orrs	r3, r0
 800fb7c:	3401      	adds	r4, #1
 800fb7e:	9304      	str	r3, [sp, #16]
 800fb80:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fb84:	482c      	ldr	r0, [pc, #176]	; (800fc38 <_vfiprintf_r+0x250>)
 800fb86:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800fb8a:	2206      	movs	r2, #6
 800fb8c:	f7f0 fb28 	bl	80001e0 <memchr>
 800fb90:	2800      	cmp	r0, #0
 800fb92:	d03f      	beq.n	800fc14 <_vfiprintf_r+0x22c>
 800fb94:	4b29      	ldr	r3, [pc, #164]	; (800fc3c <_vfiprintf_r+0x254>)
 800fb96:	bb1b      	cbnz	r3, 800fbe0 <_vfiprintf_r+0x1f8>
 800fb98:	9b03      	ldr	r3, [sp, #12]
 800fb9a:	3307      	adds	r3, #7
 800fb9c:	f023 0307 	bic.w	r3, r3, #7
 800fba0:	3308      	adds	r3, #8
 800fba2:	9303      	str	r3, [sp, #12]
 800fba4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fba6:	443b      	add	r3, r7
 800fba8:	9309      	str	r3, [sp, #36]	; 0x24
 800fbaa:	e767      	b.n	800fa7c <_vfiprintf_r+0x94>
 800fbac:	fb0c 3202 	mla	r2, ip, r2, r3
 800fbb0:	460c      	mov	r4, r1
 800fbb2:	2001      	movs	r0, #1
 800fbb4:	e7a5      	b.n	800fb02 <_vfiprintf_r+0x11a>
 800fbb6:	2300      	movs	r3, #0
 800fbb8:	3401      	adds	r4, #1
 800fbba:	9305      	str	r3, [sp, #20]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	f04f 0c0a 	mov.w	ip, #10
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fbc8:	3a30      	subs	r2, #48	; 0x30
 800fbca:	2a09      	cmp	r2, #9
 800fbcc:	d903      	bls.n	800fbd6 <_vfiprintf_r+0x1ee>
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d0c5      	beq.n	800fb5e <_vfiprintf_r+0x176>
 800fbd2:	9105      	str	r1, [sp, #20]
 800fbd4:	e7c3      	b.n	800fb5e <_vfiprintf_r+0x176>
 800fbd6:	fb0c 2101 	mla	r1, ip, r1, r2
 800fbda:	4604      	mov	r4, r0
 800fbdc:	2301      	movs	r3, #1
 800fbde:	e7f0      	b.n	800fbc2 <_vfiprintf_r+0x1da>
 800fbe0:	ab03      	add	r3, sp, #12
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	462a      	mov	r2, r5
 800fbe6:	4b16      	ldr	r3, [pc, #88]	; (800fc40 <_vfiprintf_r+0x258>)
 800fbe8:	a904      	add	r1, sp, #16
 800fbea:	4630      	mov	r0, r6
 800fbec:	f7fc f842 	bl	800bc74 <_printf_float>
 800fbf0:	4607      	mov	r7, r0
 800fbf2:	1c78      	adds	r0, r7, #1
 800fbf4:	d1d6      	bne.n	800fba4 <_vfiprintf_r+0x1bc>
 800fbf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fbf8:	07d9      	lsls	r1, r3, #31
 800fbfa:	d405      	bmi.n	800fc08 <_vfiprintf_r+0x220>
 800fbfc:	89ab      	ldrh	r3, [r5, #12]
 800fbfe:	059a      	lsls	r2, r3, #22
 800fc00:	d402      	bmi.n	800fc08 <_vfiprintf_r+0x220>
 800fc02:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fc04:	f000 faa1 	bl	801014a <__retarget_lock_release_recursive>
 800fc08:	89ab      	ldrh	r3, [r5, #12]
 800fc0a:	065b      	lsls	r3, r3, #25
 800fc0c:	f53f af12 	bmi.w	800fa34 <_vfiprintf_r+0x4c>
 800fc10:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fc12:	e711      	b.n	800fa38 <_vfiprintf_r+0x50>
 800fc14:	ab03      	add	r3, sp, #12
 800fc16:	9300      	str	r3, [sp, #0]
 800fc18:	462a      	mov	r2, r5
 800fc1a:	4b09      	ldr	r3, [pc, #36]	; (800fc40 <_vfiprintf_r+0x258>)
 800fc1c:	a904      	add	r1, sp, #16
 800fc1e:	4630      	mov	r0, r6
 800fc20:	f7fc facc 	bl	800c1bc <_printf_i>
 800fc24:	e7e4      	b.n	800fbf0 <_vfiprintf_r+0x208>
 800fc26:	bf00      	nop
 800fc28:	08011514 	.word	0x08011514
 800fc2c:	08011534 	.word	0x08011534
 800fc30:	080114f4 	.word	0x080114f4
 800fc34:	080114a4 	.word	0x080114a4
 800fc38:	080114ae 	.word	0x080114ae
 800fc3c:	0800bc75 	.word	0x0800bc75
 800fc40:	0800f9c5 	.word	0x0800f9c5
 800fc44:	080114aa 	.word	0x080114aa

0800fc48 <__swbuf_r>:
 800fc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc4a:	460e      	mov	r6, r1
 800fc4c:	4614      	mov	r4, r2
 800fc4e:	4605      	mov	r5, r0
 800fc50:	b118      	cbz	r0, 800fc5a <__swbuf_r+0x12>
 800fc52:	6983      	ldr	r3, [r0, #24]
 800fc54:	b90b      	cbnz	r3, 800fc5a <__swbuf_r+0x12>
 800fc56:	f000 f9d9 	bl	801000c <__sinit>
 800fc5a:	4b21      	ldr	r3, [pc, #132]	; (800fce0 <__swbuf_r+0x98>)
 800fc5c:	429c      	cmp	r4, r3
 800fc5e:	d12b      	bne.n	800fcb8 <__swbuf_r+0x70>
 800fc60:	686c      	ldr	r4, [r5, #4]
 800fc62:	69a3      	ldr	r3, [r4, #24]
 800fc64:	60a3      	str	r3, [r4, #8]
 800fc66:	89a3      	ldrh	r3, [r4, #12]
 800fc68:	071a      	lsls	r2, r3, #28
 800fc6a:	d52f      	bpl.n	800fccc <__swbuf_r+0x84>
 800fc6c:	6923      	ldr	r3, [r4, #16]
 800fc6e:	b36b      	cbz	r3, 800fccc <__swbuf_r+0x84>
 800fc70:	6923      	ldr	r3, [r4, #16]
 800fc72:	6820      	ldr	r0, [r4, #0]
 800fc74:	1ac0      	subs	r0, r0, r3
 800fc76:	6963      	ldr	r3, [r4, #20]
 800fc78:	b2f6      	uxtb	r6, r6
 800fc7a:	4283      	cmp	r3, r0
 800fc7c:	4637      	mov	r7, r6
 800fc7e:	dc04      	bgt.n	800fc8a <__swbuf_r+0x42>
 800fc80:	4621      	mov	r1, r4
 800fc82:	4628      	mov	r0, r5
 800fc84:	f000 f92e 	bl	800fee4 <_fflush_r>
 800fc88:	bb30      	cbnz	r0, 800fcd8 <__swbuf_r+0x90>
 800fc8a:	68a3      	ldr	r3, [r4, #8]
 800fc8c:	3b01      	subs	r3, #1
 800fc8e:	60a3      	str	r3, [r4, #8]
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	1c5a      	adds	r2, r3, #1
 800fc94:	6022      	str	r2, [r4, #0]
 800fc96:	701e      	strb	r6, [r3, #0]
 800fc98:	6963      	ldr	r3, [r4, #20]
 800fc9a:	3001      	adds	r0, #1
 800fc9c:	4283      	cmp	r3, r0
 800fc9e:	d004      	beq.n	800fcaa <__swbuf_r+0x62>
 800fca0:	89a3      	ldrh	r3, [r4, #12]
 800fca2:	07db      	lsls	r3, r3, #31
 800fca4:	d506      	bpl.n	800fcb4 <__swbuf_r+0x6c>
 800fca6:	2e0a      	cmp	r6, #10
 800fca8:	d104      	bne.n	800fcb4 <__swbuf_r+0x6c>
 800fcaa:	4621      	mov	r1, r4
 800fcac:	4628      	mov	r0, r5
 800fcae:	f000 f919 	bl	800fee4 <_fflush_r>
 800fcb2:	b988      	cbnz	r0, 800fcd8 <__swbuf_r+0x90>
 800fcb4:	4638      	mov	r0, r7
 800fcb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fcb8:	4b0a      	ldr	r3, [pc, #40]	; (800fce4 <__swbuf_r+0x9c>)
 800fcba:	429c      	cmp	r4, r3
 800fcbc:	d101      	bne.n	800fcc2 <__swbuf_r+0x7a>
 800fcbe:	68ac      	ldr	r4, [r5, #8]
 800fcc0:	e7cf      	b.n	800fc62 <__swbuf_r+0x1a>
 800fcc2:	4b09      	ldr	r3, [pc, #36]	; (800fce8 <__swbuf_r+0xa0>)
 800fcc4:	429c      	cmp	r4, r3
 800fcc6:	bf08      	it	eq
 800fcc8:	68ec      	ldreq	r4, [r5, #12]
 800fcca:	e7ca      	b.n	800fc62 <__swbuf_r+0x1a>
 800fccc:	4621      	mov	r1, r4
 800fcce:	4628      	mov	r0, r5
 800fcd0:	f000 f80c 	bl	800fcec <__swsetup_r>
 800fcd4:	2800      	cmp	r0, #0
 800fcd6:	d0cb      	beq.n	800fc70 <__swbuf_r+0x28>
 800fcd8:	f04f 37ff 	mov.w	r7, #4294967295
 800fcdc:	e7ea      	b.n	800fcb4 <__swbuf_r+0x6c>
 800fcde:	bf00      	nop
 800fce0:	08011514 	.word	0x08011514
 800fce4:	08011534 	.word	0x08011534
 800fce8:	080114f4 	.word	0x080114f4

0800fcec <__swsetup_r>:
 800fcec:	4b32      	ldr	r3, [pc, #200]	; (800fdb8 <__swsetup_r+0xcc>)
 800fcee:	b570      	push	{r4, r5, r6, lr}
 800fcf0:	681d      	ldr	r5, [r3, #0]
 800fcf2:	4606      	mov	r6, r0
 800fcf4:	460c      	mov	r4, r1
 800fcf6:	b125      	cbz	r5, 800fd02 <__swsetup_r+0x16>
 800fcf8:	69ab      	ldr	r3, [r5, #24]
 800fcfa:	b913      	cbnz	r3, 800fd02 <__swsetup_r+0x16>
 800fcfc:	4628      	mov	r0, r5
 800fcfe:	f000 f985 	bl	801000c <__sinit>
 800fd02:	4b2e      	ldr	r3, [pc, #184]	; (800fdbc <__swsetup_r+0xd0>)
 800fd04:	429c      	cmp	r4, r3
 800fd06:	d10f      	bne.n	800fd28 <__swsetup_r+0x3c>
 800fd08:	686c      	ldr	r4, [r5, #4]
 800fd0a:	89a3      	ldrh	r3, [r4, #12]
 800fd0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd10:	0719      	lsls	r1, r3, #28
 800fd12:	d42c      	bmi.n	800fd6e <__swsetup_r+0x82>
 800fd14:	06dd      	lsls	r5, r3, #27
 800fd16:	d411      	bmi.n	800fd3c <__swsetup_r+0x50>
 800fd18:	2309      	movs	r3, #9
 800fd1a:	6033      	str	r3, [r6, #0]
 800fd1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fd20:	81a3      	strh	r3, [r4, #12]
 800fd22:	f04f 30ff 	mov.w	r0, #4294967295
 800fd26:	e03e      	b.n	800fda6 <__swsetup_r+0xba>
 800fd28:	4b25      	ldr	r3, [pc, #148]	; (800fdc0 <__swsetup_r+0xd4>)
 800fd2a:	429c      	cmp	r4, r3
 800fd2c:	d101      	bne.n	800fd32 <__swsetup_r+0x46>
 800fd2e:	68ac      	ldr	r4, [r5, #8]
 800fd30:	e7eb      	b.n	800fd0a <__swsetup_r+0x1e>
 800fd32:	4b24      	ldr	r3, [pc, #144]	; (800fdc4 <__swsetup_r+0xd8>)
 800fd34:	429c      	cmp	r4, r3
 800fd36:	bf08      	it	eq
 800fd38:	68ec      	ldreq	r4, [r5, #12]
 800fd3a:	e7e6      	b.n	800fd0a <__swsetup_r+0x1e>
 800fd3c:	0758      	lsls	r0, r3, #29
 800fd3e:	d512      	bpl.n	800fd66 <__swsetup_r+0x7a>
 800fd40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fd42:	b141      	cbz	r1, 800fd56 <__swsetup_r+0x6a>
 800fd44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fd48:	4299      	cmp	r1, r3
 800fd4a:	d002      	beq.n	800fd52 <__swsetup_r+0x66>
 800fd4c:	4630      	mov	r0, r6
 800fd4e:	f7ff fb27 	bl	800f3a0 <_free_r>
 800fd52:	2300      	movs	r3, #0
 800fd54:	6363      	str	r3, [r4, #52]	; 0x34
 800fd56:	89a3      	ldrh	r3, [r4, #12]
 800fd58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fd5c:	81a3      	strh	r3, [r4, #12]
 800fd5e:	2300      	movs	r3, #0
 800fd60:	6063      	str	r3, [r4, #4]
 800fd62:	6923      	ldr	r3, [r4, #16]
 800fd64:	6023      	str	r3, [r4, #0]
 800fd66:	89a3      	ldrh	r3, [r4, #12]
 800fd68:	f043 0308 	orr.w	r3, r3, #8
 800fd6c:	81a3      	strh	r3, [r4, #12]
 800fd6e:	6923      	ldr	r3, [r4, #16]
 800fd70:	b94b      	cbnz	r3, 800fd86 <__swsetup_r+0x9a>
 800fd72:	89a3      	ldrh	r3, [r4, #12]
 800fd74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fd78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd7c:	d003      	beq.n	800fd86 <__swsetup_r+0x9a>
 800fd7e:	4621      	mov	r1, r4
 800fd80:	4630      	mov	r0, r6
 800fd82:	f000 fa09 	bl	8010198 <__smakebuf_r>
 800fd86:	89a0      	ldrh	r0, [r4, #12]
 800fd88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fd8c:	f010 0301 	ands.w	r3, r0, #1
 800fd90:	d00a      	beq.n	800fda8 <__swsetup_r+0xbc>
 800fd92:	2300      	movs	r3, #0
 800fd94:	60a3      	str	r3, [r4, #8]
 800fd96:	6963      	ldr	r3, [r4, #20]
 800fd98:	425b      	negs	r3, r3
 800fd9a:	61a3      	str	r3, [r4, #24]
 800fd9c:	6923      	ldr	r3, [r4, #16]
 800fd9e:	b943      	cbnz	r3, 800fdb2 <__swsetup_r+0xc6>
 800fda0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fda4:	d1ba      	bne.n	800fd1c <__swsetup_r+0x30>
 800fda6:	bd70      	pop	{r4, r5, r6, pc}
 800fda8:	0781      	lsls	r1, r0, #30
 800fdaa:	bf58      	it	pl
 800fdac:	6963      	ldrpl	r3, [r4, #20]
 800fdae:	60a3      	str	r3, [r4, #8]
 800fdb0:	e7f4      	b.n	800fd9c <__swsetup_r+0xb0>
 800fdb2:	2000      	movs	r0, #0
 800fdb4:	e7f7      	b.n	800fda6 <__swsetup_r+0xba>
 800fdb6:	bf00      	nop
 800fdb8:	20000010 	.word	0x20000010
 800fdbc:	08011514 	.word	0x08011514
 800fdc0:	08011534 	.word	0x08011534
 800fdc4:	080114f4 	.word	0x080114f4

0800fdc8 <abort>:
 800fdc8:	b508      	push	{r3, lr}
 800fdca:	2006      	movs	r0, #6
 800fdcc:	f000 fa54 	bl	8010278 <raise>
 800fdd0:	2001      	movs	r0, #1
 800fdd2:	f7f3 f83b 	bl	8002e4c <_exit>
	...

0800fdd8 <__sflush_r>:
 800fdd8:	898a      	ldrh	r2, [r1, #12]
 800fdda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdde:	4605      	mov	r5, r0
 800fde0:	0710      	lsls	r0, r2, #28
 800fde2:	460c      	mov	r4, r1
 800fde4:	d458      	bmi.n	800fe98 <__sflush_r+0xc0>
 800fde6:	684b      	ldr	r3, [r1, #4]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	dc05      	bgt.n	800fdf8 <__sflush_r+0x20>
 800fdec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	dc02      	bgt.n	800fdf8 <__sflush_r+0x20>
 800fdf2:	2000      	movs	r0, #0
 800fdf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdfa:	2e00      	cmp	r6, #0
 800fdfc:	d0f9      	beq.n	800fdf2 <__sflush_r+0x1a>
 800fdfe:	2300      	movs	r3, #0
 800fe00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fe04:	682f      	ldr	r7, [r5, #0]
 800fe06:	602b      	str	r3, [r5, #0]
 800fe08:	d032      	beq.n	800fe70 <__sflush_r+0x98>
 800fe0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fe0c:	89a3      	ldrh	r3, [r4, #12]
 800fe0e:	075a      	lsls	r2, r3, #29
 800fe10:	d505      	bpl.n	800fe1e <__sflush_r+0x46>
 800fe12:	6863      	ldr	r3, [r4, #4]
 800fe14:	1ac0      	subs	r0, r0, r3
 800fe16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fe18:	b10b      	cbz	r3, 800fe1e <__sflush_r+0x46>
 800fe1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fe1c:	1ac0      	subs	r0, r0, r3
 800fe1e:	2300      	movs	r3, #0
 800fe20:	4602      	mov	r2, r0
 800fe22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fe24:	6a21      	ldr	r1, [r4, #32]
 800fe26:	4628      	mov	r0, r5
 800fe28:	47b0      	blx	r6
 800fe2a:	1c43      	adds	r3, r0, #1
 800fe2c:	89a3      	ldrh	r3, [r4, #12]
 800fe2e:	d106      	bne.n	800fe3e <__sflush_r+0x66>
 800fe30:	6829      	ldr	r1, [r5, #0]
 800fe32:	291d      	cmp	r1, #29
 800fe34:	d82c      	bhi.n	800fe90 <__sflush_r+0xb8>
 800fe36:	4a2a      	ldr	r2, [pc, #168]	; (800fee0 <__sflush_r+0x108>)
 800fe38:	40ca      	lsrs	r2, r1
 800fe3a:	07d6      	lsls	r6, r2, #31
 800fe3c:	d528      	bpl.n	800fe90 <__sflush_r+0xb8>
 800fe3e:	2200      	movs	r2, #0
 800fe40:	6062      	str	r2, [r4, #4]
 800fe42:	04d9      	lsls	r1, r3, #19
 800fe44:	6922      	ldr	r2, [r4, #16]
 800fe46:	6022      	str	r2, [r4, #0]
 800fe48:	d504      	bpl.n	800fe54 <__sflush_r+0x7c>
 800fe4a:	1c42      	adds	r2, r0, #1
 800fe4c:	d101      	bne.n	800fe52 <__sflush_r+0x7a>
 800fe4e:	682b      	ldr	r3, [r5, #0]
 800fe50:	b903      	cbnz	r3, 800fe54 <__sflush_r+0x7c>
 800fe52:	6560      	str	r0, [r4, #84]	; 0x54
 800fe54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe56:	602f      	str	r7, [r5, #0]
 800fe58:	2900      	cmp	r1, #0
 800fe5a:	d0ca      	beq.n	800fdf2 <__sflush_r+0x1a>
 800fe5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe60:	4299      	cmp	r1, r3
 800fe62:	d002      	beq.n	800fe6a <__sflush_r+0x92>
 800fe64:	4628      	mov	r0, r5
 800fe66:	f7ff fa9b 	bl	800f3a0 <_free_r>
 800fe6a:	2000      	movs	r0, #0
 800fe6c:	6360      	str	r0, [r4, #52]	; 0x34
 800fe6e:	e7c1      	b.n	800fdf4 <__sflush_r+0x1c>
 800fe70:	6a21      	ldr	r1, [r4, #32]
 800fe72:	2301      	movs	r3, #1
 800fe74:	4628      	mov	r0, r5
 800fe76:	47b0      	blx	r6
 800fe78:	1c41      	adds	r1, r0, #1
 800fe7a:	d1c7      	bne.n	800fe0c <__sflush_r+0x34>
 800fe7c:	682b      	ldr	r3, [r5, #0]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d0c4      	beq.n	800fe0c <__sflush_r+0x34>
 800fe82:	2b1d      	cmp	r3, #29
 800fe84:	d001      	beq.n	800fe8a <__sflush_r+0xb2>
 800fe86:	2b16      	cmp	r3, #22
 800fe88:	d101      	bne.n	800fe8e <__sflush_r+0xb6>
 800fe8a:	602f      	str	r7, [r5, #0]
 800fe8c:	e7b1      	b.n	800fdf2 <__sflush_r+0x1a>
 800fe8e:	89a3      	ldrh	r3, [r4, #12]
 800fe90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe94:	81a3      	strh	r3, [r4, #12]
 800fe96:	e7ad      	b.n	800fdf4 <__sflush_r+0x1c>
 800fe98:	690f      	ldr	r7, [r1, #16]
 800fe9a:	2f00      	cmp	r7, #0
 800fe9c:	d0a9      	beq.n	800fdf2 <__sflush_r+0x1a>
 800fe9e:	0793      	lsls	r3, r2, #30
 800fea0:	680e      	ldr	r6, [r1, #0]
 800fea2:	bf08      	it	eq
 800fea4:	694b      	ldreq	r3, [r1, #20]
 800fea6:	600f      	str	r7, [r1, #0]
 800fea8:	bf18      	it	ne
 800feaa:	2300      	movne	r3, #0
 800feac:	eba6 0807 	sub.w	r8, r6, r7
 800feb0:	608b      	str	r3, [r1, #8]
 800feb2:	f1b8 0f00 	cmp.w	r8, #0
 800feb6:	dd9c      	ble.n	800fdf2 <__sflush_r+0x1a>
 800feb8:	6a21      	ldr	r1, [r4, #32]
 800feba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800febc:	4643      	mov	r3, r8
 800febe:	463a      	mov	r2, r7
 800fec0:	4628      	mov	r0, r5
 800fec2:	47b0      	blx	r6
 800fec4:	2800      	cmp	r0, #0
 800fec6:	dc06      	bgt.n	800fed6 <__sflush_r+0xfe>
 800fec8:	89a3      	ldrh	r3, [r4, #12]
 800feca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fece:	81a3      	strh	r3, [r4, #12]
 800fed0:	f04f 30ff 	mov.w	r0, #4294967295
 800fed4:	e78e      	b.n	800fdf4 <__sflush_r+0x1c>
 800fed6:	4407      	add	r7, r0
 800fed8:	eba8 0800 	sub.w	r8, r8, r0
 800fedc:	e7e9      	b.n	800feb2 <__sflush_r+0xda>
 800fede:	bf00      	nop
 800fee0:	20400001 	.word	0x20400001

0800fee4 <_fflush_r>:
 800fee4:	b538      	push	{r3, r4, r5, lr}
 800fee6:	690b      	ldr	r3, [r1, #16]
 800fee8:	4605      	mov	r5, r0
 800feea:	460c      	mov	r4, r1
 800feec:	b913      	cbnz	r3, 800fef4 <_fflush_r+0x10>
 800feee:	2500      	movs	r5, #0
 800fef0:	4628      	mov	r0, r5
 800fef2:	bd38      	pop	{r3, r4, r5, pc}
 800fef4:	b118      	cbz	r0, 800fefe <_fflush_r+0x1a>
 800fef6:	6983      	ldr	r3, [r0, #24]
 800fef8:	b90b      	cbnz	r3, 800fefe <_fflush_r+0x1a>
 800fefa:	f000 f887 	bl	801000c <__sinit>
 800fefe:	4b14      	ldr	r3, [pc, #80]	; (800ff50 <_fflush_r+0x6c>)
 800ff00:	429c      	cmp	r4, r3
 800ff02:	d11b      	bne.n	800ff3c <_fflush_r+0x58>
 800ff04:	686c      	ldr	r4, [r5, #4]
 800ff06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d0ef      	beq.n	800feee <_fflush_r+0xa>
 800ff0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ff10:	07d0      	lsls	r0, r2, #31
 800ff12:	d404      	bmi.n	800ff1e <_fflush_r+0x3a>
 800ff14:	0599      	lsls	r1, r3, #22
 800ff16:	d402      	bmi.n	800ff1e <_fflush_r+0x3a>
 800ff18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff1a:	f000 f915 	bl	8010148 <__retarget_lock_acquire_recursive>
 800ff1e:	4628      	mov	r0, r5
 800ff20:	4621      	mov	r1, r4
 800ff22:	f7ff ff59 	bl	800fdd8 <__sflush_r>
 800ff26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ff28:	07da      	lsls	r2, r3, #31
 800ff2a:	4605      	mov	r5, r0
 800ff2c:	d4e0      	bmi.n	800fef0 <_fflush_r+0xc>
 800ff2e:	89a3      	ldrh	r3, [r4, #12]
 800ff30:	059b      	lsls	r3, r3, #22
 800ff32:	d4dd      	bmi.n	800fef0 <_fflush_r+0xc>
 800ff34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ff36:	f000 f908 	bl	801014a <__retarget_lock_release_recursive>
 800ff3a:	e7d9      	b.n	800fef0 <_fflush_r+0xc>
 800ff3c:	4b05      	ldr	r3, [pc, #20]	; (800ff54 <_fflush_r+0x70>)
 800ff3e:	429c      	cmp	r4, r3
 800ff40:	d101      	bne.n	800ff46 <_fflush_r+0x62>
 800ff42:	68ac      	ldr	r4, [r5, #8]
 800ff44:	e7df      	b.n	800ff06 <_fflush_r+0x22>
 800ff46:	4b04      	ldr	r3, [pc, #16]	; (800ff58 <_fflush_r+0x74>)
 800ff48:	429c      	cmp	r4, r3
 800ff4a:	bf08      	it	eq
 800ff4c:	68ec      	ldreq	r4, [r5, #12]
 800ff4e:	e7da      	b.n	800ff06 <_fflush_r+0x22>
 800ff50:	08011514 	.word	0x08011514
 800ff54:	08011534 	.word	0x08011534
 800ff58:	080114f4 	.word	0x080114f4

0800ff5c <std>:
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	b510      	push	{r4, lr}
 800ff60:	4604      	mov	r4, r0
 800ff62:	e9c0 3300 	strd	r3, r3, [r0]
 800ff66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ff6a:	6083      	str	r3, [r0, #8]
 800ff6c:	8181      	strh	r1, [r0, #12]
 800ff6e:	6643      	str	r3, [r0, #100]	; 0x64
 800ff70:	81c2      	strh	r2, [r0, #14]
 800ff72:	6183      	str	r3, [r0, #24]
 800ff74:	4619      	mov	r1, r3
 800ff76:	2208      	movs	r2, #8
 800ff78:	305c      	adds	r0, #92	; 0x5c
 800ff7a:	f7fb fdd3 	bl	800bb24 <memset>
 800ff7e:	4b05      	ldr	r3, [pc, #20]	; (800ff94 <std+0x38>)
 800ff80:	6263      	str	r3, [r4, #36]	; 0x24
 800ff82:	4b05      	ldr	r3, [pc, #20]	; (800ff98 <std+0x3c>)
 800ff84:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff86:	4b05      	ldr	r3, [pc, #20]	; (800ff9c <std+0x40>)
 800ff88:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff8a:	4b05      	ldr	r3, [pc, #20]	; (800ffa0 <std+0x44>)
 800ff8c:	6224      	str	r4, [r4, #32]
 800ff8e:	6323      	str	r3, [r4, #48]	; 0x30
 800ff90:	bd10      	pop	{r4, pc}
 800ff92:	bf00      	nop
 800ff94:	080102b1 	.word	0x080102b1
 800ff98:	080102d3 	.word	0x080102d3
 800ff9c:	0801030b 	.word	0x0801030b
 800ffa0:	0801032f 	.word	0x0801032f

0800ffa4 <_cleanup_r>:
 800ffa4:	4901      	ldr	r1, [pc, #4]	; (800ffac <_cleanup_r+0x8>)
 800ffa6:	f000 b8af 	b.w	8010108 <_fwalk_reent>
 800ffaa:	bf00      	nop
 800ffac:	0800fee5 	.word	0x0800fee5

0800ffb0 <__sfmoreglue>:
 800ffb0:	b570      	push	{r4, r5, r6, lr}
 800ffb2:	2268      	movs	r2, #104	; 0x68
 800ffb4:	1e4d      	subs	r5, r1, #1
 800ffb6:	4355      	muls	r5, r2
 800ffb8:	460e      	mov	r6, r1
 800ffba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ffbe:	f7ff fa5b 	bl	800f478 <_malloc_r>
 800ffc2:	4604      	mov	r4, r0
 800ffc4:	b140      	cbz	r0, 800ffd8 <__sfmoreglue+0x28>
 800ffc6:	2100      	movs	r1, #0
 800ffc8:	e9c0 1600 	strd	r1, r6, [r0]
 800ffcc:	300c      	adds	r0, #12
 800ffce:	60a0      	str	r0, [r4, #8]
 800ffd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ffd4:	f7fb fda6 	bl	800bb24 <memset>
 800ffd8:	4620      	mov	r0, r4
 800ffda:	bd70      	pop	{r4, r5, r6, pc}

0800ffdc <__sfp_lock_acquire>:
 800ffdc:	4801      	ldr	r0, [pc, #4]	; (800ffe4 <__sfp_lock_acquire+0x8>)
 800ffde:	f000 b8b3 	b.w	8010148 <__retarget_lock_acquire_recursive>
 800ffe2:	bf00      	nop
 800ffe4:	20006375 	.word	0x20006375

0800ffe8 <__sfp_lock_release>:
 800ffe8:	4801      	ldr	r0, [pc, #4]	; (800fff0 <__sfp_lock_release+0x8>)
 800ffea:	f000 b8ae 	b.w	801014a <__retarget_lock_release_recursive>
 800ffee:	bf00      	nop
 800fff0:	20006375 	.word	0x20006375

0800fff4 <__sinit_lock_acquire>:
 800fff4:	4801      	ldr	r0, [pc, #4]	; (800fffc <__sinit_lock_acquire+0x8>)
 800fff6:	f000 b8a7 	b.w	8010148 <__retarget_lock_acquire_recursive>
 800fffa:	bf00      	nop
 800fffc:	20006376 	.word	0x20006376

08010000 <__sinit_lock_release>:
 8010000:	4801      	ldr	r0, [pc, #4]	; (8010008 <__sinit_lock_release+0x8>)
 8010002:	f000 b8a2 	b.w	801014a <__retarget_lock_release_recursive>
 8010006:	bf00      	nop
 8010008:	20006376 	.word	0x20006376

0801000c <__sinit>:
 801000c:	b510      	push	{r4, lr}
 801000e:	4604      	mov	r4, r0
 8010010:	f7ff fff0 	bl	800fff4 <__sinit_lock_acquire>
 8010014:	69a3      	ldr	r3, [r4, #24]
 8010016:	b11b      	cbz	r3, 8010020 <__sinit+0x14>
 8010018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801001c:	f7ff bff0 	b.w	8010000 <__sinit_lock_release>
 8010020:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010024:	6523      	str	r3, [r4, #80]	; 0x50
 8010026:	4b13      	ldr	r3, [pc, #76]	; (8010074 <__sinit+0x68>)
 8010028:	4a13      	ldr	r2, [pc, #76]	; (8010078 <__sinit+0x6c>)
 801002a:	681b      	ldr	r3, [r3, #0]
 801002c:	62a2      	str	r2, [r4, #40]	; 0x28
 801002e:	42a3      	cmp	r3, r4
 8010030:	bf04      	itt	eq
 8010032:	2301      	moveq	r3, #1
 8010034:	61a3      	streq	r3, [r4, #24]
 8010036:	4620      	mov	r0, r4
 8010038:	f000 f820 	bl	801007c <__sfp>
 801003c:	6060      	str	r0, [r4, #4]
 801003e:	4620      	mov	r0, r4
 8010040:	f000 f81c 	bl	801007c <__sfp>
 8010044:	60a0      	str	r0, [r4, #8]
 8010046:	4620      	mov	r0, r4
 8010048:	f000 f818 	bl	801007c <__sfp>
 801004c:	2200      	movs	r2, #0
 801004e:	60e0      	str	r0, [r4, #12]
 8010050:	2104      	movs	r1, #4
 8010052:	6860      	ldr	r0, [r4, #4]
 8010054:	f7ff ff82 	bl	800ff5c <std>
 8010058:	68a0      	ldr	r0, [r4, #8]
 801005a:	2201      	movs	r2, #1
 801005c:	2109      	movs	r1, #9
 801005e:	f7ff ff7d 	bl	800ff5c <std>
 8010062:	68e0      	ldr	r0, [r4, #12]
 8010064:	2202      	movs	r2, #2
 8010066:	2112      	movs	r1, #18
 8010068:	f7ff ff78 	bl	800ff5c <std>
 801006c:	2301      	movs	r3, #1
 801006e:	61a3      	str	r3, [r4, #24]
 8010070:	e7d2      	b.n	8010018 <__sinit+0xc>
 8010072:	bf00      	nop
 8010074:	080110b0 	.word	0x080110b0
 8010078:	0800ffa5 	.word	0x0800ffa5

0801007c <__sfp>:
 801007c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801007e:	4607      	mov	r7, r0
 8010080:	f7ff ffac 	bl	800ffdc <__sfp_lock_acquire>
 8010084:	4b1e      	ldr	r3, [pc, #120]	; (8010100 <__sfp+0x84>)
 8010086:	681e      	ldr	r6, [r3, #0]
 8010088:	69b3      	ldr	r3, [r6, #24]
 801008a:	b913      	cbnz	r3, 8010092 <__sfp+0x16>
 801008c:	4630      	mov	r0, r6
 801008e:	f7ff ffbd 	bl	801000c <__sinit>
 8010092:	3648      	adds	r6, #72	; 0x48
 8010094:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010098:	3b01      	subs	r3, #1
 801009a:	d503      	bpl.n	80100a4 <__sfp+0x28>
 801009c:	6833      	ldr	r3, [r6, #0]
 801009e:	b30b      	cbz	r3, 80100e4 <__sfp+0x68>
 80100a0:	6836      	ldr	r6, [r6, #0]
 80100a2:	e7f7      	b.n	8010094 <__sfp+0x18>
 80100a4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80100a8:	b9d5      	cbnz	r5, 80100e0 <__sfp+0x64>
 80100aa:	4b16      	ldr	r3, [pc, #88]	; (8010104 <__sfp+0x88>)
 80100ac:	60e3      	str	r3, [r4, #12]
 80100ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80100b2:	6665      	str	r5, [r4, #100]	; 0x64
 80100b4:	f000 f847 	bl	8010146 <__retarget_lock_init_recursive>
 80100b8:	f7ff ff96 	bl	800ffe8 <__sfp_lock_release>
 80100bc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80100c0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80100c4:	6025      	str	r5, [r4, #0]
 80100c6:	61a5      	str	r5, [r4, #24]
 80100c8:	2208      	movs	r2, #8
 80100ca:	4629      	mov	r1, r5
 80100cc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80100d0:	f7fb fd28 	bl	800bb24 <memset>
 80100d4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80100d8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80100dc:	4620      	mov	r0, r4
 80100de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100e0:	3468      	adds	r4, #104	; 0x68
 80100e2:	e7d9      	b.n	8010098 <__sfp+0x1c>
 80100e4:	2104      	movs	r1, #4
 80100e6:	4638      	mov	r0, r7
 80100e8:	f7ff ff62 	bl	800ffb0 <__sfmoreglue>
 80100ec:	4604      	mov	r4, r0
 80100ee:	6030      	str	r0, [r6, #0]
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d1d5      	bne.n	80100a0 <__sfp+0x24>
 80100f4:	f7ff ff78 	bl	800ffe8 <__sfp_lock_release>
 80100f8:	230c      	movs	r3, #12
 80100fa:	603b      	str	r3, [r7, #0]
 80100fc:	e7ee      	b.n	80100dc <__sfp+0x60>
 80100fe:	bf00      	nop
 8010100:	080110b0 	.word	0x080110b0
 8010104:	ffff0001 	.word	0xffff0001

08010108 <_fwalk_reent>:
 8010108:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801010c:	4606      	mov	r6, r0
 801010e:	4688      	mov	r8, r1
 8010110:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010114:	2700      	movs	r7, #0
 8010116:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801011a:	f1b9 0901 	subs.w	r9, r9, #1
 801011e:	d505      	bpl.n	801012c <_fwalk_reent+0x24>
 8010120:	6824      	ldr	r4, [r4, #0]
 8010122:	2c00      	cmp	r4, #0
 8010124:	d1f7      	bne.n	8010116 <_fwalk_reent+0xe>
 8010126:	4638      	mov	r0, r7
 8010128:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801012c:	89ab      	ldrh	r3, [r5, #12]
 801012e:	2b01      	cmp	r3, #1
 8010130:	d907      	bls.n	8010142 <_fwalk_reent+0x3a>
 8010132:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010136:	3301      	adds	r3, #1
 8010138:	d003      	beq.n	8010142 <_fwalk_reent+0x3a>
 801013a:	4629      	mov	r1, r5
 801013c:	4630      	mov	r0, r6
 801013e:	47c0      	blx	r8
 8010140:	4307      	orrs	r7, r0
 8010142:	3568      	adds	r5, #104	; 0x68
 8010144:	e7e9      	b.n	801011a <_fwalk_reent+0x12>

08010146 <__retarget_lock_init_recursive>:
 8010146:	4770      	bx	lr

08010148 <__retarget_lock_acquire_recursive>:
 8010148:	4770      	bx	lr

0801014a <__retarget_lock_release_recursive>:
 801014a:	4770      	bx	lr

0801014c <__swhatbuf_r>:
 801014c:	b570      	push	{r4, r5, r6, lr}
 801014e:	460e      	mov	r6, r1
 8010150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010154:	2900      	cmp	r1, #0
 8010156:	b096      	sub	sp, #88	; 0x58
 8010158:	4614      	mov	r4, r2
 801015a:	461d      	mov	r5, r3
 801015c:	da08      	bge.n	8010170 <__swhatbuf_r+0x24>
 801015e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010162:	2200      	movs	r2, #0
 8010164:	602a      	str	r2, [r5, #0]
 8010166:	061a      	lsls	r2, r3, #24
 8010168:	d410      	bmi.n	801018c <__swhatbuf_r+0x40>
 801016a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801016e:	e00e      	b.n	801018e <__swhatbuf_r+0x42>
 8010170:	466a      	mov	r2, sp
 8010172:	f000 f903 	bl	801037c <_fstat_r>
 8010176:	2800      	cmp	r0, #0
 8010178:	dbf1      	blt.n	801015e <__swhatbuf_r+0x12>
 801017a:	9a01      	ldr	r2, [sp, #4]
 801017c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010180:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010184:	425a      	negs	r2, r3
 8010186:	415a      	adcs	r2, r3
 8010188:	602a      	str	r2, [r5, #0]
 801018a:	e7ee      	b.n	801016a <__swhatbuf_r+0x1e>
 801018c:	2340      	movs	r3, #64	; 0x40
 801018e:	2000      	movs	r0, #0
 8010190:	6023      	str	r3, [r4, #0]
 8010192:	b016      	add	sp, #88	; 0x58
 8010194:	bd70      	pop	{r4, r5, r6, pc}
	...

08010198 <__smakebuf_r>:
 8010198:	898b      	ldrh	r3, [r1, #12]
 801019a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801019c:	079d      	lsls	r5, r3, #30
 801019e:	4606      	mov	r6, r0
 80101a0:	460c      	mov	r4, r1
 80101a2:	d507      	bpl.n	80101b4 <__smakebuf_r+0x1c>
 80101a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80101a8:	6023      	str	r3, [r4, #0]
 80101aa:	6123      	str	r3, [r4, #16]
 80101ac:	2301      	movs	r3, #1
 80101ae:	6163      	str	r3, [r4, #20]
 80101b0:	b002      	add	sp, #8
 80101b2:	bd70      	pop	{r4, r5, r6, pc}
 80101b4:	ab01      	add	r3, sp, #4
 80101b6:	466a      	mov	r2, sp
 80101b8:	f7ff ffc8 	bl	801014c <__swhatbuf_r>
 80101bc:	9900      	ldr	r1, [sp, #0]
 80101be:	4605      	mov	r5, r0
 80101c0:	4630      	mov	r0, r6
 80101c2:	f7ff f959 	bl	800f478 <_malloc_r>
 80101c6:	b948      	cbnz	r0, 80101dc <__smakebuf_r+0x44>
 80101c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101cc:	059a      	lsls	r2, r3, #22
 80101ce:	d4ef      	bmi.n	80101b0 <__smakebuf_r+0x18>
 80101d0:	f023 0303 	bic.w	r3, r3, #3
 80101d4:	f043 0302 	orr.w	r3, r3, #2
 80101d8:	81a3      	strh	r3, [r4, #12]
 80101da:	e7e3      	b.n	80101a4 <__smakebuf_r+0xc>
 80101dc:	4b0d      	ldr	r3, [pc, #52]	; (8010214 <__smakebuf_r+0x7c>)
 80101de:	62b3      	str	r3, [r6, #40]	; 0x28
 80101e0:	89a3      	ldrh	r3, [r4, #12]
 80101e2:	6020      	str	r0, [r4, #0]
 80101e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80101e8:	81a3      	strh	r3, [r4, #12]
 80101ea:	9b00      	ldr	r3, [sp, #0]
 80101ec:	6163      	str	r3, [r4, #20]
 80101ee:	9b01      	ldr	r3, [sp, #4]
 80101f0:	6120      	str	r0, [r4, #16]
 80101f2:	b15b      	cbz	r3, 801020c <__smakebuf_r+0x74>
 80101f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80101f8:	4630      	mov	r0, r6
 80101fa:	f000 f8d1 	bl	80103a0 <_isatty_r>
 80101fe:	b128      	cbz	r0, 801020c <__smakebuf_r+0x74>
 8010200:	89a3      	ldrh	r3, [r4, #12]
 8010202:	f023 0303 	bic.w	r3, r3, #3
 8010206:	f043 0301 	orr.w	r3, r3, #1
 801020a:	81a3      	strh	r3, [r4, #12]
 801020c:	89a0      	ldrh	r0, [r4, #12]
 801020e:	4305      	orrs	r5, r0
 8010210:	81a5      	strh	r5, [r4, #12]
 8010212:	e7cd      	b.n	80101b0 <__smakebuf_r+0x18>
 8010214:	0800ffa5 	.word	0x0800ffa5

08010218 <_malloc_usable_size_r>:
 8010218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801021c:	1f18      	subs	r0, r3, #4
 801021e:	2b00      	cmp	r3, #0
 8010220:	bfbc      	itt	lt
 8010222:	580b      	ldrlt	r3, [r1, r0]
 8010224:	18c0      	addlt	r0, r0, r3
 8010226:	4770      	bx	lr

08010228 <_raise_r>:
 8010228:	291f      	cmp	r1, #31
 801022a:	b538      	push	{r3, r4, r5, lr}
 801022c:	4604      	mov	r4, r0
 801022e:	460d      	mov	r5, r1
 8010230:	d904      	bls.n	801023c <_raise_r+0x14>
 8010232:	2316      	movs	r3, #22
 8010234:	6003      	str	r3, [r0, #0]
 8010236:	f04f 30ff 	mov.w	r0, #4294967295
 801023a:	bd38      	pop	{r3, r4, r5, pc}
 801023c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801023e:	b112      	cbz	r2, 8010246 <_raise_r+0x1e>
 8010240:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010244:	b94b      	cbnz	r3, 801025a <_raise_r+0x32>
 8010246:	4620      	mov	r0, r4
 8010248:	f000 f830 	bl	80102ac <_getpid_r>
 801024c:	462a      	mov	r2, r5
 801024e:	4601      	mov	r1, r0
 8010250:	4620      	mov	r0, r4
 8010252:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010256:	f000 b817 	b.w	8010288 <_kill_r>
 801025a:	2b01      	cmp	r3, #1
 801025c:	d00a      	beq.n	8010274 <_raise_r+0x4c>
 801025e:	1c59      	adds	r1, r3, #1
 8010260:	d103      	bne.n	801026a <_raise_r+0x42>
 8010262:	2316      	movs	r3, #22
 8010264:	6003      	str	r3, [r0, #0]
 8010266:	2001      	movs	r0, #1
 8010268:	e7e7      	b.n	801023a <_raise_r+0x12>
 801026a:	2400      	movs	r4, #0
 801026c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010270:	4628      	mov	r0, r5
 8010272:	4798      	blx	r3
 8010274:	2000      	movs	r0, #0
 8010276:	e7e0      	b.n	801023a <_raise_r+0x12>

08010278 <raise>:
 8010278:	4b02      	ldr	r3, [pc, #8]	; (8010284 <raise+0xc>)
 801027a:	4601      	mov	r1, r0
 801027c:	6818      	ldr	r0, [r3, #0]
 801027e:	f7ff bfd3 	b.w	8010228 <_raise_r>
 8010282:	bf00      	nop
 8010284:	20000010 	.word	0x20000010

08010288 <_kill_r>:
 8010288:	b538      	push	{r3, r4, r5, lr}
 801028a:	4d07      	ldr	r5, [pc, #28]	; (80102a8 <_kill_r+0x20>)
 801028c:	2300      	movs	r3, #0
 801028e:	4604      	mov	r4, r0
 8010290:	4608      	mov	r0, r1
 8010292:	4611      	mov	r1, r2
 8010294:	602b      	str	r3, [r5, #0]
 8010296:	f7f2 fdc9 	bl	8002e2c <_kill>
 801029a:	1c43      	adds	r3, r0, #1
 801029c:	d102      	bne.n	80102a4 <_kill_r+0x1c>
 801029e:	682b      	ldr	r3, [r5, #0]
 80102a0:	b103      	cbz	r3, 80102a4 <_kill_r+0x1c>
 80102a2:	6023      	str	r3, [r4, #0]
 80102a4:	bd38      	pop	{r3, r4, r5, pc}
 80102a6:	bf00      	nop
 80102a8:	20006370 	.word	0x20006370

080102ac <_getpid_r>:
 80102ac:	f7f2 bdb6 	b.w	8002e1c <_getpid>

080102b0 <__sread>:
 80102b0:	b510      	push	{r4, lr}
 80102b2:	460c      	mov	r4, r1
 80102b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102b8:	f000 f894 	bl	80103e4 <_read_r>
 80102bc:	2800      	cmp	r0, #0
 80102be:	bfab      	itete	ge
 80102c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80102c2:	89a3      	ldrhlt	r3, [r4, #12]
 80102c4:	181b      	addge	r3, r3, r0
 80102c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80102ca:	bfac      	ite	ge
 80102cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80102ce:	81a3      	strhlt	r3, [r4, #12]
 80102d0:	bd10      	pop	{r4, pc}

080102d2 <__swrite>:
 80102d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102d6:	461f      	mov	r7, r3
 80102d8:	898b      	ldrh	r3, [r1, #12]
 80102da:	05db      	lsls	r3, r3, #23
 80102dc:	4605      	mov	r5, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	4616      	mov	r6, r2
 80102e2:	d505      	bpl.n	80102f0 <__swrite+0x1e>
 80102e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80102e8:	2302      	movs	r3, #2
 80102ea:	2200      	movs	r2, #0
 80102ec:	f000 f868 	bl	80103c0 <_lseek_r>
 80102f0:	89a3      	ldrh	r3, [r4, #12]
 80102f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80102f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80102fa:	81a3      	strh	r3, [r4, #12]
 80102fc:	4632      	mov	r2, r6
 80102fe:	463b      	mov	r3, r7
 8010300:	4628      	mov	r0, r5
 8010302:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010306:	f000 b817 	b.w	8010338 <_write_r>

0801030a <__sseek>:
 801030a:	b510      	push	{r4, lr}
 801030c:	460c      	mov	r4, r1
 801030e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010312:	f000 f855 	bl	80103c0 <_lseek_r>
 8010316:	1c43      	adds	r3, r0, #1
 8010318:	89a3      	ldrh	r3, [r4, #12]
 801031a:	bf15      	itete	ne
 801031c:	6560      	strne	r0, [r4, #84]	; 0x54
 801031e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010322:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010326:	81a3      	strheq	r3, [r4, #12]
 8010328:	bf18      	it	ne
 801032a:	81a3      	strhne	r3, [r4, #12]
 801032c:	bd10      	pop	{r4, pc}

0801032e <__sclose>:
 801032e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010332:	f000 b813 	b.w	801035c <_close_r>
	...

08010338 <_write_r>:
 8010338:	b538      	push	{r3, r4, r5, lr}
 801033a:	4d07      	ldr	r5, [pc, #28]	; (8010358 <_write_r+0x20>)
 801033c:	4604      	mov	r4, r0
 801033e:	4608      	mov	r0, r1
 8010340:	4611      	mov	r1, r2
 8010342:	2200      	movs	r2, #0
 8010344:	602a      	str	r2, [r5, #0]
 8010346:	461a      	mov	r2, r3
 8010348:	f7f2 fda7 	bl	8002e9a <_write>
 801034c:	1c43      	adds	r3, r0, #1
 801034e:	d102      	bne.n	8010356 <_write_r+0x1e>
 8010350:	682b      	ldr	r3, [r5, #0]
 8010352:	b103      	cbz	r3, 8010356 <_write_r+0x1e>
 8010354:	6023      	str	r3, [r4, #0]
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	20006370 	.word	0x20006370

0801035c <_close_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4d06      	ldr	r5, [pc, #24]	; (8010378 <_close_r+0x1c>)
 8010360:	2300      	movs	r3, #0
 8010362:	4604      	mov	r4, r0
 8010364:	4608      	mov	r0, r1
 8010366:	602b      	str	r3, [r5, #0]
 8010368:	f7f2 fdb3 	bl	8002ed2 <_close>
 801036c:	1c43      	adds	r3, r0, #1
 801036e:	d102      	bne.n	8010376 <_close_r+0x1a>
 8010370:	682b      	ldr	r3, [r5, #0]
 8010372:	b103      	cbz	r3, 8010376 <_close_r+0x1a>
 8010374:	6023      	str	r3, [r4, #0]
 8010376:	bd38      	pop	{r3, r4, r5, pc}
 8010378:	20006370 	.word	0x20006370

0801037c <_fstat_r>:
 801037c:	b538      	push	{r3, r4, r5, lr}
 801037e:	4d07      	ldr	r5, [pc, #28]	; (801039c <_fstat_r+0x20>)
 8010380:	2300      	movs	r3, #0
 8010382:	4604      	mov	r4, r0
 8010384:	4608      	mov	r0, r1
 8010386:	4611      	mov	r1, r2
 8010388:	602b      	str	r3, [r5, #0]
 801038a:	f7f2 fdae 	bl	8002eea <_fstat>
 801038e:	1c43      	adds	r3, r0, #1
 8010390:	d102      	bne.n	8010398 <_fstat_r+0x1c>
 8010392:	682b      	ldr	r3, [r5, #0]
 8010394:	b103      	cbz	r3, 8010398 <_fstat_r+0x1c>
 8010396:	6023      	str	r3, [r4, #0]
 8010398:	bd38      	pop	{r3, r4, r5, pc}
 801039a:	bf00      	nop
 801039c:	20006370 	.word	0x20006370

080103a0 <_isatty_r>:
 80103a0:	b538      	push	{r3, r4, r5, lr}
 80103a2:	4d06      	ldr	r5, [pc, #24]	; (80103bc <_isatty_r+0x1c>)
 80103a4:	2300      	movs	r3, #0
 80103a6:	4604      	mov	r4, r0
 80103a8:	4608      	mov	r0, r1
 80103aa:	602b      	str	r3, [r5, #0]
 80103ac:	f7f2 fdad 	bl	8002f0a <_isatty>
 80103b0:	1c43      	adds	r3, r0, #1
 80103b2:	d102      	bne.n	80103ba <_isatty_r+0x1a>
 80103b4:	682b      	ldr	r3, [r5, #0]
 80103b6:	b103      	cbz	r3, 80103ba <_isatty_r+0x1a>
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	bd38      	pop	{r3, r4, r5, pc}
 80103bc:	20006370 	.word	0x20006370

080103c0 <_lseek_r>:
 80103c0:	b538      	push	{r3, r4, r5, lr}
 80103c2:	4d07      	ldr	r5, [pc, #28]	; (80103e0 <_lseek_r+0x20>)
 80103c4:	4604      	mov	r4, r0
 80103c6:	4608      	mov	r0, r1
 80103c8:	4611      	mov	r1, r2
 80103ca:	2200      	movs	r2, #0
 80103cc:	602a      	str	r2, [r5, #0]
 80103ce:	461a      	mov	r2, r3
 80103d0:	f7f2 fda6 	bl	8002f20 <_lseek>
 80103d4:	1c43      	adds	r3, r0, #1
 80103d6:	d102      	bne.n	80103de <_lseek_r+0x1e>
 80103d8:	682b      	ldr	r3, [r5, #0]
 80103da:	b103      	cbz	r3, 80103de <_lseek_r+0x1e>
 80103dc:	6023      	str	r3, [r4, #0]
 80103de:	bd38      	pop	{r3, r4, r5, pc}
 80103e0:	20006370 	.word	0x20006370

080103e4 <_read_r>:
 80103e4:	b538      	push	{r3, r4, r5, lr}
 80103e6:	4d07      	ldr	r5, [pc, #28]	; (8010404 <_read_r+0x20>)
 80103e8:	4604      	mov	r4, r0
 80103ea:	4608      	mov	r0, r1
 80103ec:	4611      	mov	r1, r2
 80103ee:	2200      	movs	r2, #0
 80103f0:	602a      	str	r2, [r5, #0]
 80103f2:	461a      	mov	r2, r3
 80103f4:	f7f2 fd34 	bl	8002e60 <_read>
 80103f8:	1c43      	adds	r3, r0, #1
 80103fa:	d102      	bne.n	8010402 <_read_r+0x1e>
 80103fc:	682b      	ldr	r3, [r5, #0]
 80103fe:	b103      	cbz	r3, 8010402 <_read_r+0x1e>
 8010400:	6023      	str	r3, [r4, #0]
 8010402:	bd38      	pop	{r3, r4, r5, pc}
 8010404:	20006370 	.word	0x20006370

08010408 <_init>:
 8010408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801040a:	bf00      	nop
 801040c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801040e:	bc08      	pop	{r3}
 8010410:	469e      	mov	lr, r3
 8010412:	4770      	bx	lr

08010414 <_fini>:
 8010414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010416:	bf00      	nop
 8010418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801041a:	bc08      	pop	{r3}
 801041c:	469e      	mov	lr, r3
 801041e:	4770      	bx	lr
